{"ast":null,"code":"import { useMemo, useState, useEffect } from 'react';\n\n/**\r\n * useMediaMatch\r\n *\r\n * A react hook that signals whether or not a media query is matched.\r\n *\r\n * @param query The media query to signal on. Example, `\"print\"` will signal\r\n * `true` when previewing in print mode, and `false` otherwise.\r\n * @returns Whether or not the media query is currently matched.\r\n * @see https://rooks.vercel.app/docs/useMediaMatch\r\n */\nfunction useMediaMatch(query) {\n  const matchMedia = useMemo(() => window.matchMedia(query), [query]);\n  const [matches, setMatches] = useState(() => matchMedia.matches);\n  useEffect(() => {\n    setMatches(matchMedia.matches);\n    const listener = event => setMatches(event.matches);\n    if (matchMedia.addEventListener) {\n      matchMedia.addEventListener(\"change\", listener);\n      return () => matchMedia.removeEventListener(\"change\", listener);\n    } else {\n      matchMedia.addListener(listener);\n      return () => matchMedia.removeListener(listener);\n    }\n  }, [matchMedia]);\n  if (typeof window === \"undefined\") {\n    console.warn(\"useMediaMatch cannot function as window is undefined.\");\n    return false;\n  }\n  return matches;\n}\nexport { useMediaMatch };","map":{"version":3,"names":["useMemo","useState","useEffect","useMediaMatch","query","matchMedia","window","matches","setMatches","listener","event","addEventListener","removeEventListener","addListener","removeListener","console","warn"],"sources":["/Users/lijinxing/Documents/hipo-dapp-bamboo/node_modules/rooks/dist/esm/hooks/useMediaMatch.js"],"sourcesContent":["import { useMemo, useState, useEffect } from 'react';\n\n/**\r\n * useMediaMatch\r\n *\r\n * A react hook that signals whether or not a media query is matched.\r\n *\r\n * @param query The media query to signal on. Example, `\"print\"` will signal\r\n * `true` when previewing in print mode, and `false` otherwise.\r\n * @returns Whether or not the media query is currently matched.\r\n * @see https://rooks.vercel.app/docs/useMediaMatch\r\n */\r\nfunction useMediaMatch(query) {\r\n    const matchMedia = useMemo(() => window.matchMedia(query), [query]);\r\n    const [matches, setMatches] = useState(() => matchMedia.matches);\r\n    useEffect(() => {\r\n        setMatches(matchMedia.matches);\r\n        const listener = (event) => setMatches(event.matches);\r\n        if (matchMedia.addEventListener) {\r\n            matchMedia.addEventListener(\"change\", listener);\r\n            return () => matchMedia.removeEventListener(\"change\", listener);\r\n        }\r\n        else {\r\n            matchMedia.addListener(listener);\r\n            return () => matchMedia.removeListener(listener);\r\n        }\r\n    }, [matchMedia]);\r\n    if (typeof window === \"undefined\") {\r\n        console.warn(\"useMediaMatch cannot function as window is undefined.\");\r\n        return false;\r\n    }\r\n    return matches;\r\n}\n\nexport { useMediaMatch };\n"],"mappings":"AAAA,SAASA,OAAO,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,aAAaA,CAACC,KAAK,EAAE;EAC1B,MAAMC,UAAU,GAAGL,OAAO,CAAC,MAAMM,MAAM,CAACD,UAAU,CAACD,KAAK,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EACnE,MAAM,CAACG,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,MAAMI,UAAU,CAACE,OAAO,CAAC;EAChEL,SAAS,CAAC,MAAM;IACZM,UAAU,CAACH,UAAU,CAACE,OAAO,CAAC;IAC9B,MAAME,QAAQ,GAAIC,KAAK,IAAKF,UAAU,CAACE,KAAK,CAACH,OAAO,CAAC;IACrD,IAAIF,UAAU,CAACM,gBAAgB,EAAE;MAC7BN,UAAU,CAACM,gBAAgB,CAAC,QAAQ,EAAEF,QAAQ,CAAC;MAC/C,OAAO,MAAMJ,UAAU,CAACO,mBAAmB,CAAC,QAAQ,EAAEH,QAAQ,CAAC;IACnE,CAAC,MACI;MACDJ,UAAU,CAACQ,WAAW,CAACJ,QAAQ,CAAC;MAChC,OAAO,MAAMJ,UAAU,CAACS,cAAc,CAACL,QAAQ,CAAC;IACpD;EACJ,CAAC,EAAE,CAACJ,UAAU,CAAC,CAAC;EAChB,IAAI,OAAOC,MAAM,KAAK,WAAW,EAAE;IAC/BS,OAAO,CAACC,IAAI,CAAC,uDAAuD,CAAC;IACrE,OAAO,KAAK;EAChB;EACA,OAAOT,OAAO;AAClB;AAEA,SAASJ,aAAa"},"metadata":{},"sourceType":"module"}