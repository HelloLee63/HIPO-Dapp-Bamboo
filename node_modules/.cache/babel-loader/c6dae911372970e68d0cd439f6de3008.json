{"ast":null,"code":"import { useRef, useState, useEffect } from 'react';\n\n/**\r\n * useVideo\r\n * @description Video hook for react\r\n * @see {@link https://rooks.vercel.app/docs/useVideo}\r\n */\nconst useVideo = () => {\n  const videoRef = useRef(null);\n  const [state, setState] = useState({\n    currentTime: 0,\n    duration: 0,\n    isPaused: true,\n    isMuted: false,\n    volume: 1\n  });\n  const controls = {\n    play: () => {\n      if (videoRef.current) {\n        videoRef.current.play();\n        setState(Object.assign(Object.assign({}, state), {\n          isPaused: false\n        }));\n      }\n    },\n    pause: () => {\n      if (videoRef.current) {\n        videoRef.current.pause();\n        setState(Object.assign(Object.assign({}, state), {\n          isPaused: true\n        }));\n      }\n    },\n    toggleMute: () => {\n      if (videoRef.current) {\n        videoRef.current.muted = !videoRef.current.muted;\n        setState(Object.assign(Object.assign({}, state), {\n          isMuted: videoRef.current.muted\n        }));\n      }\n    },\n    setVolume: volume => {\n      if (videoRef.current) {\n        videoRef.current.volume = volume;\n        setState(Object.assign(Object.assign({}, state), {\n          volume\n        }));\n      }\n    },\n    setCurrentTime: time => {\n      if (videoRef.current) {\n        videoRef.current.currentTime = time;\n        setState(Object.assign(Object.assign({}, state), {\n          currentTime: time\n        }));\n      }\n    },\n    fastForward: seconds => {\n      if (videoRef.current) {\n        videoRef.current.currentTime += seconds;\n        setState(Object.assign(Object.assign({}, state), {\n          currentTime: videoRef.current.currentTime\n        }));\n      }\n    },\n    rewind: seconds => {\n      if (videoRef.current) {\n        videoRef.current.currentTime -= seconds;\n        setState(Object.assign(Object.assign({}, state), {\n          currentTime: videoRef.current.currentTime\n        }));\n      }\n    },\n    toggleFullScreen: () => {\n      if (videoRef.current) {\n        if (document.fullscreenElement) {\n          document.exitFullscreen();\n        } else {\n          videoRef.current.requestFullscreen();\n        }\n      }\n    }\n  };\n  useEffect(() => {\n    const video = videoRef.current;\n    const handleTimeUpdate = () => {\n      setState(prevState => Object.assign(Object.assign({}, prevState), {\n        currentTime: video.currentTime\n      }));\n    };\n    const handleDurationChange = () => {\n      setState(prevState => Object.assign(Object.assign({}, prevState), {\n        duration: video.duration\n      }));\n    };\n    const handlePause = () => {\n      setState(prevState => Object.assign(Object.assign({}, prevState), {\n        isPaused: true\n      }));\n    };\n    const handlePlay = () => {\n      setState(prevState => Object.assign(Object.assign({}, prevState), {\n        isPaused: false\n      }));\n    };\n    if (video) {\n      video.addEventListener(\"timeupdate\", handleTimeUpdate);\n      video.addEventListener(\"durationchange\", handleDurationChange);\n      video.addEventListener(\"pause\", handlePause);\n      video.addEventListener(\"play\", handlePlay);\n    }\n    return () => {\n      if (video) {\n        video.removeEventListener(\"timeupdate\", handleTimeUpdate);\n        video.removeEventListener(\"durationchange\", handleDurationChange);\n        video.removeEventListener(\"pause\", handlePause);\n        video.removeEventListener(\"play\", handlePlay);\n      }\n    };\n  }, [videoRef]);\n  return [videoRef, state, controls];\n};\nexport { useVideo };","map":{"version":3,"names":["useRef","useState","useEffect","useVideo","videoRef","state","setState","currentTime","duration","isPaused","isMuted","volume","controls","play","current","Object","assign","pause","toggleMute","muted","setVolume","setCurrentTime","time","fastForward","seconds","rewind","toggleFullScreen","document","fullscreenElement","exitFullscreen","requestFullscreen","video","handleTimeUpdate","prevState","handleDurationChange","handlePause","handlePlay","addEventListener","removeEventListener"],"sources":["/Users/lijinxing/Documents/hipo-dapp-bamboo/node_modules/rooks/dist/esm/hooks/useVideo.js"],"sourcesContent":["import { useRef, useState, useEffect } from 'react';\n\n/**\r\n * useVideo\r\n * @description Video hook for react\r\n * @see {@link https://rooks.vercel.app/docs/useVideo}\r\n */\r\nconst useVideo = () => {\r\n    const videoRef = useRef(null);\r\n    const [state, setState] = useState({\r\n        currentTime: 0,\r\n        duration: 0,\r\n        isPaused: true,\r\n        isMuted: false,\r\n        volume: 1,\r\n    });\r\n    const controls = {\r\n        play: () => {\r\n            if (videoRef.current) {\r\n                videoRef.current.play();\r\n                setState(Object.assign(Object.assign({}, state), { isPaused: false }));\r\n            }\r\n        },\r\n        pause: () => {\r\n            if (videoRef.current) {\r\n                videoRef.current.pause();\r\n                setState(Object.assign(Object.assign({}, state), { isPaused: true }));\r\n            }\r\n        },\r\n        toggleMute: () => {\r\n            if (videoRef.current) {\r\n                videoRef.current.muted = !videoRef.current.muted;\r\n                setState(Object.assign(Object.assign({}, state), { isMuted: videoRef.current.muted }));\r\n            }\r\n        },\r\n        setVolume: (volume) => {\r\n            if (videoRef.current) {\r\n                videoRef.current.volume = volume;\r\n                setState(Object.assign(Object.assign({}, state), { volume }));\r\n            }\r\n        },\r\n        setCurrentTime: (time) => {\r\n            if (videoRef.current) {\r\n                videoRef.current.currentTime = time;\r\n                setState(Object.assign(Object.assign({}, state), { currentTime: time }));\r\n            }\r\n        },\r\n        fastForward: (seconds) => {\r\n            if (videoRef.current) {\r\n                videoRef.current.currentTime += seconds;\r\n                setState(Object.assign(Object.assign({}, state), { currentTime: videoRef.current.currentTime }));\r\n            }\r\n        },\r\n        rewind: (seconds) => {\r\n            if (videoRef.current) {\r\n                videoRef.current.currentTime -= seconds;\r\n                setState(Object.assign(Object.assign({}, state), { currentTime: videoRef.current.currentTime }));\r\n            }\r\n        },\r\n        toggleFullScreen: () => {\r\n            if (videoRef.current) {\r\n                if (document.fullscreenElement) {\r\n                    document.exitFullscreen();\r\n                }\r\n                else {\r\n                    videoRef.current.requestFullscreen();\r\n                }\r\n            }\r\n        },\r\n    };\r\n    useEffect(() => {\r\n        const video = videoRef.current;\r\n        const handleTimeUpdate = () => {\r\n            setState((prevState) => (Object.assign(Object.assign({}, prevState), { currentTime: video.currentTime })));\r\n        };\r\n        const handleDurationChange = () => {\r\n            setState((prevState) => (Object.assign(Object.assign({}, prevState), { duration: video.duration })));\r\n        };\r\n        const handlePause = () => {\r\n            setState((prevState) => (Object.assign(Object.assign({}, prevState), { isPaused: true })));\r\n        };\r\n        const handlePlay = () => {\r\n            setState((prevState) => (Object.assign(Object.assign({}, prevState), { isPaused: false })));\r\n        };\r\n        if (video) {\r\n            video.addEventListener(\"timeupdate\", handleTimeUpdate);\r\n            video.addEventListener(\"durationchange\", handleDurationChange);\r\n            video.addEventListener(\"pause\", handlePause);\r\n            video.addEventListener(\"play\", handlePlay);\r\n        }\r\n        return () => {\r\n            if (video) {\r\n                video.removeEventListener(\"timeupdate\", handleTimeUpdate);\r\n                video.removeEventListener(\"durationchange\", handleDurationChange);\r\n                video.removeEventListener(\"pause\", handlePause);\r\n                video.removeEventListener(\"play\", handlePlay);\r\n            }\r\n        };\r\n    }, [videoRef]);\r\n    return [videoRef, state, controls];\r\n};\n\nexport { useVideo };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}