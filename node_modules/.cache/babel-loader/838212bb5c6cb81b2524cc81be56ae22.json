{"ast":null,"code":"import { isFunction, isNumber } from '../utils/utils.js';\nimport { useState, useRef, useCallback, useMemo } from 'react';\nconst getSplitIndex = (step, arr) => {\n  let index = step > 0 ? step - 1 // move forward\n  : arr.length + step; // move backward\n  if (index >= arr.length - 1) {\n    index = arr.length - 1;\n  }\n  if (index < 0) {\n    index = 0;\n  }\n  return index;\n};\n/**\r\n * Splits the target array at a history point into before, current and after sections.\r\n * Useful to navigate history.\r\n */\nconst split = (step, targetArr) => {\n  const index = getSplitIndex(step, targetArr);\n  return {\n    _current: targetArr[index],\n    _before: targetArr.slice(0, index),\n    _after: targetArr.slice(index + 1)\n  };\n};\n/**\r\n * useTimeTravelState\r\n * @description A hook that manages state which can undo and redo. A more powerful version of useUndoState hook.\r\n * @see {@link https://rooks.vercel.app/docs/useTimeTravelState}\r\n * @param initialValue The initial value of the state.\r\n * @returns {UseTimeTravelStateReturnValue}\r\n * @example\r\n * const [value, setValue, controls] = useTimeTravelState(0);\r\n * setValue(1);\r\n * setValue(2);\r\n * setValue(3);\r\n * controls.back(); // value === 2\r\n * controls.back(); // value === 1\r\n * controls.forward(); // value === 2\r\n * controls.forward(); // value === 3\r\n * controls.reset(); // value === 0\r\n * controls.reset(5); // value === 5\r\n * controls.back(2); // value === 3\r\n *\r\n * setValue(1);\r\n * setValue(2);\r\n * setValue(6, { overwriteLastEntry: true });\r\n * setValue(7, { overwriteLastEntry: true });\r\n *\r\n * controls.back(2); // value === 1\r\n *\r\n */\nfunction useTimeTravelState(initialValue) {\n  const [history, setHistory] = useState({\n    present: initialValue,\n    past: [],\n    future: []\n  });\n  const {\n    present,\n    past,\n    future\n  } = history;\n  const initialValueRef = useRef(initialValue);\n  /**\r\n   * @description Updates the state with a new value.\r\n   */\n  const reset = useCallback(resetInitialValue => {\n    const newInitialValue = resetInitialValue !== null && resetInitialValue !== void 0 ? resetInitialValue : initialValueRef.current;\n    initialValueRef.current = newInitialValue;\n    setHistory({\n      present: newInitialValue,\n      future: [],\n      past: []\n    });\n  }, [initialValueRef, setHistory]);\n  const updateValue = useCallback((val, options) => {\n    setHistory(currentHistory => {\n      const {\n        past,\n        present\n      } = currentHistory;\n      const {\n        overwriteLastEntry = false\n      } = options || {};\n      let newValue = undefined;\n      if (isFunction(val)) {\n        newValue = val(present);\n      } else {\n        newValue = val;\n      }\n      if (overwriteLastEntry) {\n        return {\n          present: newValue,\n          past,\n          future: []\n        };\n      } else {\n        return {\n          present: newValue,\n          future: [],\n          past: [...past, present]\n        };\n      }\n    });\n  }, []);\n  const goForwardInternal = useCallback(function () {\n    let step = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    setHistory(currentHistory => {\n      const {\n        future,\n        past,\n        present\n      } = currentHistory;\n      if (future.length === 0) {\n        return currentHistory;\n      }\n      const {\n        _before,\n        _current,\n        _after\n      } = split(step, future);\n      return {\n        past: [...past, present, ..._before],\n        present: _current,\n        future: _after\n      };\n    });\n  }, []);\n  const goBackwardInternal = useCallback(function () {\n    let step = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;\n    setHistory(currentHistory => {\n      const {\n        future,\n        past,\n        present\n      } = currentHistory;\n      if (past.length === 0) {\n        return currentHistory;\n      }\n      const {\n        _before,\n        _current,\n        _after\n      } = split(step, past);\n      return {\n        past: _before,\n        present: _current,\n        future: [..._after, present, ...future]\n      };\n    });\n  }, []);\n  const go = useCallback(step => {\n    const stepNum = isNumber(step) ? step : Number(step);\n    if (stepNum === 0) {\n      return;\n    }\n    if (stepNum > 0) {\n      return goForwardInternal(stepNum);\n    }\n    goBackwardInternal(stepNum);\n  }, [goBackwardInternal, goForwardInternal]);\n  const back = useCallback(() => {\n    go(-1);\n  }, [go]);\n  const forward = useCallback(() => {\n    go(1);\n  }, [go]);\n  const canUndo = useMemo(() => {\n    return past.length > 0;\n  }, [past.length]);\n  const canRedo = useMemo(() => {\n    return future.length > 0;\n  }, [future.length]);\n  const controls = useMemo(() => {\n    return {\n      backLength: past.length,\n      forwardLength: future.length,\n      go,\n      back,\n      forward,\n      reset,\n      undo: back,\n      redo: forward,\n      canUndo,\n      canRedo\n    };\n  }, [back, canRedo, canUndo, forward, future.length, go, past.length, reset]);\n  const returnValue = useMemo(() => {\n    return [present, updateValue, controls];\n  }, [controls, present, updateValue]);\n  return returnValue;\n}\nexport { useTimeTravelState };","map":{"version":3,"names":["isFunction","isNumber","useState","useRef","useCallback","useMemo","getSplitIndex","step","arr","index","length","split","targetArr","_current","_before","slice","_after","useTimeTravelState","initialValue","history","setHistory","present","past","future","initialValueRef","reset","resetInitialValue","newInitialValue","current","updateValue","val","options","currentHistory","overwriteLastEntry","newValue","undefined","goForwardInternal","arguments","goBackwardInternal","go","stepNum","Number","back","forward","canUndo","canRedo","controls","backLength","forwardLength","undo","redo","returnValue"],"sources":["/Users/lijinxing/Documents/hipo-dapp-bamboo/node_modules/rooks/dist/esm/hooks/useTimeTravelState.js"],"sourcesContent":["import { isFunction, isNumber } from '../utils/utils.js';\nimport { useState, useRef, useCallback, useMemo } from 'react';\n\nconst getSplitIndex = (step, arr) => {\r\n    let index = step > 0\r\n        ? step - 1 // move forward\r\n        : arr.length + step; // move backward\r\n    if (index >= arr.length - 1) {\r\n        index = arr.length - 1;\r\n    }\r\n    if (index < 0) {\r\n        index = 0;\r\n    }\r\n    return index;\r\n};\r\n/**\r\n * Splits the target array at a history point into before, current and after sections.\r\n * Useful to navigate history.\r\n */\r\nconst split = (step, targetArr) => {\r\n    const index = getSplitIndex(step, targetArr);\r\n    return {\r\n        _current: targetArr[index],\r\n        _before: targetArr.slice(0, index),\r\n        _after: targetArr.slice(index + 1),\r\n    };\r\n};\r\n/**\r\n * useTimeTravelState\r\n * @description A hook that manages state which can undo and redo. A more powerful version of useUndoState hook.\r\n * @see {@link https://rooks.vercel.app/docs/useTimeTravelState}\r\n * @param initialValue The initial value of the state.\r\n * @returns {UseTimeTravelStateReturnValue}\r\n * @example\r\n * const [value, setValue, controls] = useTimeTravelState(0);\r\n * setValue(1);\r\n * setValue(2);\r\n * setValue(3);\r\n * controls.back(); // value === 2\r\n * controls.back(); // value === 1\r\n * controls.forward(); // value === 2\r\n * controls.forward(); // value === 3\r\n * controls.reset(); // value === 0\r\n * controls.reset(5); // value === 5\r\n * controls.back(2); // value === 3\r\n *\r\n * setValue(1);\r\n * setValue(2);\r\n * setValue(6, { overwriteLastEntry: true });\r\n * setValue(7, { overwriteLastEntry: true });\r\n *\r\n * controls.back(2); // value === 1\r\n *\r\n */\r\nfunction useTimeTravelState(initialValue) {\r\n    const [history, setHistory] = useState({\r\n        present: initialValue,\r\n        past: [],\r\n        future: [],\r\n    });\r\n    const { present, past, future } = history;\r\n    const initialValueRef = useRef(initialValue);\r\n    /**\r\n     * @description Updates the state with a new value.\r\n     */\r\n    const reset = useCallback((resetInitialValue) => {\r\n        const newInitialValue = resetInitialValue !== null && resetInitialValue !== void 0 ? resetInitialValue : initialValueRef.current;\r\n        initialValueRef.current = newInitialValue;\r\n        setHistory({\r\n            present: newInitialValue,\r\n            future: [],\r\n            past: [],\r\n        });\r\n    }, [initialValueRef, setHistory]);\r\n    const updateValue = useCallback((val, options) => {\r\n        setHistory((currentHistory) => {\r\n            const { past, present } = currentHistory;\r\n            const { overwriteLastEntry = false } = options || {};\r\n            let newValue = undefined;\r\n            if (isFunction(val)) {\r\n                newValue = val(present);\r\n            }\r\n            else {\r\n                newValue = val;\r\n            }\r\n            if (overwriteLastEntry) {\r\n                return {\r\n                    present: newValue,\r\n                    past,\r\n                    future: [],\r\n                };\r\n            }\r\n            else {\r\n                return {\r\n                    present: newValue,\r\n                    future: [],\r\n                    past: [...past, present],\r\n                };\r\n            }\r\n        });\r\n    }, []);\r\n    const goForwardInternal = useCallback((step = 1) => {\r\n        setHistory((currentHistory) => {\r\n            const { future, past, present } = currentHistory;\r\n            if (future.length === 0) {\r\n                return currentHistory;\r\n            }\r\n            const { _before, _current, _after } = split(step, future);\r\n            return {\r\n                past: [...past, present, ..._before],\r\n                present: _current,\r\n                future: _after,\r\n            };\r\n        });\r\n    }, []);\r\n    const goBackwardInternal = useCallback((step = -1) => {\r\n        setHistory((currentHistory) => {\r\n            const { future, past, present } = currentHistory;\r\n            if (past.length === 0) {\r\n                return currentHistory;\r\n            }\r\n            const { _before, _current, _after } = split(step, past);\r\n            return {\r\n                past: _before,\r\n                present: _current,\r\n                future: [..._after, present, ...future],\r\n            };\r\n        });\r\n    }, []);\r\n    const go = useCallback((step) => {\r\n        const stepNum = isNumber(step) ? step : Number(step);\r\n        if (stepNum === 0) {\r\n            return;\r\n        }\r\n        if (stepNum > 0) {\r\n            return goForwardInternal(stepNum);\r\n        }\r\n        goBackwardInternal(stepNum);\r\n    }, [goBackwardInternal, goForwardInternal]);\r\n    const back = useCallback(() => {\r\n        go(-1);\r\n    }, [go]);\r\n    const forward = useCallback(() => {\r\n        go(1);\r\n    }, [go]);\r\n    const canUndo = useMemo(() => {\r\n        return past.length > 0;\r\n    }, [past.length]);\r\n    const canRedo = useMemo(() => {\r\n        return future.length > 0;\r\n    }, [future.length]);\r\n    const controls = useMemo(() => {\r\n        return {\r\n            backLength: past.length,\r\n            forwardLength: future.length,\r\n            go,\r\n            back,\r\n            forward,\r\n            reset,\r\n            undo: back,\r\n            redo: forward,\r\n            canUndo,\r\n            canRedo,\r\n        };\r\n    }, [back, canRedo, canUndo, forward, future.length, go, past.length, reset]);\r\n    const returnValue = useMemo(() => {\r\n        return [present, updateValue, controls];\r\n    }, [controls, present, updateValue]);\r\n    return returnValue;\r\n}\n\nexport { useTimeTravelState };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}