{"ast":null,"code":"import { noop } from '../utils/noop.js';\nimport { useState, useCallback, useEffect } from 'react';\nimport { useFreshCallback } from './useFreshCallback.js';\n\n/**\r\n * useOnClickRef hook\r\n *\r\n * This hook runs a callback for both clicks and tap events when the element is clicked or tapped.\r\n *\r\n * @param {Function} onClick The callback function to run on click or tap\r\n * @returns {Function} A callback ref which can be attached to an element\r\n */\nfunction useOnClickRef(onClick) {\n  const [node, setNode] = useState(null);\n  const handleEvent = useCallback(event => {\n    event.preventDefault();\n    onClick();\n  }, [onClick]);\n  const freshCallback = useFreshCallback(handleEvent);\n  useEffect(() => {\n    if (node) {\n      node.addEventListener(\"click\", freshCallback);\n      node.addEventListener(\"touchend\", freshCallback);\n      return () => {\n        node.removeEventListener(\"click\", freshCallback);\n        node.removeEventListener(\"touchend\", freshCallback);\n      };\n    }\n    return noop;\n  }, [node, freshCallback]);\n  const ref = useCallback(element => {\n    if (element) {\n      setNode(element);\n    }\n  }, []);\n  return ref;\n}\nexport { useOnClickRef };","map":{"version":3,"names":["noop","useState","useCallback","useEffect","useFreshCallback","useOnClickRef","onClick","node","setNode","handleEvent","event","preventDefault","freshCallback","addEventListener","removeEventListener","ref","element"],"sources":["/Users/lijinxing/Documents/hipo-dapp-bamboo/node_modules/rooks/dist/esm/hooks/useOnClickRef.js"],"sourcesContent":["import { noop } from '../utils/noop.js';\nimport { useState, useCallback, useEffect } from 'react';\nimport { useFreshCallback } from './useFreshCallback.js';\n\n/**\r\n * useOnClickRef hook\r\n *\r\n * This hook runs a callback for both clicks and tap events when the element is clicked or tapped.\r\n *\r\n * @param {Function} onClick The callback function to run on click or tap\r\n * @returns {Function} A callback ref which can be attached to an element\r\n */\r\nfunction useOnClickRef(onClick) {\r\n    const [node, setNode] = useState(null);\r\n    const handleEvent = useCallback((event) => {\r\n        event.preventDefault();\r\n        onClick();\r\n    }, [onClick]);\r\n    const freshCallback = useFreshCallback(handleEvent);\r\n    useEffect(() => {\r\n        if (node) {\r\n            node.addEventListener(\"click\", freshCallback);\r\n            node.addEventListener(\"touchend\", freshCallback);\r\n            return () => {\r\n                node.removeEventListener(\"click\", freshCallback);\r\n                node.removeEventListener(\"touchend\", freshCallback);\r\n            };\r\n        }\r\n        return noop;\r\n    }, [node, freshCallback]);\r\n    const ref = useCallback((element) => {\r\n        if (element) {\r\n            setNode(element);\r\n        }\r\n    }, []);\r\n    return ref;\r\n}\n\nexport { useOnClickRef };\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,kBAAkB;AACvC,SAASC,QAAQ,EAAEC,WAAW,EAAEC,SAAS,QAAQ,OAAO;AACxD,SAASC,gBAAgB,QAAQ,uBAAuB;;AAExD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,aAAaA,CAACC,OAAO,EAAE;EAC5B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAMQ,WAAW,GAAGP,WAAW,CAAEQ,KAAK,IAAK;IACvCA,KAAK,CAACC,cAAc,EAAE;IACtBL,OAAO,EAAE;EACb,CAAC,EAAE,CAACA,OAAO,CAAC,CAAC;EACb,MAAMM,aAAa,GAAGR,gBAAgB,CAACK,WAAW,CAAC;EACnDN,SAAS,CAAC,MAAM;IACZ,IAAII,IAAI,EAAE;MACNA,IAAI,CAACM,gBAAgB,CAAC,OAAO,EAAED,aAAa,CAAC;MAC7CL,IAAI,CAACM,gBAAgB,CAAC,UAAU,EAAED,aAAa,CAAC;MAChD,OAAO,MAAM;QACTL,IAAI,CAACO,mBAAmB,CAAC,OAAO,EAAEF,aAAa,CAAC;QAChDL,IAAI,CAACO,mBAAmB,CAAC,UAAU,EAAEF,aAAa,CAAC;MACvD,CAAC;IACL;IACA,OAAOZ,IAAI;EACf,CAAC,EAAE,CAACO,IAAI,EAAEK,aAAa,CAAC,CAAC;EACzB,MAAMG,GAAG,GAAGb,WAAW,CAAEc,OAAO,IAAK;IACjC,IAAIA,OAAO,EAAE;MACTR,OAAO,CAACQ,OAAO,CAAC;IACpB;EACJ,CAAC,EAAE,EAAE,CAAC;EACN,OAAOD,GAAG;AACd;AAEA,SAASV,aAAa"},"metadata":{},"sourceType":"module"}