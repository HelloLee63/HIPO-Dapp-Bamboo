{"ast":null,"code":"import { useRef, useCallback, useEffect } from 'react';\nimport { noop } from '../utils/noop.js';\n\n/**\r\n * useOutsideClick hook\r\n * Checks if a click happened outside a Ref. Handy for dropdowns, modals and popups etc.\r\n *\r\n * @param ref Ref whose outside click needs to be listened to\r\n * @param handler Callback to fire on outside click\r\n * @param when A boolean which which activates the hook only when it is true. Useful for conditionally enable the outside click\r\n * @see https://rooks.vercel.app/docs/useOutsideClick\r\n * @example\r\n * ```tsx\r\n * import { useOutsideClick } from \"@/hooks/useOutsideClick\";\r\n * import { useRef } from \"react\";\r\n * import { noop } from \"@/utils/noop\";\r\n *\r\n * const MyComponent = () => {\r\n *  const ref = useRef<HTMLDivElement>(null);\r\n *  const [isOpen, setIsOpen] = useState(false);\r\n *    const handleOutsideClick = () => setIsOpen(false);\r\n *  useOutsideClick(ref, handleOutsideClick);\r\n *  return (\r\n *   <div ref={ref}>\r\n *    <button onClick={() => setIsOpen(true)}>Open</button>\r\n *   {isOpen && (\r\n *   <div>Inside</div>\r\n *   )}\r\n * </div>\r\n * );\r\n * }\r\n * ```\r\n */\nfunction useOutsideClick(ref, handler) {\n  let when = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  const savedHandler = useRef(handler);\n  const memoizedCallback = useCallback(event => {\n    if (ref.current && !ref.current.contains(event.target)) {\n      savedHandler.current(event);\n    }\n  }, [ref]);\n  useEffect(() => {\n    savedHandler.current = handler;\n  });\n  useEffect(() => {\n    if (when) {\n      document.addEventListener(\"click\", memoizedCallback, true);\n      document.addEventListener(\"ontouchstart\", memoizedCallback, true);\n      return () => {\n        document.removeEventListener(\"click\", memoizedCallback, true);\n        document.removeEventListener(\"ontouchstart\", memoizedCallback, true);\n      };\n    }\n    return noop;\n  }, [ref, handler, when, memoizedCallback]);\n}\nexport { useOutsideClick };","map":{"version":3,"names":["useRef","useCallback","useEffect","noop","useOutsideClick","ref","handler","when","arguments","length","undefined","savedHandler","memoizedCallback","event","current","contains","target","document","addEventListener","removeEventListener"],"sources":["/Users/lijinxing/Documents/hipo-dapp-bamboo/node_modules/rooks/dist/esm/hooks/useOutsideClick.js"],"sourcesContent":["import { useRef, useCallback, useEffect } from 'react';\nimport { noop } from '../utils/noop.js';\n\n/**\r\n * useOutsideClick hook\r\n * Checks if a click happened outside a Ref. Handy for dropdowns, modals and popups etc.\r\n *\r\n * @param ref Ref whose outside click needs to be listened to\r\n * @param handler Callback to fire on outside click\r\n * @param when A boolean which which activates the hook only when it is true. Useful for conditionally enable the outside click\r\n * @see https://rooks.vercel.app/docs/useOutsideClick\r\n * @example\r\n * ```tsx\r\n * import { useOutsideClick } from \"@/hooks/useOutsideClick\";\r\n * import { useRef } from \"react\";\r\n * import { noop } from \"@/utils/noop\";\r\n *\r\n * const MyComponent = () => {\r\n *  const ref = useRef<HTMLDivElement>(null);\r\n *  const [isOpen, setIsOpen] = useState(false);\r\n *    const handleOutsideClick = () => setIsOpen(false);\r\n *  useOutsideClick(ref, handleOutsideClick);\r\n *  return (\r\n *   <div ref={ref}>\r\n *    <button onClick={() => setIsOpen(true)}>Open</button>\r\n *   {isOpen && (\r\n *   <div>Inside</div>\r\n *   )}\r\n * </div>\r\n * );\r\n * }\r\n * ```\r\n */\r\nfunction useOutsideClick(ref, handler, when = true) {\r\n    const savedHandler = useRef(handler);\r\n    const memoizedCallback = useCallback((event) => {\r\n        if (ref.current && !ref.current.contains(event.target)) {\r\n            savedHandler.current(event);\r\n        }\r\n    }, [ref]);\r\n    useEffect(() => {\r\n        savedHandler.current = handler;\r\n    });\r\n    useEffect(() => {\r\n        if (when) {\r\n            document.addEventListener(\"click\", memoizedCallback, true);\r\n            document.addEventListener(\"ontouchstart\", memoizedCallback, true);\r\n            return () => {\r\n                document.removeEventListener(\"click\", memoizedCallback, true);\r\n                document.removeEventListener(\"ontouchstart\", memoizedCallback, true);\r\n            };\r\n        }\r\n        return noop;\r\n    }, [ref, handler, when, memoizedCallback]);\r\n}\n\nexport { useOutsideClick };\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,WAAW,EAAEC,SAAS,QAAQ,OAAO;AACtD,SAASC,IAAI,QAAQ,kBAAkB;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,eAAeA,CAACC,GAAG,EAAEC,OAAO,EAAe;EAAA,IAAbC,IAAI,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;EAC9C,MAAMG,YAAY,GAAGX,MAAM,CAACM,OAAO,CAAC;EACpC,MAAMM,gBAAgB,GAAGX,WAAW,CAAEY,KAAK,IAAK;IAC5C,IAAIR,GAAG,CAACS,OAAO,IAAI,CAACT,GAAG,CAACS,OAAO,CAACC,QAAQ,CAACF,KAAK,CAACG,MAAM,CAAC,EAAE;MACpDL,YAAY,CAACG,OAAO,CAACD,KAAK,CAAC;IAC/B;EACJ,CAAC,EAAE,CAACR,GAAG,CAAC,CAAC;EACTH,SAAS,CAAC,MAAM;IACZS,YAAY,CAACG,OAAO,GAAGR,OAAO;EAClC,CAAC,CAAC;EACFJ,SAAS,CAAC,MAAM;IACZ,IAAIK,IAAI,EAAE;MACNU,QAAQ,CAACC,gBAAgB,CAAC,OAAO,EAAEN,gBAAgB,EAAE,IAAI,CAAC;MAC1DK,QAAQ,CAACC,gBAAgB,CAAC,cAAc,EAAEN,gBAAgB,EAAE,IAAI,CAAC;MACjE,OAAO,MAAM;QACTK,QAAQ,CAACE,mBAAmB,CAAC,OAAO,EAAEP,gBAAgB,EAAE,IAAI,CAAC;QAC7DK,QAAQ,CAACE,mBAAmB,CAAC,cAAc,EAAEP,gBAAgB,EAAE,IAAI,CAAC;MACxE,CAAC;IACL;IACA,OAAOT,IAAI;EACf,CAAC,EAAE,CAACE,GAAG,EAAEC,OAAO,EAAEC,IAAI,EAAEK,gBAAgB,CAAC,CAAC;AAC9C;AAEA,SAASR,eAAe"},"metadata":{},"sourceType":"module"}