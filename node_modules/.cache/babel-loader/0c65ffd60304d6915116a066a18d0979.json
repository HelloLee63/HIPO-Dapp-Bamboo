{"ast":null,"code":"import { useState, useCallback } from 'react';\n\n/* eslint-disable no-negated-condition */\nfunction warnIfBothValueAndIndexAreProvided(functionName, object) {\n  if (Object.values(object).every(value => typeof value !== \"undefined\")) {\n    console.warn(`${functionName}. Expected either ${Object.keys(object).join(\" or \")} to be provided. However all were provided`);\n  } else if (Object.values(object).every(value => typeof value === \"undefined\")) {\n    console.warn(`${functionName}. ${Object.keys(object).join(\" , \")} are all undefined.`);\n  }\n}\n/**\r\n * useSelectableList\r\n * Easily select a single value from a list of values. very useful for radio buttons, select inputs  etc.\r\n *\r\n * @param list - The list of values to select from\r\n * @param initialIndex  - The index of the initial selection\r\n * @param allowUnselected\r\n * @see https://rooks.vercel.app/docs/useSelectableList\r\n */\nfunction useSelectableList() {\n  let list = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let initialIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let allowUnselected = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  const [currentIndex, setCurrentIndex] = useState(initialIndex);\n  const currentValue = list[currentIndex];\n  const selection = [currentIndex, currentValue];\n  const updateSelection = useCallback(_ref => {\n    let {\n      index,\n      value\n    } = _ref;\n    return () => {\n      warnIfBothValueAndIndexAreProvided(\"updateSelection\", {\n        index,\n        value\n      });\n      if (typeof index !== \"undefined\") {\n        setCurrentIndex(index);\n      } else if (typeof value !== \"undefined\") {\n        const valueIndex = list.indexOf(value);\n        if (valueIndex > -1) {\n          setCurrentIndex(valueIndex);\n        } else {\n          console.warn(`updateSelection failed. Does the value ${value} exist in the list?`);\n        }\n      }\n    };\n  }, [list]);\n  const toggleSelection = useCallback(_ref2 => {\n    let {\n      index,\n      value\n    } = _ref2;\n    return () => {\n      warnIfBothValueAndIndexAreProvided(\"toggleSelection\", {\n        index,\n        value\n      });\n      if (typeof index !== \"undefined\") {\n        if (currentIndex === index) {\n          if (allowUnselected) {\n            setCurrentIndex(-1);\n          } else {\n            console.warn(\"allowUnselected is false. Cannot unselect item\");\n          }\n        } else {\n          setCurrentIndex(index);\n        }\n      } else if (typeof value !== \"undefined\") {\n        const valueIndex = list.indexOf(value);\n        if (valueIndex > -1) {\n          if (currentIndex === valueIndex) {\n            if (allowUnselected) {\n              setCurrentIndex(-1);\n            } else {\n              console.warn(\"allowUnselected is false. Cannot unselect item\");\n            }\n          } else {\n            setCurrentIndex(valueIndex);\n          }\n        } else {\n          console.log(\"as\");\n          console.warn(`toggleSelection failed. Does the value ${value} exist in the list?`);\n        }\n      }\n    };\n  }, [allowUnselected, currentIndex, list]);\n  const matchSelection = useCallback(_ref3 => {\n    let {\n      index,\n      value\n    } = _ref3;\n    warnIfBothValueAndIndexAreProvided(\"matchSelection\", {\n      index,\n      value\n    });\n    if (typeof index !== \"undefined\") {\n      return index === currentIndex;\n    } else {\n      return value === currentValue;\n    }\n  }, [currentIndex, currentValue]);\n  const controls = {\n    matchSelection,\n    toggleSelection,\n    updateSelection\n  };\n  return [selection, controls];\n}\nexport { useSelectableList };","map":{"version":3,"names":["useState","useCallback","warnIfBothValueAndIndexAreProvided","functionName","object","Object","values","every","value","console","warn","keys","join","useSelectableList","list","arguments","length","undefined","initialIndex","allowUnselected","currentIndex","setCurrentIndex","currentValue","selection","updateSelection","_ref","index","valueIndex","indexOf","toggleSelection","_ref2","log","matchSelection","_ref3","controls"],"sources":["/Users/lijinxing/Documents/hipo-dapp-bamboo/node_modules/rooks/dist/esm/hooks/useSelectableList.js"],"sourcesContent":["import { useState, useCallback } from 'react';\n\n/* eslint-disable no-negated-condition */\r\nfunction warnIfBothValueAndIndexAreProvided(functionName, object) {\r\n    if (Object.values(object).every((value) => typeof value !== \"undefined\")) {\r\n        console.warn(`${functionName}. Expected either ${Object.keys(object).join(\" or \")} to be provided. However all were provided`);\r\n    }\r\n    else if (Object.values(object).every((value) => typeof value === \"undefined\")) {\r\n        console.warn(`${functionName}. ${Object.keys(object).join(\" , \")} are all undefined.`);\r\n    }\r\n}\r\n/**\r\n * useSelectableList\r\n * Easily select a single value from a list of values. very useful for radio buttons, select inputs  etc.\r\n *\r\n * @param list - The list of values to select from\r\n * @param initialIndex  - The index of the initial selection\r\n * @param allowUnselected\r\n * @see https://rooks.vercel.app/docs/useSelectableList\r\n */\r\nfunction useSelectableList(list = [], initialIndex = 0, allowUnselected = false) {\r\n    const [currentIndex, setCurrentIndex] = useState(initialIndex);\r\n    const currentValue = list[currentIndex];\r\n    const selection = [currentIndex, currentValue];\r\n    const updateSelection = useCallback(({ index, value }) => {\r\n        return () => {\r\n            warnIfBothValueAndIndexAreProvided(\"updateSelection\", { index, value });\r\n            if (typeof index !== \"undefined\") {\r\n                setCurrentIndex(index);\r\n            }\r\n            else if (typeof value !== \"undefined\") {\r\n                const valueIndex = list.indexOf(value);\r\n                if (valueIndex > -1) {\r\n                    setCurrentIndex(valueIndex);\r\n                }\r\n                else {\r\n                    console.warn(`updateSelection failed. Does the value ${value} exist in the list?`);\r\n                }\r\n            }\r\n        };\r\n    }, [list]);\r\n    const toggleSelection = useCallback(({ index, value }) => {\r\n        return () => {\r\n            warnIfBothValueAndIndexAreProvided(\"toggleSelection\", { index, value });\r\n            if (typeof index !== \"undefined\") {\r\n                if (currentIndex === index) {\r\n                    if (allowUnselected) {\r\n                        setCurrentIndex(-1);\r\n                    }\r\n                    else {\r\n                        console.warn(\"allowUnselected is false. Cannot unselect item\");\r\n                    }\r\n                }\r\n                else {\r\n                    setCurrentIndex(index);\r\n                }\r\n            }\r\n            else if (typeof value !== \"undefined\") {\r\n                const valueIndex = list.indexOf(value);\r\n                if (valueIndex > -1) {\r\n                    if (currentIndex === valueIndex) {\r\n                        if (allowUnselected) {\r\n                            setCurrentIndex(-1);\r\n                        }\r\n                        else {\r\n                            console.warn(\"allowUnselected is false. Cannot unselect item\");\r\n                        }\r\n                    }\r\n                    else {\r\n                        setCurrentIndex(valueIndex);\r\n                    }\r\n                }\r\n                else {\r\n                    console.log(\"as\");\r\n                    console.warn(`toggleSelection failed. Does the value ${value} exist in the list?`);\r\n                }\r\n            }\r\n        };\r\n    }, [allowUnselected, currentIndex, list]);\r\n    const matchSelection = useCallback(({ index, value }) => {\r\n        warnIfBothValueAndIndexAreProvided(\"matchSelection\", { index, value });\r\n        if (typeof index !== \"undefined\") {\r\n            return index === currentIndex;\r\n        }\r\n        else {\r\n            return value === currentValue;\r\n        }\r\n    }, [currentIndex, currentValue]);\r\n    const controls = {\r\n        matchSelection,\r\n        toggleSelection,\r\n        updateSelection,\r\n    };\r\n    return [selection, controls];\r\n}\n\nexport { useSelectableList };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}