{"ast":null,"code":"import { useState, useCallback, useMemo } from 'react';\n\n/**\r\n * useArrayState\r\n * @description Array state manager hook for React\r\n * @param {Array<T>} initialState Initial state of the array\r\n * @returns {UseArrayStateReturnValue<T>} Array state manager hook for React\r\n * @see {@link https://rooks.vercel.app/docs/useArrayState}\r\n *\r\n * @example\r\n *\r\n * const [array, controls] = useArrayState([1, 2, 3]);\r\n *\r\n * controls.push(4); // [1, 2, 3, 4]\r\n * controls.pop(); // [1, 2, 3]\r\n * controls.unshift(0); // [0, 1, 2, 3]\r\n * controls.shift(); // [1, 2, 3]\r\n * controls.reverse(); // [3, 2, 1]\r\n * controls.concat([4, 5, 6]); // [3, 2, 1, 4, 5, 6]\r\n * controls.fill(0); // [0, 0, 0, 0, 0, 0]\r\n * controls.updateItemAtIndex(0, 1); // [1, 0, 0, 0, 0, 0]\r\n * controls.clear(); // []\r\n * controls.setArray([1, 2, 3]); // [1, 2, 3]\r\n * controls.splice(1, 1); // [1, 3]\r\n * controls.removeItemAtIndex(1); // [1]\r\n * controls.replaceItemAtIndex(0, 2); // [2]\r\n * controls.insertItemAtIndex(0, 1); // [1, 2]\r\n * controls.sort((a, b) => a - b); // [1, 2]\r\n *\r\n */\nfunction useArrayState(initial) {\n  const [array, setArray] = useState(initial !== null && initial !== void 0 ? initial : []);\n  const push = useCallback(value => {\n    setArray([...array, value]);\n  }, [array]);\n  const pop = useCallback(() => {\n    setArray(array.slice(0, array.length - 1));\n  }, [array]);\n  const clear = useCallback(() => {\n    setArray([]);\n  }, []);\n  const unshift = useCallback(value => {\n    setArray([value, ...array]);\n  }, [array]);\n  const shift = useCallback(() => {\n    setArray(array.slice(1));\n  }, [array]);\n  const reverse = useCallback(() => {\n    setArray([...array].reverse());\n  }, [array]);\n  const concat = useCallback(value => {\n    setArray([...array, ...value]);\n  }, [array]);\n  const fill = useCallback((value, start, end) => {\n    setArray([...array].fill(value, start, end));\n  }, [array]);\n  const updateItemAtIndex = useCallback((index, value) => {\n    setArray(prevArray => {\n      const newArray = [...prevArray];\n      newArray[index] = value;\n      return newArray;\n    });\n  }, [setArray]);\n  const splice = useCallback(function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    setArray(prevArray => {\n      const newArray = [...prevArray];\n      newArray.splice(...args);\n      return newArray;\n    });\n  }, [setArray]);\n  const removeItemAtIndex = useCallback(index => {\n    setArray(prevArray => {\n      const newArray = [...prevArray];\n      newArray.splice(index, 1);\n      return newArray;\n    });\n  }, [setArray]);\n  const replaceItemAtIndex = useCallback((index, value) => {\n    setArray(prevArray => {\n      const newArray = [...prevArray];\n      newArray.splice(index, 1, value);\n      return newArray;\n    });\n  }, [setArray]);\n  const insertItemAtIndex = useCallback((index, value) => {\n    setArray(prevArray => {\n      const newArray = [...prevArray];\n      newArray.splice(index, 0, value);\n      return newArray;\n    });\n  }, [setArray]);\n  const sort = useCallback(compareFn => {\n    setArray([...array].sort(compareFn));\n  }, [array]);\n  const controls = useMemo(() => {\n    return {\n      push,\n      pop,\n      clear,\n      unshift,\n      shift,\n      reverse,\n      concat,\n      fill,\n      updateItemAtIndex,\n      setArray,\n      splice,\n      removeItemAtIndex,\n      replaceItemAtIndex,\n      insertItemAtIndex,\n      sort\n    };\n  }, [push, pop, clear, unshift, shift, reverse, concat, fill, updateItemAtIndex, setArray, splice, removeItemAtIndex, replaceItemAtIndex, insertItemAtIndex, sort]);\n  const returnValue = useMemo(() => {\n    return [array, controls];\n  }, [array, controls]);\n  return returnValue;\n}\nexport { useArrayState };","map":{"version":3,"names":["useState","useCallback","useMemo","useArrayState","initial","array","setArray","push","value","pop","slice","length","clear","unshift","shift","reverse","concat","fill","start","end","updateItemAtIndex","index","prevArray","newArray","splice","_len","arguments","args","Array","_key","removeItemAtIndex","replaceItemAtIndex","insertItemAtIndex","sort","compareFn","controls","returnValue"],"sources":["/Users/lijinxing/Documents/hipo-dapp-bamboo/node_modules/rooks/dist/esm/hooks/useArrayState.js"],"sourcesContent":["import { useState, useCallback, useMemo } from 'react';\n\n/**\r\n * useArrayState\r\n * @description Array state manager hook for React\r\n * @param {Array<T>} initialState Initial state of the array\r\n * @returns {UseArrayStateReturnValue<T>} Array state manager hook for React\r\n * @see {@link https://rooks.vercel.app/docs/useArrayState}\r\n *\r\n * @example\r\n *\r\n * const [array, controls] = useArrayState([1, 2, 3]);\r\n *\r\n * controls.push(4); // [1, 2, 3, 4]\r\n * controls.pop(); // [1, 2, 3]\r\n * controls.unshift(0); // [0, 1, 2, 3]\r\n * controls.shift(); // [1, 2, 3]\r\n * controls.reverse(); // [3, 2, 1]\r\n * controls.concat([4, 5, 6]); // [3, 2, 1, 4, 5, 6]\r\n * controls.fill(0); // [0, 0, 0, 0, 0, 0]\r\n * controls.updateItemAtIndex(0, 1); // [1, 0, 0, 0, 0, 0]\r\n * controls.clear(); // []\r\n * controls.setArray([1, 2, 3]); // [1, 2, 3]\r\n * controls.splice(1, 1); // [1, 3]\r\n * controls.removeItemAtIndex(1); // [1]\r\n * controls.replaceItemAtIndex(0, 2); // [2]\r\n * controls.insertItemAtIndex(0, 1); // [1, 2]\r\n * controls.sort((a, b) => a - b); // [1, 2]\r\n *\r\n */\r\nfunction useArrayState(initial) {\r\n    const [array, setArray] = useState(initial !== null && initial !== void 0 ? initial : []);\r\n    const push = useCallback((value) => {\r\n        setArray([...array, value]);\r\n    }, [array]);\r\n    const pop = useCallback(() => {\r\n        setArray(array.slice(0, array.length - 1));\r\n    }, [array]);\r\n    const clear = useCallback(() => {\r\n        setArray([]);\r\n    }, []);\r\n    const unshift = useCallback((value) => {\r\n        setArray([value, ...array]);\r\n    }, [array]);\r\n    const shift = useCallback(() => {\r\n        setArray(array.slice(1));\r\n    }, [array]);\r\n    const reverse = useCallback(() => {\r\n        setArray([...array].reverse());\r\n    }, [array]);\r\n    const concat = useCallback((value) => {\r\n        setArray([...array, ...value]);\r\n    }, [array]);\r\n    const fill = useCallback((value, start, end) => {\r\n        setArray([...array].fill(value, start, end));\r\n    }, [array]);\r\n    const updateItemAtIndex = useCallback((index, value) => {\r\n        setArray((prevArray) => {\r\n            const newArray = [...prevArray];\r\n            newArray[index] = value;\r\n            return newArray;\r\n        });\r\n    }, [setArray]);\r\n    const splice = useCallback((...args) => {\r\n        setArray((prevArray) => {\r\n            const newArray = [...prevArray];\r\n            newArray.splice(...args);\r\n            return newArray;\r\n        });\r\n    }, [setArray]);\r\n    const removeItemAtIndex = useCallback((index) => {\r\n        setArray((prevArray) => {\r\n            const newArray = [...prevArray];\r\n            newArray.splice(index, 1);\r\n            return newArray;\r\n        });\r\n    }, [setArray]);\r\n    const replaceItemAtIndex = useCallback((index, value) => {\r\n        setArray((prevArray) => {\r\n            const newArray = [...prevArray];\r\n            newArray.splice(index, 1, value);\r\n            return newArray;\r\n        });\r\n    }, [setArray]);\r\n    const insertItemAtIndex = useCallback((index, value) => {\r\n        setArray((prevArray) => {\r\n            const newArray = [...prevArray];\r\n            newArray.splice(index, 0, value);\r\n            return newArray;\r\n        });\r\n    }, [setArray]);\r\n    const sort = useCallback((compareFn) => {\r\n        setArray([...array].sort(compareFn));\r\n    }, [array]);\r\n    const controls = useMemo(() => {\r\n        return {\r\n            push,\r\n            pop,\r\n            clear,\r\n            unshift,\r\n            shift,\r\n            reverse,\r\n            concat,\r\n            fill,\r\n            updateItemAtIndex,\r\n            setArray,\r\n            splice,\r\n            removeItemAtIndex,\r\n            replaceItemAtIndex,\r\n            insertItemAtIndex,\r\n            sort,\r\n        };\r\n    }, [\r\n        push,\r\n        pop,\r\n        clear,\r\n        unshift,\r\n        shift,\r\n        reverse,\r\n        concat,\r\n        fill,\r\n        updateItemAtIndex,\r\n        setArray,\r\n        splice,\r\n        removeItemAtIndex,\r\n        replaceItemAtIndex,\r\n        insertItemAtIndex,\r\n        sort,\r\n    ]);\r\n    const returnValue = useMemo(() => {\r\n        return [array, controls];\r\n    }, [array, controls]);\r\n    return returnValue;\r\n}\n\nexport { useArrayState };\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,WAAW,EAAEC,OAAO,QAAQ,OAAO;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,aAAaA,CAACC,OAAO,EAAE;EAC5B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAACI,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAGA,OAAO,GAAG,EAAE,CAAC;EACzF,MAAMG,IAAI,GAAGN,WAAW,CAAEO,KAAK,IAAK;IAChCF,QAAQ,CAAC,CAAC,GAAGD,KAAK,EAAEG,KAAK,CAAC,CAAC;EAC/B,CAAC,EAAE,CAACH,KAAK,CAAC,CAAC;EACX,MAAMI,GAAG,GAAGR,WAAW,CAAC,MAAM;IAC1BK,QAAQ,CAACD,KAAK,CAACK,KAAK,CAAC,CAAC,EAAEL,KAAK,CAACM,MAAM,GAAG,CAAC,CAAC,CAAC;EAC9C,CAAC,EAAE,CAACN,KAAK,CAAC,CAAC;EACX,MAAMO,KAAK,GAAGX,WAAW,CAAC,MAAM;IAC5BK,QAAQ,CAAC,EAAE,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EACN,MAAMO,OAAO,GAAGZ,WAAW,CAAEO,KAAK,IAAK;IACnCF,QAAQ,CAAC,CAACE,KAAK,EAAE,GAAGH,KAAK,CAAC,CAAC;EAC/B,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EACX,MAAMS,KAAK,GAAGb,WAAW,CAAC,MAAM;IAC5BK,QAAQ,CAACD,KAAK,CAACK,KAAK,CAAC,CAAC,CAAC,CAAC;EAC5B,CAAC,EAAE,CAACL,KAAK,CAAC,CAAC;EACX,MAAMU,OAAO,GAAGd,WAAW,CAAC,MAAM;IAC9BK,QAAQ,CAAC,CAAC,GAAGD,KAAK,CAAC,CAACU,OAAO,EAAE,CAAC;EAClC,CAAC,EAAE,CAACV,KAAK,CAAC,CAAC;EACX,MAAMW,MAAM,GAAGf,WAAW,CAAEO,KAAK,IAAK;IAClCF,QAAQ,CAAC,CAAC,GAAGD,KAAK,EAAE,GAAGG,KAAK,CAAC,CAAC;EAClC,CAAC,EAAE,CAACH,KAAK,CAAC,CAAC;EACX,MAAMY,IAAI,GAAGhB,WAAW,CAAC,CAACO,KAAK,EAAEU,KAAK,EAAEC,GAAG,KAAK;IAC5Cb,QAAQ,CAAC,CAAC,GAAGD,KAAK,CAAC,CAACY,IAAI,CAACT,KAAK,EAAEU,KAAK,EAAEC,GAAG,CAAC,CAAC;EAChD,CAAC,EAAE,CAACd,KAAK,CAAC,CAAC;EACX,MAAMe,iBAAiB,GAAGnB,WAAW,CAAC,CAACoB,KAAK,EAAEb,KAAK,KAAK;IACpDF,QAAQ,CAAEgB,SAAS,IAAK;MACpB,MAAMC,QAAQ,GAAG,CAAC,GAAGD,SAAS,CAAC;MAC/BC,QAAQ,CAACF,KAAK,CAAC,GAAGb,KAAK;MACvB,OAAOe,QAAQ;IACnB,CAAC,CAAC;EACN,CAAC,EAAE,CAACjB,QAAQ,CAAC,CAAC;EACd,MAAMkB,MAAM,GAAGvB,WAAW,CAAC,YAAa;IAAA,SAAAwB,IAAA,GAAAC,SAAA,CAAAf,MAAA,EAATgB,IAAI,OAAAC,KAAA,CAAAH,IAAA,GAAAI,IAAA,MAAAA,IAAA,GAAAJ,IAAA,EAAAI,IAAA;MAAJF,IAAI,CAAAE,IAAA,IAAAH,SAAA,CAAAG,IAAA;IAAA;IAC/BvB,QAAQ,CAAEgB,SAAS,IAAK;MACpB,MAAMC,QAAQ,GAAG,CAAC,GAAGD,SAAS,CAAC;MAC/BC,QAAQ,CAACC,MAAM,CAAC,GAAGG,IAAI,CAAC;MACxB,OAAOJ,QAAQ;IACnB,CAAC,CAAC;EACN,CAAC,EAAE,CAACjB,QAAQ,CAAC,CAAC;EACd,MAAMwB,iBAAiB,GAAG7B,WAAW,CAAEoB,KAAK,IAAK;IAC7Cf,QAAQ,CAAEgB,SAAS,IAAK;MACpB,MAAMC,QAAQ,GAAG,CAAC,GAAGD,SAAS,CAAC;MAC/BC,QAAQ,CAACC,MAAM,CAACH,KAAK,EAAE,CAAC,CAAC;MACzB,OAAOE,QAAQ;IACnB,CAAC,CAAC;EACN,CAAC,EAAE,CAACjB,QAAQ,CAAC,CAAC;EACd,MAAMyB,kBAAkB,GAAG9B,WAAW,CAAC,CAACoB,KAAK,EAAEb,KAAK,KAAK;IACrDF,QAAQ,CAAEgB,SAAS,IAAK;MACpB,MAAMC,QAAQ,GAAG,CAAC,GAAGD,SAAS,CAAC;MAC/BC,QAAQ,CAACC,MAAM,CAACH,KAAK,EAAE,CAAC,EAAEb,KAAK,CAAC;MAChC,OAAOe,QAAQ;IACnB,CAAC,CAAC;EACN,CAAC,EAAE,CAACjB,QAAQ,CAAC,CAAC;EACd,MAAM0B,iBAAiB,GAAG/B,WAAW,CAAC,CAACoB,KAAK,EAAEb,KAAK,KAAK;IACpDF,QAAQ,CAAEgB,SAAS,IAAK;MACpB,MAAMC,QAAQ,GAAG,CAAC,GAAGD,SAAS,CAAC;MAC/BC,QAAQ,CAACC,MAAM,CAACH,KAAK,EAAE,CAAC,EAAEb,KAAK,CAAC;MAChC,OAAOe,QAAQ;IACnB,CAAC,CAAC;EACN,CAAC,EAAE,CAACjB,QAAQ,CAAC,CAAC;EACd,MAAM2B,IAAI,GAAGhC,WAAW,CAAEiC,SAAS,IAAK;IACpC5B,QAAQ,CAAC,CAAC,GAAGD,KAAK,CAAC,CAAC4B,IAAI,CAACC,SAAS,CAAC,CAAC;EACxC,CAAC,EAAE,CAAC7B,KAAK,CAAC,CAAC;EACX,MAAM8B,QAAQ,GAAGjC,OAAO,CAAC,MAAM;IAC3B,OAAO;MACHK,IAAI;MACJE,GAAG;MACHG,KAAK;MACLC,OAAO;MACPC,KAAK;MACLC,OAAO;MACPC,MAAM;MACNC,IAAI;MACJG,iBAAiB;MACjBd,QAAQ;MACRkB,MAAM;MACNM,iBAAiB;MACjBC,kBAAkB;MAClBC,iBAAiB;MACjBC;IACJ,CAAC;EACL,CAAC,EAAE,CACC1B,IAAI,EACJE,GAAG,EACHG,KAAK,EACLC,OAAO,EACPC,KAAK,EACLC,OAAO,EACPC,MAAM,EACNC,IAAI,EACJG,iBAAiB,EACjBd,QAAQ,EACRkB,MAAM,EACNM,iBAAiB,EACjBC,kBAAkB,EAClBC,iBAAiB,EACjBC,IAAI,CACP,CAAC;EACF,MAAMG,WAAW,GAAGlC,OAAO,CAAC,MAAM;IAC9B,OAAO,CAACG,KAAK,EAAE8B,QAAQ,CAAC;EAC5B,CAAC,EAAE,CAAC9B,KAAK,EAAE8B,QAAQ,CAAC,CAAC;EACrB,OAAOC,WAAW;AACtB;AAEA,SAASjC,aAAa"},"metadata":{},"sourceType":"module"}