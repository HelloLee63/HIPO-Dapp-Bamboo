{"ast":null,"code":"import { useRef, useEffect } from 'react';\nimport isEqual from 'fast-deep-equal';\nimport { warning } from './warning.js';\n\n/**\r\n * useDeepCompareEffect\r\n * @description Deep compare dependencies instead of shallow for useEffect\r\n * @see {@link https://rooks.vercel.app/docs/useDeepCompareEffect}\r\n */\nfunction isPrimitive(value) {\n  const valueType = typeof value;\n  return valueType === \"string\" || valueType === \"number\" || valueType === \"bigint\" || valueType === \"boolean\" || valueType === \"undefined\" || valueType === \"symbol\";\n}\nfunction useDeepCompareEffect(callback, dependencies) {\n  const previousDeps = useRef(dependencies);\n  if (!Array.isArray(dependencies)) {\n    throw new Error(\"useDeepCompareEffect should be used with an array of dependencies\");\n  }\n  const hasPrimitives = dependencies.every(isPrimitive);\n  warning(!hasPrimitives, \"useDeepCompareEffect should not be used with primitive values as dependencies\");\n  if (!isEqual(previousDeps.current, dependencies)) {\n    previousDeps.current = dependencies;\n  }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(callback, previousDeps.current);\n}\nexport { useDeepCompareEffect };","map":{"version":3,"names":["useRef","useEffect","isEqual","warning","isPrimitive","value","valueType","useDeepCompareEffect","callback","dependencies","previousDeps","Array","isArray","Error","hasPrimitives","every","current"],"sources":["/Users/lijinxing/Documents/hipo-dapp-bamboo/node_modules/rooks/dist/esm/hooks/useDeepCompareEffect.js"],"sourcesContent":["import { useRef, useEffect } from 'react';\nimport isEqual from 'fast-deep-equal';\nimport { warning } from './warning.js';\n\n/**\r\n * useDeepCompareEffect\r\n * @description Deep compare dependencies instead of shallow for useEffect\r\n * @see {@link https://rooks.vercel.app/docs/useDeepCompareEffect}\r\n */\r\nfunction isPrimitive(value) {\r\n    const valueType = typeof value;\r\n    return (valueType === \"string\" ||\r\n        valueType === \"number\" ||\r\n        valueType === \"bigint\" ||\r\n        valueType === \"boolean\" ||\r\n        valueType === \"undefined\" ||\r\n        valueType === \"symbol\");\r\n}\r\nfunction useDeepCompareEffect(callback, dependencies) {\r\n    const previousDeps = useRef(dependencies);\r\n    if (!Array.isArray(dependencies)) {\r\n        throw new Error(\"useDeepCompareEffect should be used with an array of dependencies\");\r\n    }\r\n    const hasPrimitives = dependencies.every(isPrimitive);\r\n    warning(!hasPrimitives, \"useDeepCompareEffect should not be used with primitive values as dependencies\");\r\n    if (!isEqual(previousDeps.current, dependencies)) {\r\n        previousDeps.current = dependencies;\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    useEffect(callback, previousDeps.current);\r\n}\n\nexport { useDeepCompareEffect };\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,SAAS,QAAQ,OAAO;AACzC,OAAOC,OAAO,MAAM,iBAAiB;AACrC,SAASC,OAAO,QAAQ,cAAc;;AAEtC;AACA;AACA;AACA;AACA;AACA,SAASC,WAAWA,CAACC,KAAK,EAAE;EACxB,MAAMC,SAAS,GAAG,OAAOD,KAAK;EAC9B,OAAQC,SAAS,KAAK,QAAQ,IAC1BA,SAAS,KAAK,QAAQ,IACtBA,SAAS,KAAK,QAAQ,IACtBA,SAAS,KAAK,SAAS,IACvBA,SAAS,KAAK,WAAW,IACzBA,SAAS,KAAK,QAAQ;AAC9B;AACA,SAASC,oBAAoBA,CAACC,QAAQ,EAAEC,YAAY,EAAE;EAClD,MAAMC,YAAY,GAAGV,MAAM,CAACS,YAAY,CAAC;EACzC,IAAI,CAACE,KAAK,CAACC,OAAO,CAACH,YAAY,CAAC,EAAE;IAC9B,MAAM,IAAII,KAAK,CAAC,mEAAmE,CAAC;EACxF;EACA,MAAMC,aAAa,GAAGL,YAAY,CAACM,KAAK,CAACX,WAAW,CAAC;EACrDD,OAAO,CAAC,CAACW,aAAa,EAAE,+EAA+E,CAAC;EACxG,IAAI,CAACZ,OAAO,CAACQ,YAAY,CAACM,OAAO,EAAEP,YAAY,CAAC,EAAE;IAC9CC,YAAY,CAACM,OAAO,GAAGP,YAAY;EACvC;EACA;EACAR,SAAS,CAACO,QAAQ,EAAEE,YAAY,CAACM,OAAO,CAAC;AAC7C;AAEA,SAAST,oBAAoB"},"metadata":{},"sourceType":"module"}