{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport { useGetIsMounted } from './useGetIsMounted.js';\nfunction getGeoLocation(options) {\n  return new Promise((resolve, reject) => {\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          coords\n        } = position;\n        const {\n          latitude,\n          longitude\n        } = coords;\n        resolve({\n          isError: false,\n          lat: latitude,\n          lng: longitude,\n          message: \"\"\n        });\n      }, error => {\n        // eslint-disable-next-line prefer-promise-reject-errors\n        reject({\n          isError: true,\n          message: error.message\n        });\n      }, options);\n    } else {\n      // eslint-disable-next-line prefer-promise-reject-errors\n      reject({\n        isError: true,\n        message: \"Geolocation is not supported for this Browser/OS.\"\n      });\n    }\n  });\n}\nconst defaultGeoLocationOptions = {\n  enableHighAccuracy: false,\n  maximumAge: 0,\n  timeout: Number.POSITIVE_INFINITY,\n  when: true\n};\n/**\r\n * useGeolocation\r\n * Gets the geolocation data as a hook\r\n *\r\n * @param {UseGeoLocationOptions} geoLocationOptions Geolocation options\r\n * @see {@link https://rooks.vercel.app/docs/useGeolocation}\r\n */\nconst useGeolocation = function () {\n  let geoLocationOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultGeoLocationOptions;\n  const [geoObject, setGeoObject] = useState(null);\n  const {\n    when,\n    enableHighAccuracy,\n    timeout,\n    maximumAge\n  } = geoLocationOptions;\n  const getIsMounted = useGetIsMounted();\n  useEffect(() => {\n    async function getGeoCode() {\n      try {\n        const value = await getGeoLocation({\n          enableHighAccuracy,\n          maximumAge,\n          timeout,\n          when\n        });\n        if (getIsMounted()) {\n          setGeoObject(value);\n        }\n      } catch (error) {\n        if (getIsMounted()) {\n          setGeoObject(error);\n        }\n      }\n    }\n    if (when) {\n      void getGeoCode();\n    }\n  }, [when, enableHighAccuracy, timeout, maximumAge, getIsMounted]);\n  return geoObject;\n};\nexport { useGeolocation };","map":{"version":3,"names":["useState","useEffect","useGetIsMounted","getGeoLocation","options","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","isError","lat","lng","message","error","defaultGeoLocationOptions","enableHighAccuracy","maximumAge","timeout","Number","POSITIVE_INFINITY","when","useGeolocation","geoLocationOptions","arguments","length","undefined","geoObject","setGeoObject","getIsMounted","getGeoCode","value"],"sources":["/Users/lijinxing/Documents/hipo-dapp-bamboo/node_modules/rooks/dist/esm/hooks/useGeolocation.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useGetIsMounted } from './useGetIsMounted.js';\n\nfunction getGeoLocation(options) {\r\n    return new Promise((resolve, reject) => {\r\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition((position) => {\r\n                const { coords } = position;\r\n                const { latitude, longitude } = coords;\r\n                resolve({\r\n                    isError: false,\r\n                    lat: latitude,\r\n                    lng: longitude,\r\n                    message: \"\",\r\n                });\r\n            }, (error) => {\r\n                // eslint-disable-next-line prefer-promise-reject-errors\r\n                reject({ isError: true, message: error.message });\r\n            }, options);\r\n        }\r\n        else {\r\n            // eslint-disable-next-line prefer-promise-reject-errors\r\n            reject({\r\n                isError: true,\r\n                message: \"Geolocation is not supported for this Browser/OS.\",\r\n            });\r\n        }\r\n    });\r\n}\r\nconst defaultGeoLocationOptions = {\r\n    enableHighAccuracy: false,\r\n    maximumAge: 0,\r\n    timeout: Number.POSITIVE_INFINITY,\r\n    when: true,\r\n};\r\n/**\r\n * useGeolocation\r\n * Gets the geolocation data as a hook\r\n *\r\n * @param {UseGeoLocationOptions} geoLocationOptions Geolocation options\r\n * @see {@link https://rooks.vercel.app/docs/useGeolocation}\r\n */\r\nconst useGeolocation = (geoLocationOptions = defaultGeoLocationOptions) => {\r\n    const [geoObject, setGeoObject] = useState(null);\r\n    const { when, enableHighAccuracy, timeout, maximumAge } = geoLocationOptions;\r\n    const getIsMounted = useGetIsMounted();\r\n    useEffect(() => {\r\n        async function getGeoCode() {\r\n            try {\r\n                const value = await getGeoLocation({\r\n                    enableHighAccuracy,\r\n                    maximumAge,\r\n                    timeout,\r\n                    when,\r\n                });\r\n                if (getIsMounted()) {\r\n                    setGeoObject(value);\r\n                }\r\n            }\r\n            catch (error) {\r\n                if (getIsMounted()) {\r\n                    setGeoObject(error);\r\n                }\r\n            }\r\n        }\r\n        if (when) {\r\n            void getGeoCode();\r\n        }\r\n    }, [when, enableHighAccuracy, timeout, maximumAge, getIsMounted]);\r\n    return geoObject;\r\n};\n\nexport { useGeolocation };\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,eAAe,QAAQ,sBAAsB;AAEtD,SAASC,cAAcA,CAACC,OAAO,EAAE;EAC7B,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACpC;IACA,IAAIC,SAAS,CAACC,WAAW,EAAE;MACvBD,SAAS,CAACC,WAAW,CAACC,kBAAkB,CAAEC,QAAQ,IAAK;QACnD,MAAM;UAAEC;QAAO,CAAC,GAAGD,QAAQ;QAC3B,MAAM;UAAEE,QAAQ;UAAEC;QAAU,CAAC,GAAGF,MAAM;QACtCN,OAAO,CAAC;UACJS,OAAO,EAAE,KAAK;UACdC,GAAG,EAAEH,QAAQ;UACbI,GAAG,EAAEH,SAAS;UACdI,OAAO,EAAE;QACb,CAAC,CAAC;MACN,CAAC,EAAGC,KAAK,IAAK;QACV;QACAZ,MAAM,CAAC;UAAEQ,OAAO,EAAE,IAAI;UAAEG,OAAO,EAAEC,KAAK,CAACD;QAAQ,CAAC,CAAC;MACrD,CAAC,EAAEd,OAAO,CAAC;IACf,CAAC,MACI;MACD;MACAG,MAAM,CAAC;QACHQ,OAAO,EAAE,IAAI;QACbG,OAAO,EAAE;MACb,CAAC,CAAC;IACN;EACJ,CAAC,CAAC;AACN;AACA,MAAME,yBAAyB,GAAG;EAC9BC,kBAAkB,EAAE,KAAK;EACzBC,UAAU,EAAE,CAAC;EACbC,OAAO,EAAEC,MAAM,CAACC,iBAAiB;EACjCC,IAAI,EAAE;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,GAAG,SAAAA,CAAA,EAAoD;EAAA,IAAnDC,kBAAkB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGT,yBAAyB;EAClE,MAAM,CAACY,SAAS,EAAEC,YAAY,CAAC,GAAGjC,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM;IAAE0B,IAAI;IAAEL,kBAAkB;IAAEE,OAAO;IAAED;EAAW,CAAC,GAAGM,kBAAkB;EAC5E,MAAMM,YAAY,GAAGhC,eAAe,EAAE;EACtCD,SAAS,CAAC,MAAM;IACZ,eAAekC,UAAUA,CAAA,EAAG;MACxB,IAAI;QACA,MAAMC,KAAK,GAAG,MAAMjC,cAAc,CAAC;UAC/BkB,kBAAkB;UAClBC,UAAU;UACVC,OAAO;UACPG;QACJ,CAAC,CAAC;QACF,IAAIQ,YAAY,EAAE,EAAE;UAChBD,YAAY,CAACG,KAAK,CAAC;QACvB;MACJ,CAAC,CACD,OAAOjB,KAAK,EAAE;QACV,IAAIe,YAAY,EAAE,EAAE;UAChBD,YAAY,CAACd,KAAK,CAAC;QACvB;MACJ;IACJ;IACA,IAAIO,IAAI,EAAE;MACN,KAAKS,UAAU,EAAE;IACrB;EACJ,CAAC,EAAE,CAACT,IAAI,EAAEL,kBAAkB,EAAEE,OAAO,EAAED,UAAU,EAAEY,YAAY,CAAC,CAAC;EACjE,OAAOF,SAAS;AACpB,CAAC;AAED,SAASL,cAAc"},"metadata":{},"sourceType":"module"}