{"ast":null,"code":"import { useState, useCallback, useEffect } from 'react';\nconst FullscreenApi = {\n  DOM_UNAVAILABLE_ERROR: \"DOM is unavailable server-side. Please use this method client-side only.\",\n  FULLSCREEN_UNSUPPORTED_ERROR: \"Your browser does not support Fullscreen API.\",\n  getEventsNames() {\n    if (typeof document === \"undefined\") return null;\n    const _document = document;\n    if (\"exitFullscreen\" in _document) return [\"fullscreenchange\", \"fullscreenerror\"];\n    if (\"webkitExitFullscreen\" in _document) return [\"webkitfullscreenchange\", \"webkitfullscreenerror\"];\n    if (\"webkitCancelFullScreen\" in _document) return [\"webkitfullscreenchange\", \"webkitfullscreenerror\"];\n    if (\"mozCancelFullScreen\" in _document) return [\"mozfullscreenchange\", \"mozfullscreenerror\"];\n    if (\"msExitFullscreen\" in _document) return [\"MSFullscreenChange\", \"MSFullscreenError\"];\n    return null;\n  },\n  getEventName(eventType) {\n    const eventsNames = this.getEventsNames();\n    if (!eventsNames) return null;\n    if (eventType === \"change\") return eventsNames[0];\n    return eventsNames[1];\n  },\n  get fullscreenEnabled() {\n    if (typeof document === \"undefined\") return false;\n    const _document = document;\n    return _document.fullscreenEnabled || _document.webkitFullscreenEnabled || !!_document.webkitCancelFullScreen || _document.mozFullScreenEnabled || _document.msFullscreenEnabled || false;\n  },\n  get fullscreenElement() {\n    if (typeof document === \"undefined\") return null;\n    const _document = document;\n    return _document.fullscreenElement || _document.webkitFullscreenElement || _document.webkitCurrentFullScreenElement || _document.mozFullScreenElement || _document.msFullscreenElement || null;\n  },\n  requestFullscreen(element, options) {\n    if (typeof document === \"undefined\") throw new Error(this.DOM_UNAVAILABLE_ERROR);\n    const target = element !== null && element !== void 0 ? element : document.documentElement;\n    const method = target.requestFullscreen || target.webkitRequestFullscreen || target.webkitRequestFullScreen || target.mozRequestFullScreen || target.msRequestFullscreen;\n    if (!method) throw new Error(this.FULLSCREEN_UNSUPPORTED_ERROR);\n    return method.call(target, options);\n  },\n  exitFullscreen() {\n    if (typeof document === \"undefined\") throw new Error(this.DOM_UNAVAILABLE_ERROR);\n    const _document = document;\n    const method = _document.exitFullscreen || _document.webkitExitFullscreen || _document.webkitCancelFullScreen || _document.mozCancelFullScreen || _document.msExitFullscreen;\n    if (!method) throw new Error(this.FULLSCREEN_UNSUPPORTED_ERROR);\n    return method.call(_document);\n  },\n  on(eventType, callback) {\n    const eventName = this.getEventName(eventType);\n    if (!eventName) return;\n    document.addEventListener(eventName, callback);\n  },\n  off(eventType, callback) {\n    const eventName = this.getEventName(eventType);\n    if (!eventName) return;\n    document.removeEventListener(eventName, callback);\n  }\n};\n/**\r\n *\r\n * useFullscreen hook\r\n *\r\n * Gives control to make HTML Elements fullscreen.\r\n *\r\n * @param {Element | undefined} props.target The target element to be fullscreen.\r\n * @param {(event: Event) => void} props.onChange The function to be called when the fullscreen changes.\r\n * @param {(event: Event) => void} props.onError The function to be called when the fullscreen error occurs.\r\n * @param {FullscreenOptions} props.requestFullscreenOptions The options to be passed to the requestFullscreen function.\r\n * @return {Object} returns - The controlls of useFullscreen hook.\r\n * @return {boolean} returns.isFullscreenAvailable - Whether the fullscreen is available.\r\n * @return {Element | null} returns.fullscreenElement - The fullscreen element.\r\n * @return {boolean} returns.isFullscreenEnabled - Whether the fullscreen is enabled.\r\n * @return {() => Promise<void>} returns.enableFullscreen - The function to enable fullscreen.\r\n * @return {() => Promise<void>} returns.disableFullscreen - The function to disable fullscreen.\r\n * @return {() => Promise<void>} returns.toggleFullscreen - The function to toggle fullscreen.\r\n */\nfunction useFullscreen() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    target,\n    onChange,\n    onError,\n    requestFullScreenOptions\n  } = props;\n  const [isFullscreenAvailable, setIsFullscreenAvailable] = useState(false);\n  const [fullscreenElement, setFullscreenElement] = useState(null);\n  const [isFullscreenEnabled, setIsFullscreenEnabled] = useState(false);\n  const enableFullscreen = useCallback(() => {\n    return FullscreenApi.requestFullscreen((target === null || target === void 0 ? void 0 : target.current) || null, requestFullScreenOptions);\n  }, [target, requestFullScreenOptions]);\n  const disableFullscreen = useCallback(() => {\n    return FullscreenApi.exitFullscreen();\n  }, []);\n  const toggleFullscreen = useCallback(() => {\n    if (!!FullscreenApi.fullscreenElement) return disableFullscreen();\n    return enableFullscreen();\n  }, [enableFullscreen, disableFullscreen]);\n  const onChangeHandler = useCallback(event => {\n    const fullscreenElement = FullscreenApi.fullscreenElement;\n    setFullscreenElement(fullscreenElement);\n    setIsFullscreenEnabled(!!fullscreenElement);\n    onChange === null || onChange === void 0 ? void 0 : onChange(event);\n  }, [onChange]);\n  const onErrorHandler = useCallback(event => {\n    const fullscreenElement = FullscreenApi.fullscreenElement;\n    setFullscreenElement(fullscreenElement);\n    setIsFullscreenEnabled(!!fullscreenElement);\n    onError === null || onError === void 0 ? void 0 : onError(event);\n  }, [onError]);\n  // Set state after first client-side render\n  useEffect(() => {\n    setIsFullscreenAvailable(FullscreenApi.fullscreenEnabled);\n  }, []);\n  // Attach event listeners\n  useEffect(() => {\n    FullscreenApi.on(\"change\", onChangeHandler);\n    FullscreenApi.on(\"error\", onErrorHandler);\n    return () => {\n      FullscreenApi.off(\"change\", onChangeHandler);\n      FullscreenApi.off(\"error\", onErrorHandler);\n    };\n  }, [onChangeHandler, onErrorHandler]);\n  return {\n    isFullscreenAvailable,\n    fullscreenElement,\n    isFullscreenEnabled,\n    enableFullscreen,\n    disableFullscreen,\n    toggleFullscreen\n  };\n}\nexport { useFullscreen };","map":{"version":3,"names":["useState","useCallback","useEffect","FullscreenApi","DOM_UNAVAILABLE_ERROR","FULLSCREEN_UNSUPPORTED_ERROR","getEventsNames","document","_document","getEventName","eventType","eventsNames","fullscreenEnabled","webkitFullscreenEnabled","webkitCancelFullScreen","mozFullScreenEnabled","msFullscreenEnabled","fullscreenElement","webkitFullscreenElement","webkitCurrentFullScreenElement","mozFullScreenElement","msFullscreenElement","requestFullscreen","element","options","Error","target","documentElement","method","webkitRequestFullscreen","webkitRequestFullScreen","mozRequestFullScreen","msRequestFullscreen","call","exitFullscreen","webkitExitFullscreen","mozCancelFullScreen","msExitFullscreen","on","callback","eventName","addEventListener","off","removeEventListener","useFullscreen","props","arguments","length","undefined","onChange","onError","requestFullScreenOptions","isFullscreenAvailable","setIsFullscreenAvailable","setFullscreenElement","isFullscreenEnabled","setIsFullscreenEnabled","enableFullscreen","current","disableFullscreen","toggleFullscreen","onChangeHandler","event","onErrorHandler"],"sources":["/Users/lijinxing/Documents/hipo-dapp-bamboo/node_modules/rooks/dist/esm/hooks/useFullscreen.js"],"sourcesContent":["import { useState, useCallback, useEffect } from 'react';\n\nconst FullscreenApi = {\r\n    DOM_UNAVAILABLE_ERROR: \"DOM is unavailable server-side. Please use this method client-side only.\",\r\n    FULLSCREEN_UNSUPPORTED_ERROR: \"Your browser does not support Fullscreen API.\",\r\n    getEventsNames() {\r\n        if (typeof document === \"undefined\")\r\n            return null;\r\n        const _document = document;\r\n        if (\"exitFullscreen\" in _document)\r\n            return [\"fullscreenchange\", \"fullscreenerror\"];\r\n        if (\"webkitExitFullscreen\" in _document)\r\n            return [\"webkitfullscreenchange\", \"webkitfullscreenerror\"];\r\n        if (\"webkitCancelFullScreen\" in _document)\r\n            return [\"webkitfullscreenchange\", \"webkitfullscreenerror\"];\r\n        if (\"mozCancelFullScreen\" in _document)\r\n            return [\"mozfullscreenchange\", \"mozfullscreenerror\"];\r\n        if (\"msExitFullscreen\" in _document)\r\n            return [\"MSFullscreenChange\", \"MSFullscreenError\"];\r\n        return null;\r\n    },\r\n    getEventName(eventType) {\r\n        const eventsNames = this.getEventsNames();\r\n        if (!eventsNames)\r\n            return null;\r\n        if (eventType === \"change\")\r\n            return eventsNames[0];\r\n        return eventsNames[1];\r\n    },\r\n    get fullscreenEnabled() {\r\n        if (typeof document === \"undefined\")\r\n            return false;\r\n        const _document = document;\r\n        return (_document.fullscreenEnabled ||\r\n            _document.webkitFullscreenEnabled ||\r\n            !!_document.webkitCancelFullScreen ||\r\n            _document.mozFullScreenEnabled ||\r\n            _document.msFullscreenEnabled ||\r\n            false);\r\n    },\r\n    get fullscreenElement() {\r\n        if (typeof document === \"undefined\")\r\n            return null;\r\n        const _document = document;\r\n        return (_document.fullscreenElement ||\r\n            _document.webkitFullscreenElement ||\r\n            _document.webkitCurrentFullScreenElement ||\r\n            _document.mozFullScreenElement ||\r\n            _document.msFullscreenElement ||\r\n            null);\r\n    },\r\n    requestFullscreen(element, options) {\r\n        if (typeof document === \"undefined\")\r\n            throw new Error(this.DOM_UNAVAILABLE_ERROR);\r\n        const target = (element !== null && element !== void 0 ? element : document.documentElement);\r\n        const method = target.requestFullscreen ||\r\n            target.webkitRequestFullscreen ||\r\n            target.webkitRequestFullScreen ||\r\n            target.mozRequestFullScreen ||\r\n            target.msRequestFullscreen;\r\n        if (!method)\r\n            throw new Error(this.FULLSCREEN_UNSUPPORTED_ERROR);\r\n        return method.call(target, options);\r\n    },\r\n    exitFullscreen() {\r\n        if (typeof document === \"undefined\")\r\n            throw new Error(this.DOM_UNAVAILABLE_ERROR);\r\n        const _document = document;\r\n        const method = _document.exitFullscreen ||\r\n            _document.webkitExitFullscreen ||\r\n            _document.webkitCancelFullScreen ||\r\n            _document.mozCancelFullScreen ||\r\n            _document.msExitFullscreen;\r\n        if (!method)\r\n            throw new Error(this.FULLSCREEN_UNSUPPORTED_ERROR);\r\n        return method.call(_document);\r\n    },\r\n    on(eventType, callback) {\r\n        const eventName = this.getEventName(eventType);\r\n        if (!eventName)\r\n            return;\r\n        document.addEventListener(eventName, callback);\r\n    },\r\n    off(eventType, callback) {\r\n        const eventName = this.getEventName(eventType);\r\n        if (!eventName)\r\n            return;\r\n        document.removeEventListener(eventName, callback);\r\n    },\r\n};\r\n/**\r\n *\r\n * useFullscreen hook\r\n *\r\n * Gives control to make HTML Elements fullscreen.\r\n *\r\n * @param {Element | undefined} props.target The target element to be fullscreen.\r\n * @param {(event: Event) => void} props.onChange The function to be called when the fullscreen changes.\r\n * @param {(event: Event) => void} props.onError The function to be called when the fullscreen error occurs.\r\n * @param {FullscreenOptions} props.requestFullscreenOptions The options to be passed to the requestFullscreen function.\r\n * @return {Object} returns - The controlls of useFullscreen hook.\r\n * @return {boolean} returns.isFullscreenAvailable - Whether the fullscreen is available.\r\n * @return {Element | null} returns.fullscreenElement - The fullscreen element.\r\n * @return {boolean} returns.isFullscreenEnabled - Whether the fullscreen is enabled.\r\n * @return {() => Promise<void>} returns.enableFullscreen - The function to enable fullscreen.\r\n * @return {() => Promise<void>} returns.disableFullscreen - The function to disable fullscreen.\r\n * @return {() => Promise<void>} returns.toggleFullscreen - The function to toggle fullscreen.\r\n */\r\nfunction useFullscreen(props = {}) {\r\n    const { target, onChange, onError, requestFullScreenOptions } = props;\r\n    const [isFullscreenAvailable, setIsFullscreenAvailable] = useState(false);\r\n    const [fullscreenElement, setFullscreenElement] = useState(null);\r\n    const [isFullscreenEnabled, setIsFullscreenEnabled] = useState(false);\r\n    const enableFullscreen = useCallback(() => {\r\n        return FullscreenApi.requestFullscreen((target === null || target === void 0 ? void 0 : target.current) || null, requestFullScreenOptions);\r\n    }, [target, requestFullScreenOptions]);\r\n    const disableFullscreen = useCallback(() => {\r\n        return FullscreenApi.exitFullscreen();\r\n    }, []);\r\n    const toggleFullscreen = useCallback(() => {\r\n        if (!!FullscreenApi.fullscreenElement)\r\n            return disableFullscreen();\r\n        return enableFullscreen();\r\n    }, [enableFullscreen, disableFullscreen]);\r\n    const onChangeHandler = useCallback((event) => {\r\n        const fullscreenElement = FullscreenApi.fullscreenElement;\r\n        setFullscreenElement(fullscreenElement);\r\n        setIsFullscreenEnabled(!!fullscreenElement);\r\n        onChange === null || onChange === void 0 ? void 0 : onChange(event);\r\n    }, [onChange]);\r\n    const onErrorHandler = useCallback((event) => {\r\n        const fullscreenElement = FullscreenApi.fullscreenElement;\r\n        setFullscreenElement(fullscreenElement);\r\n        setIsFullscreenEnabled(!!fullscreenElement);\r\n        onError === null || onError === void 0 ? void 0 : onError(event);\r\n    }, [onError]);\r\n    // Set state after first client-side render\r\n    useEffect(() => {\r\n        setIsFullscreenAvailable(FullscreenApi.fullscreenEnabled);\r\n    }, []);\r\n    // Attach event listeners\r\n    useEffect(() => {\r\n        FullscreenApi.on(\"change\", onChangeHandler);\r\n        FullscreenApi.on(\"error\", onErrorHandler);\r\n        return () => {\r\n            FullscreenApi.off(\"change\", onChangeHandler);\r\n            FullscreenApi.off(\"error\", onErrorHandler);\r\n        };\r\n    }, [onChangeHandler, onErrorHandler]);\r\n    return {\r\n        isFullscreenAvailable,\r\n        fullscreenElement,\r\n        isFullscreenEnabled,\r\n        enableFullscreen,\r\n        disableFullscreen,\r\n        toggleFullscreen,\r\n    };\r\n}\n\nexport { useFullscreen };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}