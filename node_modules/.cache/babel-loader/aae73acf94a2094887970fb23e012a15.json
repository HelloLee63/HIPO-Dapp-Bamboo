{"ast":null,"code":"import { useState, useCallback, useLayoutEffect } from 'react';\nimport { useOnWindowResize } from './useOnWindowResize.js';\nimport { useOnWindowScroll } from './useOnWindowScroll.js';\n\n/* eslint-disable id-length */\nconst getDimensionObject = node => {\n  const rect = node.getBoundingClientRect();\n  return {\n    bottom: rect.bottom,\n    height: rect.height,\n    left: rect.left,\n    right: rect.right,\n    top: rect.top,\n    width: rect.width,\n    x: rect.left,\n    y: rect.top\n  };\n};\nconst noWindowReturnValue = [undefined, null, null];\n/**\r\n * useDimensionsRef\r\n * @param updateOnScroll Whether to update on scroll\r\n * @param updateOnResize Whether to update on resize\r\n * @returns [React.Ref<HTMLDivElement>, UseDimensionsRefReturn, HTMLElement | null]\r\n * @see https://rooks.vercel.app/docs/useDimensionsRef\r\n */\nconst useDimensionsRef = function () {\n  let {\n    updateOnScroll = true,\n    updateOnResize = true\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const [dimensions, setDimensions] = useState(null);\n  const [node, setNode] = useState(null);\n  const ref = useCallback(nodeFromCallback => {\n    setNode(nodeFromCallback);\n  }, []);\n  const measure = useCallback(() => {\n    window.requestAnimationFrame(() => {\n      if (node) {\n        setDimensions(getDimensionObject(node));\n      }\n    });\n  }, [node]);\n  useLayoutEffect(() => {\n    measure();\n  }, [measure]);\n  useOnWindowResize(() => {\n    measure();\n  }, updateOnResize, true);\n  useOnWindowScroll(() => {\n    measure();\n  }, updateOnScroll, true);\n  if (typeof window === \"undefined\") {\n    console.warn(\"useDimensionsRef: window is undefined.\");\n    return noWindowReturnValue;\n  }\n  return [ref, dimensions, node];\n};\nexport { useDimensionsRef };","map":{"version":3,"names":["useState","useCallback","useLayoutEffect","useOnWindowResize","useOnWindowScroll","getDimensionObject","node","rect","getBoundingClientRect","bottom","height","left","right","top","width","x","y","noWindowReturnValue","undefined","useDimensionsRef","updateOnScroll","updateOnResize","arguments","length","dimensions","setDimensions","setNode","ref","nodeFromCallback","measure","window","requestAnimationFrame","console","warn"],"sources":["/Users/lijinxing/Documents/hipo-dapp-bamboo/node_modules/rooks/dist/esm/hooks/useDimensionsRef.js"],"sourcesContent":["import { useState, useCallback, useLayoutEffect } from 'react';\nimport { useOnWindowResize } from './useOnWindowResize.js';\nimport { useOnWindowScroll } from './useOnWindowScroll.js';\n\n/* eslint-disable id-length */\r\nconst getDimensionObject = (node) => {\r\n    const rect = node.getBoundingClientRect();\r\n    return {\r\n        bottom: rect.bottom,\r\n        height: rect.height,\r\n        left: rect.left,\r\n        right: rect.right,\r\n        top: rect.top,\r\n        width: rect.width,\r\n        x: rect.left,\r\n        y: rect.top,\r\n    };\r\n};\r\nconst noWindowReturnValue = [undefined, null, null];\r\n/**\r\n * useDimensionsRef\r\n * @param updateOnScroll Whether to update on scroll\r\n * @param updateOnResize Whether to update on resize\r\n * @returns [React.Ref<HTMLDivElement>, UseDimensionsRefReturn, HTMLElement | null]\r\n * @see https://rooks.vercel.app/docs/useDimensionsRef\r\n */\r\nconst useDimensionsRef = ({ updateOnScroll = true, updateOnResize = true, } = {}) => {\r\n    const [dimensions, setDimensions] = useState(null);\r\n    const [node, setNode] = useState(null);\r\n    const ref = useCallback((nodeFromCallback) => {\r\n        setNode(nodeFromCallback);\r\n    }, []);\r\n    const measure = useCallback(() => {\r\n        window.requestAnimationFrame(() => {\r\n            if (node) {\r\n                setDimensions(getDimensionObject(node));\r\n            }\r\n        });\r\n    }, [node]);\r\n    useLayoutEffect(() => {\r\n        measure();\r\n    }, [measure]);\r\n    useOnWindowResize(() => {\r\n        measure();\r\n    }, updateOnResize, true);\r\n    useOnWindowScroll(() => {\r\n        measure();\r\n    }, updateOnScroll, true);\r\n    if (typeof window === \"undefined\") {\r\n        console.warn(\"useDimensionsRef: window is undefined.\");\r\n        return noWindowReturnValue;\r\n    }\r\n    return [ref, dimensions, node];\r\n};\n\nexport { useDimensionsRef };\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,WAAW,EAAEC,eAAe,QAAQ,OAAO;AAC9D,SAASC,iBAAiB,QAAQ,wBAAwB;AAC1D,SAASC,iBAAiB,QAAQ,wBAAwB;;AAE1D;AACA,MAAMC,kBAAkB,GAAIC,IAAI,IAAK;EACjC,MAAMC,IAAI,GAAGD,IAAI,CAACE,qBAAqB,EAAE;EACzC,OAAO;IACHC,MAAM,EAAEF,IAAI,CAACE,MAAM;IACnBC,MAAM,EAAEH,IAAI,CAACG,MAAM;IACnBC,IAAI,EAAEJ,IAAI,CAACI,IAAI;IACfC,KAAK,EAAEL,IAAI,CAACK,KAAK;IACjBC,GAAG,EAAEN,IAAI,CAACM,GAAG;IACbC,KAAK,EAAEP,IAAI,CAACO,KAAK;IACjBC,CAAC,EAAER,IAAI,CAACI,IAAI;IACZK,CAAC,EAAET,IAAI,CAACM;EACZ,CAAC;AACL,CAAC;AACD,MAAMI,mBAAmB,GAAG,CAACC,SAAS,EAAE,IAAI,EAAE,IAAI,CAAC;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,gBAAgB,GAAG,SAAAA,CAAA,EAA4D;EAAA,IAA3D;IAAEC,cAAc,GAAG,IAAI;IAAEC,cAAc,GAAG;EAAM,CAAC,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAJ,SAAA,GAAAI,SAAA,MAAG,CAAC,CAAC;EAC5E,MAAM,CAACE,UAAU,EAAEC,aAAa,CAAC,GAAGzB,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACM,IAAI,EAAEoB,OAAO,CAAC,GAAG1B,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM2B,GAAG,GAAG1B,WAAW,CAAE2B,gBAAgB,IAAK;IAC1CF,OAAO,CAACE,gBAAgB,CAAC;EAC7B,CAAC,EAAE,EAAE,CAAC;EACN,MAAMC,OAAO,GAAG5B,WAAW,CAAC,MAAM;IAC9B6B,MAAM,CAACC,qBAAqB,CAAC,MAAM;MAC/B,IAAIzB,IAAI,EAAE;QACNmB,aAAa,CAACpB,kBAAkB,CAACC,IAAI,CAAC,CAAC;MAC3C;IACJ,CAAC,CAAC;EACN,CAAC,EAAE,CAACA,IAAI,CAAC,CAAC;EACVJ,eAAe,CAAC,MAAM;IAClB2B,OAAO,EAAE;EACb,CAAC,EAAE,CAACA,OAAO,CAAC,CAAC;EACb1B,iBAAiB,CAAC,MAAM;IACpB0B,OAAO,EAAE;EACb,CAAC,EAAER,cAAc,EAAE,IAAI,CAAC;EACxBjB,iBAAiB,CAAC,MAAM;IACpByB,OAAO,EAAE;EACb,CAAC,EAAET,cAAc,EAAE,IAAI,CAAC;EACxB,IAAI,OAAOU,MAAM,KAAK,WAAW,EAAE;IAC/BE,OAAO,CAACC,IAAI,CAAC,wCAAwC,CAAC;IACtD,OAAOhB,mBAAmB;EAC9B;EACA,OAAO,CAACU,GAAG,EAAEH,UAAU,EAAElB,IAAI,CAAC;AAClC,CAAC;AAED,SAASa,gBAAgB"},"metadata":{},"sourceType":"module"}