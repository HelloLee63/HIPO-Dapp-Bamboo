{"ast":null,"code":"import { useState, useCallback, useEffect } from 'react';\nimport { useForkRef } from './useForkRef.js';\nimport { useMutationObserverRef } from './useMutationObserverRef.js';\n\n/**\r\n * @param element HTML element whose boundingclientrect is needed\r\n * @returns DOMRect\r\n */\nfunction getBoundingClientRect(element) {\n  return element.getBoundingClientRect();\n}\n/**\r\n * useBoundingclientrectRef hook\r\n * Tracks the boundingclientrect of a React Ref and fires a callback when the element's size changes.\r\n *\r\n * @returns [CallbackRef | null, DOMRect | null, () => void]\r\n * @see https://rooks.vercel.app/docs/useBoundingclientRectRef\r\n */\nfunction useBoundingclientrectRef() {\n  const [domRect, setDomRect] = useState(null);\n  const [node, setNode] = useState(null);\n  const update = useCallback(() => {\n    setDomRect(node ? getBoundingClientRect(node) : null);\n  }, [node]);\n  useEffect(() => {\n    update();\n  }, [update]);\n  const ref = useCallback(nodeElement => {\n    setNode(nodeElement);\n  }, []);\n  const [mutationObserverRef] = useMutationObserverRef(update);\n  const forkedRef = useForkRef(ref, mutationObserverRef);\n  return [forkedRef, domRect, update];\n}\nexport { useBoundingclientrectRef };","map":{"version":3,"names":["useState","useCallback","useEffect","useForkRef","useMutationObserverRef","getBoundingClientRect","element","useBoundingclientrectRef","domRect","setDomRect","node","setNode","update","ref","nodeElement","mutationObserverRef","forkedRef"],"sources":["/Users/lijinxing/Documents/hipo-dapp-bamboo/node_modules/rooks/dist/esm/hooks/useBoundingclientrectRef.js"],"sourcesContent":["import { useState, useCallback, useEffect } from 'react';\nimport { useForkRef } from './useForkRef.js';\nimport { useMutationObserverRef } from './useMutationObserverRef.js';\n\n/**\r\n * @param element HTML element whose boundingclientrect is needed\r\n * @returns DOMRect\r\n */\r\nfunction getBoundingClientRect(element) {\r\n    return element.getBoundingClientRect();\r\n}\r\n/**\r\n * useBoundingclientrectRef hook\r\n * Tracks the boundingclientrect of a React Ref and fires a callback when the element's size changes.\r\n *\r\n * @returns [CallbackRef | null, DOMRect | null, () => void]\r\n * @see https://rooks.vercel.app/docs/useBoundingclientRectRef\r\n */\r\nfunction useBoundingclientrectRef() {\r\n    const [domRect, setDomRect] = useState(null);\r\n    const [node, setNode] = useState(null);\r\n    const update = useCallback(() => {\r\n        setDomRect(node ? getBoundingClientRect(node) : null);\r\n    }, [node]);\r\n    useEffect(() => {\r\n        update();\r\n    }, [update]);\r\n    const ref = useCallback((nodeElement) => {\r\n        setNode(nodeElement);\r\n    }, []);\r\n    const [mutationObserverRef] = useMutationObserverRef(update);\r\n    const forkedRef = useForkRef(ref, mutationObserverRef);\r\n    return [forkedRef, domRect, update];\r\n}\n\nexport { useBoundingclientrectRef };\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,WAAW,EAAEC,SAAS,QAAQ,OAAO;AACxD,SAASC,UAAU,QAAQ,iBAAiB;AAC5C,SAASC,sBAAsB,QAAQ,6BAA6B;;AAEpE;AACA;AACA;AACA;AACA,SAASC,qBAAqBA,CAACC,OAAO,EAAE;EACpC,OAAOA,OAAO,CAACD,qBAAqB,EAAE;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,wBAAwBA,CAAA,EAAG;EAChC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACU,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAMY,MAAM,GAAGX,WAAW,CAAC,MAAM;IAC7BQ,UAAU,CAACC,IAAI,GAAGL,qBAAqB,CAACK,IAAI,CAAC,GAAG,IAAI,CAAC;EACzD,CAAC,EAAE,CAACA,IAAI,CAAC,CAAC;EACVR,SAAS,CAAC,MAAM;IACZU,MAAM,EAAE;EACZ,CAAC,EAAE,CAACA,MAAM,CAAC,CAAC;EACZ,MAAMC,GAAG,GAAGZ,WAAW,CAAEa,WAAW,IAAK;IACrCH,OAAO,CAACG,WAAW,CAAC;EACxB,CAAC,EAAE,EAAE,CAAC;EACN,MAAM,CAACC,mBAAmB,CAAC,GAAGX,sBAAsB,CAACQ,MAAM,CAAC;EAC5D,MAAMI,SAAS,GAAGb,UAAU,CAACU,GAAG,EAAEE,mBAAmB,CAAC;EACtD,OAAO,CAACC,SAAS,EAAER,OAAO,EAAEI,MAAM,CAAC;AACvC;AAEA,SAASL,wBAAwB"},"metadata":{},"sourceType":"module"}