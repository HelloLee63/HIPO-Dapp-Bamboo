{"ast":null,"code":"import { useRef, useEffect, useCallback } from 'react';\nimport { doesIdentifierMatchKeyboardEvent } from '../utils/doesIdentifierMatchKeyboardEvent.js';\nimport { noop } from '../utils/noop.js';\n\n/**\r\n * defaultOptions which will be merged with passed in options\r\n */\nconst defaultOptions = {\n  continuous: false,\n  when: true\n};\n/**\r\n * useKeys hook\r\n *\r\n * @param keysList - list of keys to listen to\r\n * @param callback  - callback to be called when a key is pressed\r\n * @param options - options to be passed to the event listener\r\n * @see https://rooks.vercel.app/docs/useKeys\r\n */\nfunction useKeys(keysList, callback, options) {\n  const internalOptions = Object.assign(Object.assign({}, defaultOptions), options);\n  const {\n    target,\n    when,\n    continuous,\n    preventLostKeyup\n  } = internalOptions;\n  const savedCallback = useRef(callback);\n  /**\r\n   * PressedKeyMapping will do the bookkeeping the pressed keys\r\n   */\n  const pressedKeyMappingRef = useRef({});\n  const PressedKeyMapping = pressedKeyMappingRef.current;\n  /**\r\n   *  First useEffect is to remember the latest callback\r\n   */\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n  /**\r\n   * handleKeyDown\r\n   *\r\n   * @param   {KeyboardEvent}  event\r\n   * KeyDown event handler which will wrap the passed in callback\r\n   */\n  const handleKeyDown = useCallback(event => {\n    let pressedKeyIdentifier = null;\n    let areAllKeysFromListPressed = false;\n    // First detect the key that was pressed;\n    for (const identifier of keysList) {\n      if (doesIdentifierMatchKeyboardEvent(event, identifier)) {\n        PressedKeyMapping[identifier] = true;\n        pressedKeyIdentifier = identifier;\n      }\n    }\n    if (keysList.every(identifier => Boolean(PressedKeyMapping[identifier]))) {\n      areAllKeysFromListPressed = true;\n    }\n    if (areAllKeysFromListPressed) {\n      savedCallback.current(event);\n      /**\r\n       * If not continuous\r\n       * disable identifier immediately\r\n       */\n      if (!continuous && pressedKeyIdentifier !== null) {\n        PressedKeyMapping[pressedKeyIdentifier] = false;\n      }\n    }\n  }, [keysList, PressedKeyMapping, continuous]);\n  /**\r\n   * [handleKeyUp]\r\n   *\r\n   * @param   {KeyboardEvent}  event\r\n   *\r\n   * KeyUp event handler which will update the keys pressed state in PressedKeyMapping\r\n   */\n  const handleKeyUp = useCallback(event => {\n    for (const identifier of keysList) {\n      if (doesIdentifierMatchKeyboardEvent(event, identifier)) {\n        PressedKeyMapping[identifier] = undefined;\n      }\n    }\n  }, [PressedKeyMapping, keysList]);\n  /**\r\n   * Responsible for setting up the event listener and removing event listeners\r\n   */\n  useEffect(() => {\n    if (when && typeof window !== \"undefined\") {\n      const targetNode = (target === null || target === void 0 ? void 0 : target.current) ? target.current : document;\n      targetNode.addEventListener(\"keydown\", handleKeyDown);\n      targetNode.addEventListener(\"keyup\", handleKeyUp);\n      return () => {\n        targetNode.removeEventListener(\"keydown\", handleKeyDown);\n        targetNode.removeEventListener(\"keyup\", handleKeyUp);\n      };\n    }\n    return noop;\n  }, [when, target, keysList, handleKeyDown, handleKeyUp]);\n  useEffect(() => {\n    if (preventLostKeyup !== true) return noop;\n    if (typeof window !== \"undefined\") {\n      const originalAlert = window.alert;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      window.alert = message => {\n        for (const identifier of keysList) {\n          PressedKeyMapping[identifier] = undefined;\n        }\n        return originalAlert(message);\n      };\n      const originalConfirm = window.confirm;\n      window.confirm = message => {\n        for (const identifier of keysList) {\n          PressedKeyMapping[identifier] = undefined;\n        }\n        return originalConfirm(message);\n      };\n      const originalPrompt = window.prompt;\n      window.prompt = (message, _default) => {\n        for (const identifier of keysList) {\n          PressedKeyMapping[identifier] = undefined;\n        }\n        return originalPrompt(message, _default);\n      };\n      return () => {\n        window.alert = originalAlert;\n        window.confirm = originalConfirm;\n        window.prompt = originalPrompt;\n      };\n    }\n    return noop;\n  }, [PressedKeyMapping, keysList, preventLostKeyup]);\n}\nexport { useKeys };","map":{"version":3,"names":["useRef","useEffect","useCallback","doesIdentifierMatchKeyboardEvent","noop","defaultOptions","continuous","when","useKeys","keysList","callback","options","internalOptions","Object","assign","target","preventLostKeyup","savedCallback","pressedKeyMappingRef","PressedKeyMapping","current","handleKeyDown","event","pressedKeyIdentifier","areAllKeysFromListPressed","identifier","every","Boolean","handleKeyUp","undefined","window","targetNode","document","addEventListener","removeEventListener","originalAlert","alert","message","originalConfirm","confirm","originalPrompt","prompt","_default"],"sources":["/Users/lijinxing/Documents/hipo-dapp-bamboo/node_modules/rooks/dist/esm/hooks/useKeys.js"],"sourcesContent":["import { useRef, useEffect, useCallback } from 'react';\nimport { doesIdentifierMatchKeyboardEvent } from '../utils/doesIdentifierMatchKeyboardEvent.js';\nimport { noop } from '../utils/noop.js';\n\n/**\r\n * defaultOptions which will be merged with passed in options\r\n */\r\nconst defaultOptions = {\r\n    continuous: false,\r\n    when: true,\r\n};\r\n/**\r\n * useKeys hook\r\n *\r\n * @param keysList - list of keys to listen to\r\n * @param callback  - callback to be called when a key is pressed\r\n * @param options - options to be passed to the event listener\r\n * @see https://rooks.vercel.app/docs/useKeys\r\n */\r\nfunction useKeys(keysList, callback, options) {\r\n    const internalOptions = Object.assign(Object.assign({}, defaultOptions), options);\r\n    const { target, when, continuous, preventLostKeyup } = internalOptions;\r\n    const savedCallback = useRef(callback);\r\n    /**\r\n     * PressedKeyMapping will do the bookkeeping the pressed keys\r\n     */\r\n    const pressedKeyMappingRef = useRef({});\r\n    const PressedKeyMapping = pressedKeyMappingRef.current;\r\n    /**\r\n     *  First useEffect is to remember the latest callback\r\n     */\r\n    useEffect(() => {\r\n        savedCallback.current = callback;\r\n    });\r\n    /**\r\n     * handleKeyDown\r\n     *\r\n     * @param   {KeyboardEvent}  event\r\n     * KeyDown event handler which will wrap the passed in callback\r\n     */\r\n    const handleKeyDown = useCallback((event) => {\r\n        let pressedKeyIdentifier = null;\r\n        let areAllKeysFromListPressed = false;\r\n        // First detect the key that was pressed;\r\n        for (const identifier of keysList) {\r\n            if (doesIdentifierMatchKeyboardEvent(event, identifier)) {\r\n                PressedKeyMapping[identifier] = true;\r\n                pressedKeyIdentifier = identifier;\r\n            }\r\n        }\r\n        if (keysList.every((identifier) => Boolean(PressedKeyMapping[identifier]))) {\r\n            areAllKeysFromListPressed = true;\r\n        }\r\n        if (areAllKeysFromListPressed) {\r\n            savedCallback.current(event);\r\n            /**\r\n             * If not continuous\r\n             * disable identifier immediately\r\n             */\r\n            if (!continuous && pressedKeyIdentifier !== null) {\r\n                PressedKeyMapping[pressedKeyIdentifier] = false;\r\n            }\r\n        }\r\n    }, [keysList, PressedKeyMapping, continuous]);\r\n    /**\r\n     * [handleKeyUp]\r\n     *\r\n     * @param   {KeyboardEvent}  event\r\n     *\r\n     * KeyUp event handler which will update the keys pressed state in PressedKeyMapping\r\n     */\r\n    const handleKeyUp = useCallback((event) => {\r\n        for (const identifier of keysList) {\r\n            if (doesIdentifierMatchKeyboardEvent(event, identifier)) {\r\n                PressedKeyMapping[identifier] = undefined;\r\n            }\r\n        }\r\n    }, [PressedKeyMapping, keysList]);\r\n    /**\r\n     * Responsible for setting up the event listener and removing event listeners\r\n     */\r\n    useEffect(() => {\r\n        if (when && typeof window !== \"undefined\") {\r\n            const targetNode = (target === null || target === void 0 ? void 0 : target.current) ? target.current : document;\r\n            targetNode.addEventListener(\"keydown\", handleKeyDown);\r\n            targetNode.addEventListener(\"keyup\", handleKeyUp);\r\n            return () => {\r\n                targetNode.removeEventListener(\"keydown\", handleKeyDown);\r\n                targetNode.removeEventListener(\"keyup\", handleKeyUp);\r\n            };\r\n        }\r\n        return noop;\r\n    }, [when, target, keysList, handleKeyDown, handleKeyUp]);\r\n    useEffect(() => {\r\n        if (preventLostKeyup !== true)\r\n            return noop;\r\n        if (typeof window !== \"undefined\") {\r\n            const originalAlert = window.alert;\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            window.alert = (message) => {\r\n                for (const identifier of keysList) {\r\n                    PressedKeyMapping[identifier] = undefined;\r\n                }\r\n                return originalAlert(message);\r\n            };\r\n            const originalConfirm = window.confirm;\r\n            window.confirm = (message) => {\r\n                for (const identifier of keysList) {\r\n                    PressedKeyMapping[identifier] = undefined;\r\n                }\r\n                return originalConfirm(message);\r\n            };\r\n            const originalPrompt = window.prompt;\r\n            window.prompt = (message, _default) => {\r\n                for (const identifier of keysList) {\r\n                    PressedKeyMapping[identifier] = undefined;\r\n                }\r\n                return originalPrompt(message, _default);\r\n            };\r\n            return () => {\r\n                window.alert = originalAlert;\r\n                window.confirm = originalConfirm;\r\n                window.prompt = originalPrompt;\r\n            };\r\n        }\r\n        return noop;\r\n    }, [PressedKeyMapping, keysList, preventLostKeyup]);\r\n}\n\nexport { useKeys };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}