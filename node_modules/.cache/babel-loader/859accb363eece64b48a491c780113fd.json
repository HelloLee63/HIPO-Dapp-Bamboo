{"ast":null,"code":"import { useMemo, useRef, useEffect, useCallback } from 'react';\nimport { doesIdentifierMatchKeyboardEvent } from '../utils/doesIdentifierMatchKeyboardEvent.js';\nimport { noop } from '../utils/noop.js';\nconst defaultOptions = {\n  eventTypes: [\"keydown\"],\n  when: true\n};\n/**\r\n * useKey hook\r\n *\r\n * Fires a callback on keyboard events like keyDown, keyPress and keyUp\r\n *\r\n * @param {TrackedKeyEvents} keys List of keys to listen for. Eg: [\"a\", \"b\"]\r\n * @param {Callback} callback  Callback to fire on keyboard events\r\n * @param {Options} options Options\r\n * @see https://rooks.vercel.app/docs/useKey\r\n */\nfunction useKey(keys, callback, options) {\n  const keyList = useMemo(() => {\n    if (Array.isArray(keys)) {\n      return keys;\n    } else {\n      return [keys];\n    }\n  }, [keys]);\n  const internalOptions = useMemo(() => {\n    return Object.assign(Object.assign({}, defaultOptions), options);\n  }, [options]);\n  const {\n    when,\n    eventTypes\n  } = internalOptions;\n  const callbackRef = useRef(callback);\n  const {\n    target\n  } = internalOptions;\n  useEffect(() => {\n    callbackRef.current = callback;\n  });\n  const handle = useCallback(event => {\n    if (keyList.some(identifier => doesIdentifierMatchKeyboardEvent(event, identifier))) {\n      callbackRef.current(event);\n    }\n  }, [keyList]);\n  useEffect(() => {\n    if (when && typeof window !== \"undefined\") {\n      // If target is defined by the user\n      if (target) {\n        const targetNode = target.current;\n        if (targetNode) {\n          for (const eventType of eventTypes) {\n            targetNode.addEventListener(eventType, handle);\n          }\n          return () => {\n            for (const eventType of eventTypes) {\n              targetNode.removeEventListener(eventType, handle);\n            }\n          };\n        }\n      } else {\n        for (const eventType of eventTypes) {\n          window.addEventListener(eventType, handle);\n        }\n        return () => {\n          for (const eventType of eventTypes) {\n            window.removeEventListener(eventType, handle);\n          }\n        };\n      }\n    }\n    return noop;\n  }, [when, eventTypes, keyList, target, callback, handle]);\n}\nexport { useKey };","map":{"version":3,"names":["useMemo","useRef","useEffect","useCallback","doesIdentifierMatchKeyboardEvent","noop","defaultOptions","eventTypes","when","useKey","keys","callback","options","keyList","Array","isArray","internalOptions","Object","assign","callbackRef","target","current","handle","event","some","identifier","window","targetNode","eventType","addEventListener","removeEventListener"],"sources":["/Users/lijinxing/Documents/hipo-dapp-bamboo/node_modules/rooks/dist/esm/hooks/useKey.js"],"sourcesContent":["import { useMemo, useRef, useEffect, useCallback } from 'react';\nimport { doesIdentifierMatchKeyboardEvent } from '../utils/doesIdentifierMatchKeyboardEvent.js';\nimport { noop } from '../utils/noop.js';\n\nconst defaultOptions = {\r\n    eventTypes: [\"keydown\"],\r\n    when: true,\r\n};\r\n/**\r\n * useKey hook\r\n *\r\n * Fires a callback on keyboard events like keyDown, keyPress and keyUp\r\n *\r\n * @param {TrackedKeyEvents} keys List of keys to listen for. Eg: [\"a\", \"b\"]\r\n * @param {Callback} callback  Callback to fire on keyboard events\r\n * @param {Options} options Options\r\n * @see https://rooks.vercel.app/docs/useKey\r\n */\r\nfunction useKey(keys, callback, options) {\r\n    const keyList = useMemo(() => {\r\n        if (Array.isArray(keys)) {\r\n            return keys;\r\n        }\r\n        else {\r\n            return [keys];\r\n        }\r\n    }, [keys]);\r\n    const internalOptions = useMemo(() => {\r\n        return Object.assign(Object.assign({}, defaultOptions), options);\r\n    }, [options]);\r\n    const { when, eventTypes } = internalOptions;\r\n    const callbackRef = useRef(callback);\r\n    const { target } = internalOptions;\r\n    useEffect(() => {\r\n        callbackRef.current = callback;\r\n    });\r\n    const handle = useCallback((event) => {\r\n        if (keyList.some((identifier) => doesIdentifierMatchKeyboardEvent(event, identifier))) {\r\n            callbackRef.current(event);\r\n        }\r\n    }, [keyList]);\r\n    useEffect(() => {\r\n        if (when && typeof window !== \"undefined\") {\r\n            // If target is defined by the user\r\n            if (target) {\r\n                const targetNode = target.current;\r\n                if (targetNode) {\r\n                    for (const eventType of eventTypes) {\r\n                        targetNode.addEventListener(eventType, handle);\r\n                    }\r\n                    return () => {\r\n                        for (const eventType of eventTypes) {\r\n                            targetNode.removeEventListener(eventType, handle);\r\n                        }\r\n                    };\r\n                }\r\n            }\r\n            else {\r\n                for (const eventType of eventTypes) {\r\n                    window.addEventListener(eventType, handle);\r\n                }\r\n                return () => {\r\n                    for (const eventType of eventTypes) {\r\n                        window.removeEventListener(eventType, handle);\r\n                    }\r\n                };\r\n            }\r\n        }\r\n        return noop;\r\n    }, [when, eventTypes, keyList, target, callback, handle]);\r\n}\n\nexport { useKey };\n"],"mappings":"AAAA,SAASA,OAAO,EAAEC,MAAM,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC/D,SAASC,gCAAgC,QAAQ,8CAA8C;AAC/F,SAASC,IAAI,QAAQ,kBAAkB;AAEvC,MAAMC,cAAc,GAAG;EACnBC,UAAU,EAAE,CAAC,SAAS,CAAC;EACvBC,IAAI,EAAE;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,MAAMA,CAACC,IAAI,EAAEC,QAAQ,EAAEC,OAAO,EAAE;EACrC,MAAMC,OAAO,GAAGb,OAAO,CAAC,MAAM;IAC1B,IAAIc,KAAK,CAACC,OAAO,CAACL,IAAI,CAAC,EAAE;MACrB,OAAOA,IAAI;IACf,CAAC,MACI;MACD,OAAO,CAACA,IAAI,CAAC;IACjB;EACJ,CAAC,EAAE,CAACA,IAAI,CAAC,CAAC;EACV,MAAMM,eAAe,GAAGhB,OAAO,CAAC,MAAM;IAClC,OAAOiB,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEZ,cAAc,CAAC,EAAEM,OAAO,CAAC;EACpE,CAAC,EAAE,CAACA,OAAO,CAAC,CAAC;EACb,MAAM;IAAEJ,IAAI;IAAED;EAAW,CAAC,GAAGS,eAAe;EAC5C,MAAMG,WAAW,GAAGlB,MAAM,CAACU,QAAQ,CAAC;EACpC,MAAM;IAAES;EAAO,CAAC,GAAGJ,eAAe;EAClCd,SAAS,CAAC,MAAM;IACZiB,WAAW,CAACE,OAAO,GAAGV,QAAQ;EAClC,CAAC,CAAC;EACF,MAAMW,MAAM,GAAGnB,WAAW,CAAEoB,KAAK,IAAK;IAClC,IAAIV,OAAO,CAACW,IAAI,CAAEC,UAAU,IAAKrB,gCAAgC,CAACmB,KAAK,EAAEE,UAAU,CAAC,CAAC,EAAE;MACnFN,WAAW,CAACE,OAAO,CAACE,KAAK,CAAC;IAC9B;EACJ,CAAC,EAAE,CAACV,OAAO,CAAC,CAAC;EACbX,SAAS,CAAC,MAAM;IACZ,IAAIM,IAAI,IAAI,OAAOkB,MAAM,KAAK,WAAW,EAAE;MACvC;MACA,IAAIN,MAAM,EAAE;QACR,MAAMO,UAAU,GAAGP,MAAM,CAACC,OAAO;QACjC,IAAIM,UAAU,EAAE;UACZ,KAAK,MAAMC,SAAS,IAAIrB,UAAU,EAAE;YAChCoB,UAAU,CAACE,gBAAgB,CAACD,SAAS,EAAEN,MAAM,CAAC;UAClD;UACA,OAAO,MAAM;YACT,KAAK,MAAMM,SAAS,IAAIrB,UAAU,EAAE;cAChCoB,UAAU,CAACG,mBAAmB,CAACF,SAAS,EAAEN,MAAM,CAAC;YACrD;UACJ,CAAC;QACL;MACJ,CAAC,MACI;QACD,KAAK,MAAMM,SAAS,IAAIrB,UAAU,EAAE;UAChCmB,MAAM,CAACG,gBAAgB,CAACD,SAAS,EAAEN,MAAM,CAAC;QAC9C;QACA,OAAO,MAAM;UACT,KAAK,MAAMM,SAAS,IAAIrB,UAAU,EAAE;YAChCmB,MAAM,CAACI,mBAAmB,CAACF,SAAS,EAAEN,MAAM,CAAC;UACjD;QACJ,CAAC;MACL;IACJ;IACA,OAAOjB,IAAI;EACf,CAAC,EAAE,CAACG,IAAI,EAAED,UAAU,EAAEM,OAAO,EAAEO,MAAM,EAAET,QAAQ,EAAEW,MAAM,CAAC,CAAC;AAC7D;AAEA,SAASb,MAAM"},"metadata":{},"sourceType":"module"}