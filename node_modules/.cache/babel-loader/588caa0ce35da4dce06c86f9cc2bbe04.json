{"ast":null,"code":"import React, { useRef, useEffect, useMemo } from 'react';\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar getDirectionStyle = function getDirectionStyle(dir, size) {\n  switch (dir) {\n    case 'left':\n      return {\n        top: 0,\n        left: 0,\n        transform: 'translate3d(-100%, 0, 0)',\n        width: size,\n        height: '100vh'\n      };\n    case 'right':\n      return {\n        top: 0,\n        right: 0,\n        transform: 'translate3d(100%, 0, 0)',\n        width: size,\n        height: '100vh'\n      };\n    case 'bottom':\n      return {\n        left: 0,\n        right: 0,\n        bottom: 0,\n        transform: 'translate3d(0, 100%, 0)',\n        width: '100%',\n        height: size\n      };\n    case 'top':\n      return {\n        left: 0,\n        right: 0,\n        top: 0,\n        transform: 'translate3d(0, -100%, 0)',\n        width: '100%',\n        height: size\n      };\n    default:\n      return {};\n  }\n};\nvar EZDrawer = function EZDrawer(props) {\n  var open = props.open,\n    _props$onClose = props.onClose,\n    onClose = _props$onClose === void 0 ? function () {} : _props$onClose,\n    children = props.children,\n    style = props.style,\n    _props$enableOverlay = props.enableOverlay,\n    enableOverlay = _props$enableOverlay === void 0 ? true : _props$enableOverlay,\n    _props$overlayColor = props.overlayColor,\n    overlayColor = _props$overlayColor === void 0 ? '#000' : _props$overlayColor,\n    _props$overlayOpacity = props.overlayOpacity,\n    overlayOpacity = _props$overlayOpacity === void 0 ? 0.4 : _props$overlayOpacity,\n    _props$zIndex = props.zIndex,\n    zIndex = _props$zIndex === void 0 ? 100 : _props$zIndex,\n    _props$duration = props.duration,\n    duration = _props$duration === void 0 ? 500 : _props$duration,\n    direction = props.direction,\n    _props$size = props.size,\n    size = _props$size === void 0 ? 250 : _props$size,\n    className = props.className,\n    customIdSuffix = props.customIdSuffix,\n    _props$lockBackground = props.lockBackgroundScroll,\n    lockBackgroundScroll = _props$lockBackground === void 0 ? false : _props$lockBackground;\n  var bodyRef = useRef(null);\n  useEffect(function () {\n    var updatePageScroll = function updatePageScroll() {\n      bodyRef.current = window.document.querySelector('body');\n      if (bodyRef.current && lockBackgroundScroll) {\n        if (open) {\n          bodyRef.current.style.overflow = 'hidden';\n        } else {\n          bodyRef.current.style.overflow = '';\n        }\n      }\n    };\n    updatePageScroll();\n  }, [open]);\n  var idSuffix = useMemo(function () {\n    return customIdSuffix || (Math.random() + 1).toString(36).substring(7);\n  }, [customIdSuffix]);\n  var overlayStyles = {\n    backgroundColor: \"\" + overlayColor,\n    opacity: \"\" + overlayOpacity,\n    zIndex: zIndex\n  };\n  var drawerStyles = _extends({\n    zIndex: zIndex + 1,\n    transitionDuration: duration + \"ms\"\n  }, getDirectionStyle(direction, size), style);\n  return React.createElement(\"div\", {\n    id: 'EZDrawer' + idSuffix,\n    className: 'EZDrawer'\n  }, React.createElement(\"input\", {\n    type: 'checkbox',\n    id: 'EZDrawer__checkbox' + idSuffix,\n    className: 'EZDrawer__checkbox',\n    onChange: onClose,\n    checked: open\n  }), React.createElement(\"nav\", {\n    role: 'navigation',\n    id: 'EZDrawer__container' + idSuffix,\n    style: drawerStyles,\n    className: 'EZDrawer__container ' + className\n  }, children), enableOverlay && React.createElement(\"label\", {\n    htmlFor: 'EZDrawer__checkbox' + idSuffix,\n    id: 'EZDrawer__overlay' + idSuffix,\n    className: 'EZDrawer__overlay',\n    style: overlayStyles\n  }));\n};\nexport default EZDrawer;","map":{"version":3,"names":["getDirectionStyle","dir","size","top","left","transform","width","height","right","bottom","EZDrawer","props","open","_props$onClose","onClose","children","style","_props$enableOverlay","enableOverlay","_props$overlayColor","overlayColor","_props$overlayOpacity","overlayOpacity","_props$zIndex","zIndex","_props$duration","duration","direction","_props$size","className","customIdSuffix","_props$lockBackground","lockBackgroundScroll","bodyRef","useRef","useEffect","updatePageScroll","current","window","document","querySelector","overflow","idSuffix","useMemo","Math","random","toString","substring","overlayStyles","backgroundColor","opacity","drawerStyles","_extends","transitionDuration","React","createElement","id","type","onChange","checked","role","htmlFor"],"sources":["../src/index.tsx"],"sourcesContent":["import React, { useEffect, useMemo, useRef } from 'react'\nimport type { CSSProperties } from 'react'\nimport './styles.scss'\n\ntype Props = {\n    open: boolean\n    onClose?: () => void\n    direction: 'left' | 'right' | 'top' | 'bottom'\n    lockBackgroundScroll?: boolean\n    children?: React.ReactNode\n    duration?: number\n    overlayOpacity?: number\n    overlayColor?: String\n    enableOverlay?: boolean\n    style?: React.CSSProperties\n    zIndex?: number\n    size?: number | string\n    className?: string | undefined\n    customIdSuffix?: string | undefined\n}\n\nconst getDirectionStyle = (\n    dir: string,\n    size?: number | string,\n): {} | React.CSSProperties => {\n    switch (dir) {\n        case 'left':\n            return {\n                top: 0,\n                left: 0,\n                transform: 'translate3d(-100%, 0, 0)',\n                width: size,\n                height: '100vh',\n            }\n        case 'right':\n            return {\n                top: 0,\n                right: 0,\n                transform: 'translate3d(100%, 0, 0)',\n                width: size,\n                height: '100vh',\n            }\n        case 'bottom':\n            return {\n                left: 0,\n                right: 0,\n                bottom: 0,\n                transform: 'translate3d(0, 100%, 0)',\n                width: '100%',\n                height: size,\n            }\n        case 'top':\n            return {\n                left: 0,\n                right: 0,\n                top: 0,\n                transform: 'translate3d(0, -100%, 0)',\n                width: '100%',\n                height: size,\n            }\n\n        default:\n            return {}\n    }\n}\n\nconst EZDrawer: React.FC<Props> = (props) => {\n    const {\n        open,\n        onClose = () => {},\n        children,\n        style,\n        enableOverlay = true,\n        overlayColor = '#000',\n        overlayOpacity = 0.4,\n        zIndex = 100,\n        duration = 500,\n        direction,\n        size = 250,\n        className,\n        customIdSuffix,\n        lockBackgroundScroll = false,\n    } = props\n\n    const bodyRef = useRef<HTMLBodyElement | null>(null)\n\n    useEffect(() => {\n        const updatePageScroll = () => {\n            bodyRef.current = window.document.querySelector('body')\n\n            if (bodyRef.current && lockBackgroundScroll) {\n                if (open) {\n                    bodyRef.current.style.overflow = 'hidden'\n                } else {\n                    bodyRef.current.style.overflow = ''\n                }\n            }\n        }\n\n        updatePageScroll()\n    }, [open])\n\n    const idSuffix = useMemo(() => {\n        return customIdSuffix || (Math.random() + 1).toString(36).substring(7)\n    }, [customIdSuffix])\n\n    const overlayStyles: CSSProperties = {\n        backgroundColor: `${overlayColor}`,\n        opacity: `${overlayOpacity}`,\n        zIndex: zIndex,\n    }\n\n    const drawerStyles: CSSProperties = {\n        zIndex: zIndex + 1,\n        transitionDuration: `${duration}ms`,\n        ...getDirectionStyle(direction, size),\n        ...style,\n    }\n\n    return (\n        <div id={'EZDrawer' + idSuffix} className='EZDrawer'>\n            <input\n                type='checkbox'\n                id={'EZDrawer__checkbox' + idSuffix}\n                className='EZDrawer__checkbox'\n                onChange={onClose}\n                checked={open}\n            />\n            <nav\n                role='navigation'\n                id={'EZDrawer__container' + idSuffix}\n                style={drawerStyles}\n                className={'EZDrawer__container ' + className}\n            >\n                {children}\n            </nav>\n            {enableOverlay && (\n                <label\n                    htmlFor={'EZDrawer__checkbox' + idSuffix}\n                    id={'EZDrawer__overlay' + idSuffix}\n                    className='EZDrawer__overlay'\n                    style={overlayStyles}\n                />\n            )}\n        </div>\n    )\n}\n\nexport default EZDrawer\n"],"mappings":";;;;;;;;;;;;;;;AAqBA,IAAMA,iBAAiB,GAAG,SAApBA,iBAAoBA,CACtBC,GADsB,EAEtBC,IAFsB;EAItB,QAAQD,GAAR;IACI,KAAK,MAAL;MACI,OAAO;QACHE,GAAG,EAAE,CADF;QAEHC,IAAI,EAAE,CAFH;QAGHC,SAAS,EAAE,0BAHR;QAIHC,KAAK,EAAEJ,IAJJ;QAKHK,MAAM,EAAE;MALL,CAAP;IAOJ,KAAK,OAAL;MACI,OAAO;QACHJ,GAAG,EAAE,CADF;QAEHK,KAAK,EAAE,CAFJ;QAGHH,SAAS,EAAE,yBAHR;QAIHC,KAAK,EAAEJ,IAJJ;QAKHK,MAAM,EAAE;MALL,CAAP;IAOJ,KAAK,QAAL;MACI,OAAO;QACHH,IAAI,EAAE,CADH;QAEHI,KAAK,EAAE,CAFJ;QAGHC,MAAM,EAAE,CAHL;QAIHJ,SAAS,EAAE,yBAJR;QAKHC,KAAK,EAAE,MALJ;QAMHC,MAAM,EAAEL;MANL,CAAP;IAQJ,KAAK,KAAL;MACI,OAAO;QACHE,IAAI,EAAE,CADH;QAEHI,KAAK,EAAE,CAFJ;QAGHL,GAAG,EAAE,CAHF;QAIHE,SAAS,EAAE,0BAJR;QAKHC,KAAK,EAAE,MALJ;QAMHC,MAAM,EAAEL;MANL,CAAP;IASJ;MACI,OAAO,EAAP;EAAA;AAEX,CA3CD;AA6CA,IAAMQ,QAAQ,GAAoB,SAA5BA,QAA4BA,CAACC,KAAD;EAC9B,IACIC,IADJ,GAeID,KAfJ,CACIC,IADJ;IAAAC,cAAA,GAeIF,KAfJ,CAEIG,OAFJ;IAEIA,OAFJ,GAAAD,cAAA,cAEc,cAFd,GAAAA,cAAA;IAGIE,QAHJ,GAeIJ,KAfJ,CAGII,QAHJ;IAIIC,KAJJ,GAeIL,KAfJ,CAIIK,KAJJ;IAAAC,oBAAA,GAeIN,KAfJ,CAKIO,aALJ;IAKIA,aALJ,GAAAD,oBAAA,cAKoB,IALpB,GAAAA,oBAAA;IAAAE,mBAAA,GAeIR,KAfJ,CAMIS,YANJ;IAMIA,YANJ,GAAAD,mBAAA,cAMmB,MANnB,GAAAA,mBAAA;IAAAE,qBAAA,GAeIV,KAfJ,CAOIW,cAPJ;IAOIA,cAPJ,GAAAD,qBAAA,cAOqB,GAPrB,GAAAA,qBAAA;IAAAE,aAAA,GAeIZ,KAfJ,CAQIa,MARJ;IAQIA,MARJ,GAAAD,aAAA,cAQa,GARb,GAAAA,aAAA;IAAAE,eAAA,GAeId,KAfJ,CASIe,QATJ;IASIA,QATJ,GAAAD,eAAA,cASe,GATf,GAAAA,eAAA;IAUIE,SAVJ,GAeIhB,KAfJ,CAUIgB,SAVJ;IAAAC,WAAA,GAeIjB,KAfJ,CAWIT,IAXJ;IAWIA,IAXJ,GAAA0B,WAAA,cAWW,GAXX,GAAAA,WAAA;IAYIC,SAZJ,GAeIlB,KAfJ,CAYIkB,SAZJ;IAaIC,cAbJ,GAeInB,KAfJ,CAaImB,cAbJ;IAAAC,qBAAA,GAeIpB,KAfJ,CAcIqB,oBAdJ;IAcIA,oBAdJ,GAAAD,qBAAA,cAc2B,KAd3B,GAAAA,qBAAA;EAiBA,IAAME,OAAO,GAAGC,MAAM,CAAyB,IAAzB,CAAtB;EAEAC,SAAS,CAAC;IACN,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmBA,CAAA;MACrBH,OAAO,CAACI,OAAR,GAAkBC,MAAM,CAACC,QAAP,CAAgBC,aAAhB,CAA8B,MAA9B,CAAlB;MAEA,IAAIP,OAAO,CAACI,OAAR,IAAmBL,oBAAvB,EAA6C;QACzC,IAAIpB,IAAJ,EAAU;UACNqB,OAAO,CAACI,OAAR,CAAgBrB,KAAhB,CAAsByB,QAAtB,GAAiC,QAAjC;QACH,CAFD,MAEO;UACHR,OAAO,CAACI,OAAR,CAAgBrB,KAAhB,CAAsByB,QAAtB,GAAiC,EAAjC;QACH;MACJ;IACJ,CAVD;IAYAL,gBAAgB;EACnB,CAdQ,EAcN,CAACxB,IAAD,CAdM,CAAT;EAgBA,IAAM8B,QAAQ,GAAGC,OAAO,CAAC;IACrB,OAAOb,cAAc,IAAI,CAACc,IAAI,CAACC,MAAL,KAAgB,CAAjB,EAAoBC,QAApB,CAA6B,EAA7B,EAAiCC,SAAjC,CAA2C,CAA3C,CAAzB;EACH,CAFuB,EAErB,CAACjB,cAAD,CAFqB,CAAxB;EAIA,IAAMkB,aAAa,GAAkB;IACjCC,eAAe,OAAK7B,YADa;IAEjC8B,OAAO,OAAK5B,cAFqB;IAGjCE,MAAM,EAAEA;EAHyB,CAArC;EAMA,IAAM2B,YAAY,GAAAC,QAAA;IACd5B,MAAM,EAAEA,MAAM,GAAG,CADH;IAEd6B,kBAAkB,EAAK3B,QAAL;EAFJ,GAGX1B,iBAAiB,CAAC2B,SAAD,EAAYzB,IAAZ,CAHN,EAIXc,KAJW,CAAlB;EAOA,OACIsC,KAAA,CAAAC,aAAA;IAAKC,EAAE,EAAE,aAAad,QAAA;IAAUb,SAAS,EAAC;GAA1C,EACIyB,KAAA,CAAAC,aAAA;IACIE,IAAI,EAAC;IACLD,EAAE,EAAE,uBAAuBd,QAAA;IAC3Bb,SAAS,EAAC;IACV6B,QAAQ,EAAE5C,OAAA;IACV6C,OAAO,EAAE/C;GALb,CADJ,EAQI0C,KAAA,CAAAC,aAAA;IACIK,IAAI,EAAC;IACLJ,EAAE,EAAE,wBAAwBd,QAAA;IAC5B1B,KAAK,EAAEmC,YAAA;IACPtB,SAAS,EAAE,yBAAyBA;GAJxC,EAMKd,QANL,CARJ,EAgBKG,aAAa,IACVoC,KAAA,CAAAC,aAAA;IACIM,OAAO,EAAE,uBAAuBnB,QAAA;IAChCc,EAAE,EAAE,sBAAsBd,QAAA;IAC1Bb,SAAS,EAAC;IACVb,KAAK,EAAEgC;GAJX,CAjBR,CADJ;AA2BH,CAhFD"},"metadata":{},"sourceType":"module"}