{"ast":null,"code":"import JSBI from 'jsbi';\nimport invariant from 'tiny-invariant';\nimport _Decimal from 'decimal.js-light';\nimport _Big from 'big.js';\nimport toFormat from 'toformat';\nimport { getAddress } from '@ethersproject/address';\nvar SupportedChainId;\n(function (SupportedChainId) {\n  SupportedChainId[SupportedChainId[\"MAINNET\"] = 1] = \"MAINNET\";\n  SupportedChainId[SupportedChainId[\"GOERLI\"] = 5] = \"GOERLI\";\n  SupportedChainId[SupportedChainId[\"ARBITRUM_ONE\"] = 42161] = \"ARBITRUM_ONE\";\n  SupportedChainId[SupportedChainId[\"ARBITRUM_GOERLI\"] = 421613] = \"ARBITRUM_GOERLI\";\n  SupportedChainId[SupportedChainId[\"OPTIMISM\"] = 10] = \"OPTIMISM\";\n  SupportedChainId[SupportedChainId[\"OPTIMISM_GOERLI\"] = 420] = \"OPTIMISM_GOERLI\";\n  SupportedChainId[SupportedChainId[\"POLYGON\"] = 137] = \"POLYGON\";\n  SupportedChainId[SupportedChainId[\"POLYGON_MUMBAI\"] = 80001] = \"POLYGON_MUMBAI\";\n  SupportedChainId[SupportedChainId[\"CELO\"] = 42220] = \"CELO\";\n  SupportedChainId[SupportedChainId[\"CELO_ALFAJORES\"] = 44787] = \"CELO_ALFAJORES\";\n  SupportedChainId[SupportedChainId[\"BNB\"] = 56] = \"BNB\";\n})(SupportedChainId || (SupportedChainId = {}));\nvar TradeType;\n(function (TradeType) {\n  TradeType[TradeType[\"EXACT_INPUT\"] = 0] = \"EXACT_INPUT\";\n  TradeType[TradeType[\"EXACT_OUTPUT\"] = 1] = \"EXACT_OUTPUT\";\n})(TradeType || (TradeType = {}));\nvar Rounding;\n(function (Rounding) {\n  Rounding[Rounding[\"ROUND_DOWN\"] = 0] = \"ROUND_DOWN\";\n  Rounding[Rounding[\"ROUND_HALF_UP\"] = 1] = \"ROUND_HALF_UP\";\n  Rounding[Rounding[\"ROUND_UP\"] = 2] = \"ROUND_UP\";\n})(Rounding || (Rounding = {}));\nvar MaxUint256 = /*#__PURE__*/JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\nvar _toSignificantRoundin, _toFixedRounding;\nvar Decimal = /*#__PURE__*/toFormat(_Decimal);\nvar Big = /*#__PURE__*/toFormat(_Big);\nvar toSignificantRounding = (_toSignificantRoundin = {}, _toSignificantRoundin[Rounding.ROUND_DOWN] = Decimal.ROUND_DOWN, _toSignificantRoundin[Rounding.ROUND_HALF_UP] = Decimal.ROUND_HALF_UP, _toSignificantRoundin[Rounding.ROUND_UP] = Decimal.ROUND_UP, _toSignificantRoundin);\nvar toFixedRounding = (_toFixedRounding = {}, _toFixedRounding[Rounding.ROUND_DOWN] = 0, _toFixedRounding[Rounding.ROUND_HALF_UP] = 1, _toFixedRounding[Rounding.ROUND_UP] = 3, _toFixedRounding);\nvar Fraction = /*#__PURE__*/function () {\n  function Fraction(numerator, denominator) {\n    if (denominator === void 0) {\n      denominator = JSBI.BigInt(1);\n    }\n    this.numerator = JSBI.BigInt(numerator);\n    this.denominator = JSBI.BigInt(denominator);\n  }\n  Fraction.tryParseFraction = function tryParseFraction(fractionish) {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string') return new Fraction(fractionish);\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish;\n    throw new Error('Could not parse fraction');\n  } // performs floor division\n  ;\n\n  var _proto = Fraction.prototype;\n  _proto.invert = function invert() {\n    return new Fraction(this.denominator, this.numerator);\n  };\n  _proto.add = function add(other) {\n    var otherParsed = Fraction.tryParseFraction(other);\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator);\n    }\n    return new Fraction(JSBI.add(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator)), JSBI.multiply(this.denominator, otherParsed.denominator));\n  };\n  _proto.subtract = function subtract(other) {\n    var otherParsed = Fraction.tryParseFraction(other);\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator);\n    }\n    return new Fraction(JSBI.subtract(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator)), JSBI.multiply(this.denominator, otherParsed.denominator));\n  };\n  _proto.lessThan = function lessThan(other) {\n    var otherParsed = Fraction.tryParseFraction(other);\n    return JSBI.lessThan(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));\n  };\n  _proto.equalTo = function equalTo(other) {\n    var otherParsed = Fraction.tryParseFraction(other);\n    return JSBI.equal(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));\n  };\n  _proto.greaterThan = function greaterThan(other) {\n    var otherParsed = Fraction.tryParseFraction(other);\n    return JSBI.greaterThan(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));\n  };\n  _proto.multiply = function multiply(other) {\n    var otherParsed = Fraction.tryParseFraction(other);\n    return new Fraction(JSBI.multiply(this.numerator, otherParsed.numerator), JSBI.multiply(this.denominator, otherParsed.denominator));\n  };\n  _proto.divide = function divide(other) {\n    var otherParsed = Fraction.tryParseFraction(other);\n    return new Fraction(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(this.denominator, otherParsed.numerator));\n  };\n  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {\n    if (format === void 0) {\n      format = {\n        groupSeparator: ''\n      };\n    }\n    if (rounding === void 0) {\n      rounding = Rounding.ROUND_HALF_UP;\n    }\n    !Number.isInteger(significantDigits) ? process.env.NODE_ENV !== \"production\" ? invariant(false, significantDigits + \" is not an integer.\") : invariant(false) : void 0;\n    !(significantDigits > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, significantDigits + \" is not positive.\") : invariant(false) : void 0;\n    Decimal.set({\n      precision: significantDigits + 1,\n      rounding: toSignificantRounding[rounding]\n    });\n    var quotient = new Decimal(this.numerator.toString()).div(this.denominator.toString()).toSignificantDigits(significantDigits);\n    return quotient.toFormat(quotient.decimalPlaces(), format);\n  };\n  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {\n    if (format === void 0) {\n      format = {\n        groupSeparator: ''\n      };\n    }\n    if (rounding === void 0) {\n      rounding = Rounding.ROUND_HALF_UP;\n    }\n    !Number.isInteger(decimalPlaces) ? process.env.NODE_ENV !== \"production\" ? invariant(false, decimalPlaces + \" is not an integer.\") : invariant(false) : void 0;\n    !(decimalPlaces >= 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, decimalPlaces + \" is negative.\") : invariant(false) : void 0;\n    Big.DP = decimalPlaces;\n    Big.RM = toFixedRounding[rounding];\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format);\n  }\n  /**\r\n   * Helper method for converting any super class back to a fraction\r\n   */;\n\n  _createClass(Fraction, [{\n    key: \"quotient\",\n    get: function get() {\n      return JSBI.divide(this.numerator, this.denominator);\n    } // remainder after floor division\n  }, {\n    key: \"remainder\",\n    get: function get() {\n      return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator);\n    }\n  }, {\n    key: \"asFraction\",\n    get: function get() {\n      return new Fraction(this.numerator, this.denominator);\n    }\n  }]);\n  return Fraction;\n}();\nvar Big$1 = /*#__PURE__*/toFormat(_Big);\nvar CurrencyAmount = /*#__PURE__*/function (_Fraction) {\n  _inheritsLoose(CurrencyAmount, _Fraction);\n  function CurrencyAmount(currency, numerator, denominator) {\n    var _this;\n    _this = _Fraction.call(this, numerator, denominator) || this;\n    !JSBI.lessThanOrEqual(_this.quotient, MaxUint256) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'AMOUNT') : invariant(false) : void 0;\n    _this.currency = currency;\n    _this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals));\n    return _this;\n  }\n  /**\r\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\r\n   * @param currency the currency in the amount\r\n   * @param rawAmount the raw token or ether amount\r\n   */\n\n  CurrencyAmount.fromRawAmount = function fromRawAmount(currency, rawAmount) {\n    return new CurrencyAmount(currency, rawAmount);\n  }\n  /**\r\n   * Construct a currency amount with a denominator that is not equal to 1\r\n   * @param currency the currency\r\n   * @param numerator the numerator of the fractional token amount\r\n   * @param denominator the denominator of the fractional token amount\r\n   */;\n\n  CurrencyAmount.fromFractionalAmount = function fromFractionalAmount(currency, numerator, denominator) {\n    return new CurrencyAmount(currency, numerator, denominator);\n  };\n  var _proto = CurrencyAmount.prototype;\n  _proto.add = function add(other) {\n    !this.currency.equals(other.currency) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'CURRENCY') : invariant(false) : void 0;\n    var added = _Fraction.prototype.add.call(this, other);\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator);\n  };\n  _proto.subtract = function subtract(other) {\n    !this.currency.equals(other.currency) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'CURRENCY') : invariant(false) : void 0;\n    var subtracted = _Fraction.prototype.subtract.call(this, other);\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator);\n  };\n  _proto.multiply = function multiply(other) {\n    var multiplied = _Fraction.prototype.multiply.call(this, other);\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator);\n  };\n  _proto.divide = function divide(other) {\n    var divided = _Fraction.prototype.divide.call(this, other);\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator);\n  };\n  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {\n    if (significantDigits === void 0) {\n      significantDigits = 6;\n    }\n    if (rounding === void 0) {\n      rounding = Rounding.ROUND_DOWN;\n    }\n    return _Fraction.prototype.divide.call(this, this.decimalScale).toSignificant(significantDigits, format, rounding);\n  };\n  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {\n    if (decimalPlaces === void 0) {\n      decimalPlaces = this.currency.decimals;\n    }\n    if (rounding === void 0) {\n      rounding = Rounding.ROUND_DOWN;\n    }\n    !(decimalPlaces <= this.currency.decimals) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'DECIMALS') : invariant(false) : void 0;\n    return _Fraction.prototype.divide.call(this, this.decimalScale).toFixed(decimalPlaces, format, rounding);\n  };\n  _proto.toExact = function toExact(format) {\n    if (format === void 0) {\n      format = {\n        groupSeparator: ''\n      };\n    }\n    Big$1.DP = this.currency.decimals;\n    return new Big$1(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format);\n  };\n  _createClass(CurrencyAmount, [{\n    key: \"wrapped\",\n    get: function get() {\n      if (this.currency.isToken) return this;\n      return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator);\n    }\n  }]);\n  return CurrencyAmount;\n}(Fraction);\nvar ONE_HUNDRED = /*#__PURE__*/new Fraction( /*#__PURE__*/JSBI.BigInt(100));\n/**\r\n * Converts a fraction to a percent\r\n * @param fraction the fraction to convert\r\n */\n\nfunction toPercent(fraction) {\n  return new Percent(fraction.numerator, fraction.denominator);\n}\nvar Percent = /*#__PURE__*/function (_Fraction) {\n  _inheritsLoose(Percent, _Fraction);\n  function Percent() {\n    var _this;\n    _this = _Fraction.apply(this, arguments) || this;\n    /**\r\n     * This boolean prevents a fraction from being interpreted as a Percent\r\n     */\n\n    _this.isPercent = true;\n    return _this;\n  }\n  var _proto = Percent.prototype;\n  _proto.add = function add(other) {\n    return toPercent(_Fraction.prototype.add.call(this, other));\n  };\n  _proto.subtract = function subtract(other) {\n    return toPercent(_Fraction.prototype.subtract.call(this, other));\n  };\n  _proto.multiply = function multiply(other) {\n    return toPercent(_Fraction.prototype.multiply.call(this, other));\n  };\n  _proto.divide = function divide(other) {\n    return toPercent(_Fraction.prototype.divide.call(this, other));\n  };\n  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {\n    if (significantDigits === void 0) {\n      significantDigits = 5;\n    }\n    return _Fraction.prototype.multiply.call(this, ONE_HUNDRED).toSignificant(significantDigits, format, rounding);\n  };\n  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {\n    if (decimalPlaces === void 0) {\n      decimalPlaces = 2;\n    }\n    return _Fraction.prototype.multiply.call(this, ONE_HUNDRED).toFixed(decimalPlaces, format, rounding);\n  };\n  return Percent;\n}(Fraction);\nvar Price = /*#__PURE__*/function (_Fraction) {\n  _inheritsLoose(Price, _Fraction);\n\n  /**\r\n   * Construct a price, either with the base and quote currency amount, or the\r\n   * @param args\r\n   */\n  function Price() {\n    var _this;\n    var baseCurrency, quoteCurrency, denominator, numerator;\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    if (args.length === 4) {\n      baseCurrency = args[0];\n      quoteCurrency = args[1];\n      denominator = args[2];\n      numerator = args[3];\n    } else {\n      var result = args[0].quoteAmount.divide(args[0].baseAmount);\n      var _ref = [args[0].baseAmount.currency, args[0].quoteAmount.currency, result.denominator, result.numerator];\n      baseCurrency = _ref[0];\n      quoteCurrency = _ref[1];\n      denominator = _ref[2];\n      numerator = _ref[3];\n    }\n    _this = _Fraction.call(this, numerator, denominator) || this;\n    _this.baseCurrency = baseCurrency;\n    _this.quoteCurrency = quoteCurrency;\n    _this.scalar = new Fraction(JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)), JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals)));\n    return _this;\n  }\n  /**\r\n   * Flip the price, switching the base and quote currency\r\n   */\n\n  var _proto = Price.prototype;\n  _proto.invert = function invert() {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator);\n  }\n  /**\r\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\r\n   * @param other the other price\r\n   */;\n\n  _proto.multiply = function multiply(other) {\n    !this.quoteCurrency.equals(other.baseCurrency) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    var fraction = _Fraction.prototype.multiply.call(this, other);\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator);\n  }\n  /**\r\n   * Return the amount of quote currency corresponding to a given amount of the base currency\r\n   * @param currencyAmount the amount of base currency to quote against the price\r\n   */;\n\n  _proto.quote = function quote(currencyAmount) {\n    !currencyAmount.currency.equals(this.baseCurrency) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    var result = _Fraction.prototype.multiply.call(this, currencyAmount);\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator);\n  }\n  /**\r\n   * Get the value scaled by decimals for formatting\r\n   * @private\r\n   */;\n\n  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {\n    if (significantDigits === void 0) {\n      significantDigits = 6;\n    }\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding);\n  };\n  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {\n    if (decimalPlaces === void 0) {\n      decimalPlaces = 4;\n    }\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding);\n  };\n  _createClass(Price, [{\n    key: \"adjustedForDecimals\",\n    get: function get() {\n      return _Fraction.prototype.multiply.call(this, this.scalar);\n    }\n  }]);\n  return Price;\n}(Fraction);\n\n/**\r\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\r\n */\n\nvar BaseCurrency =\n/**\r\n * Constructs an instance of the base class `BaseCurrency`.\r\n * @param chainId the chain ID on which this currency resides\r\n * @param decimals decimals of the currency\r\n * @param symbol symbol of the currency\r\n * @param name of the currency\r\n */\nfunction BaseCurrency(chainId, decimals, symbol, name) {\n  !Number.isSafeInteger(chainId) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'CHAIN_ID') : invariant(false) : void 0;\n  !(decimals >= 0 && decimals < 255 && Number.isInteger(decimals)) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'DECIMALS') : invariant(false) : void 0;\n  this.chainId = chainId;\n  this.decimals = decimals;\n  this.symbol = symbol;\n  this.name = name;\n};\n\n/**\r\n * Represents the native currency of the chain on which it resides, e.g.\r\n */\n\nvar NativeCurrency = /*#__PURE__*/function (_BaseCurrency) {\n  _inheritsLoose(NativeCurrency, _BaseCurrency);\n  function NativeCurrency() {\n    var _this;\n    _this = _BaseCurrency.apply(this, arguments) || this;\n    _this.isNative = true;\n    _this.isToken = false;\n    return _this;\n  }\n  return NativeCurrency;\n}(BaseCurrency);\n\n/**\r\n * Validates an address and returns the parsed (checksummed) version of that address\r\n * @param address the unchecksummed hex address\r\n */\n\nfunction validateAndParseAddress(address) {\n  try {\n    return getAddress(address);\n  } catch (error) {\n    throw new Error(address + \" is not a valid address.\");\n  }\n} // Checks a string starts with 0x, is 42 characters long and contains only hex characters after 0x\n\nvar startsWith0xLen42HexRegex = /^0x[0-9a-fA-F]{40}$/;\n/**\r\n * Checks if an address is valid by checking 0x prefix, length === 42 and hex encoding.\r\n * @param address the unchecksummed hex address\r\n */\n\nfunction checkValidAddress(address) {\n  if (startsWith0xLen42HexRegex.test(address)) {\n    return address;\n  }\n  throw new Error(address + \" is not a valid address.\");\n}\n\n/**\r\n * Represents an ERC20 token with a unique address and some metadata.\r\n */\n\nvar Token = /*#__PURE__*/function (_BaseCurrency) {\n  _inheritsLoose(Token, _BaseCurrency);\n\n  /**\r\n   *\r\n   * @param chainId {@link BaseCurrency#chainId}\r\n   * @param address The contract address on the chain on which this token lives\r\n   * @param decimals {@link BaseCurrency#decimals}\r\n   * @param symbol {@link BaseCurrency#symbol}\r\n   * @param name {@link BaseCurrency#name}\r\n   * @param bypassChecksum If true it only checks for length === 42, startsWith 0x and contains only hex characters\r\n   */\n  function Token(chainId, address, decimals, symbol, name, bypassChecksum) {\n    var _this;\n    _this = _BaseCurrency.call(this, chainId, decimals, symbol, name) || this;\n    _this.isNative = false;\n    _this.isToken = true;\n    if (bypassChecksum) {\n      _this.address = checkValidAddress(address);\n    } else {\n      _this.address = validateAndParseAddress(address);\n    }\n    return _this;\n  }\n  /**\r\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\r\n   * @param other other token to compare\r\n   */\n\n  var _proto = Token.prototype;\n  _proto.equals = function equals(other) {\n    return other.isToken && this.chainId === other.chainId && this.address.toLowerCase() === other.address.toLowerCase();\n  }\n  /**\r\n   * Returns true if the address of this token sorts before the address of the other token\r\n   * @param other other token to compare\r\n   * @throws if the tokens have the same address\r\n   * @throws if the tokens are on different chains\r\n   */;\n\n  _proto.sortsBefore = function sortsBefore(other) {\n    !(this.chainId === other.chainId) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'CHAIN_IDS') : invariant(false) : void 0;\n    !(this.address.toLowerCase() !== other.address.toLowerCase()) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ADDRESSES') : invariant(false) : void 0;\n    return this.address.toLowerCase() < other.address.toLowerCase();\n  }\n  /**\r\n   * Return this token, which does not need to be wrapped\r\n   */;\n\n  _createClass(Token, [{\n    key: \"wrapped\",\n    get: function get() {\n      return this;\n    }\n  }]);\n  return Token;\n}(BaseCurrency);\nvar _WETH;\n/**\r\n * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped\r\n */\n\nvar WETH9 = (_WETH = {}, _WETH[1] = /*#__PURE__*/new Token(1, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'), _WETH[3] = /*#__PURE__*/new Token(3, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'), _WETH[4] = /*#__PURE__*/new Token(4, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'), _WETH[5] = /*#__PURE__*/new Token(5, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'), _WETH[42] = /*#__PURE__*/new Token(42, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'), _WETH[10] = /*#__PURE__*/new Token(10, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'), _WETH[69] = /*#__PURE__*/new Token(69, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'), _WETH[42161] = /*#__PURE__*/new Token(42161, '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1', 18, 'WETH', 'Wrapped Ether'), _WETH[421611] = /*#__PURE__*/new Token(421611, '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681', 18, 'WETH', 'Wrapped Ether'), _WETH);\n\n/**\r\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\r\n */\n\nvar Ether = /*#__PURE__*/function (_NativeCurrency) {\n  _inheritsLoose(Ether, _NativeCurrency);\n  function Ether(chainId) {\n    return _NativeCurrency.call(this, chainId, 18, 'ETH', 'Ether') || this;\n  }\n  Ether.onChain = function onChain(chainId) {\n    var _this$_etherCache$cha;\n    return (_this$_etherCache$cha = this._etherCache[chainId]) != null ? _this$_etherCache$cha : this._etherCache[chainId] = new Ether(chainId);\n  };\n  var _proto = Ether.prototype;\n  _proto.equals = function equals(other) {\n    return other.isNative && other.chainId === this.chainId;\n  };\n  _createClass(Ether, [{\n    key: \"wrapped\",\n    get: function get() {\n      var weth9 = WETH9[this.chainId];\n      !!!weth9 ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'WRAPPED') : invariant(false) : void 0;\n      return weth9;\n    }\n  }]);\n  return Ether;\n}(NativeCurrency);\nEther._etherCache = {};\n\n/**\r\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\r\n * @param midPrice mid price before the trade\r\n * @param inputAmount the input amount of the trade\r\n * @param outputAmount the output amount of the trade\r\n */\n\nfunction computePriceImpact(midPrice, inputAmount, outputAmount) {\n  var quotedOutputAmount = midPrice.quote(inputAmount); // calculate price impact := (exactQuote - outputAmount) / exactQuote\n\n  var priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount);\n  return new Percent(priceImpact.numerator, priceImpact.denominator);\n}\n\n// `maxSize` by removing the last item\n\nfunction sortedInsert(items, add, maxSize, comparator) {\n  !(maxSize > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'MAX_SIZE_ZERO') : invariant(false) : void 0; // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n\n  !(items.length <= maxSize) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ITEMS_SIZE') : invariant(false) : void 0; // short circuit first item add\n\n  if (items.length === 0) {\n    items.push(add);\n    return null;\n  } else {\n    var isFull = items.length === maxSize; // short circuit if full and the additional item does not come before the last item\n\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add;\n    }\n    var lo = 0,\n      hi = items.length;\n    while (lo < hi) {\n      var mid = lo + hi >>> 1;\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1;\n      } else {\n        hi = mid;\n      }\n    }\n    items.splice(lo, 0, add);\n    return isFull ? items.pop() : null;\n  }\n}\nvar MAX_SAFE_INTEGER = /*#__PURE__*/JSBI.BigInt(Number.MAX_SAFE_INTEGER);\nvar ZERO = /*#__PURE__*/JSBI.BigInt(0);\nvar ONE = /*#__PURE__*/JSBI.BigInt(1);\nvar TWO = /*#__PURE__*/JSBI.BigInt(2);\n/**\r\n * Computes floor(sqrt(value))\r\n * @param value the value for which to compute the square root, rounded down\r\n */\n\nfunction sqrt(value) {\n  !JSBI.greaterThanOrEqual(value, ZERO) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'NEGATIVE') : invariant(false) : void 0; // rely on built in sqrt if possible\n\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))));\n  }\n  var z;\n  var x;\n  z = value;\n  x = JSBI.add(JSBI.divide(value, TWO), ONE);\n  while (JSBI.lessThan(x, z)) {\n    z = x;\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO);\n  }\n  return z;\n}\nexport { CurrencyAmount, Ether, Fraction, MaxUint256, NativeCurrency, Percent, Price, Rounding, SupportedChainId, Token, TradeType, WETH9, computePriceImpact, sortedInsert, sqrt, validateAndParseAddress };","map":{"version":3,"names":["JSBI","invariant","_Decimal","_Big","toFormat","getAddress","SupportedChainId","TradeType","Rounding","MaxUint256","BigInt","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","Constructor","protoProps","staticProps","prototype","_inheritsLoose","subClass","superClass","create","constructor","__proto__","_toSignificantRoundin","_toFixedRounding","Decimal","Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","Error","_proto","invert","add","other","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","process","env","NODE_ENV","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","get","remainder","Big$1","CurrencyAmount","_Fraction","currency","_this","call","lessThanOrEqual","decimalScale","exponentiate","decimals","fromRawAmount","rawAmount","fromFractionalAmount","equals","added","subtracted","multiplied","divided","toExact","isToken","wrapped","ONE_HUNDRED","toPercent","fraction","Percent","apply","arguments","isPercent","Price","baseCurrency","quoteCurrency","_len","args","Array","_key","result","quoteAmount","baseAmount","_ref","scalar","quote","currencyAmount","adjustedForDecimals","BaseCurrency","chainId","symbol","name","isSafeInteger","NativeCurrency","_BaseCurrency","isNative","validateAndParseAddress","address","error","startsWith0xLen42HexRegex","checkValidAddress","test","Token","bypassChecksum","toLowerCase","sortsBefore","_WETH","WETH9","Ether","_NativeCurrency","onChain","_this$_etherCache$cha","_etherCache","weth9","computePriceImpact","midPrice","inputAmount","outputAmount","quotedOutputAmount","priceImpact","sortedInsert","items","maxSize","comparator","push","isFull","lo","hi","mid","splice","pop","MAX_SAFE_INTEGER","ZERO","ONE","TWO","sqrt","value","greaterThanOrEqual","Math","floor","toNumber","z","x"],"sources":["/Users/lijinxing/Documents/hipo-dapp-bamboo/node_modules/@uniswap/sdk-core/dist/sdk-core.esm.js"],"sourcesContent":["import JSBI from 'jsbi';\nimport invariant from 'tiny-invariant';\nimport _Decimal from 'decimal.js-light';\nimport _Big from 'big.js';\nimport toFormat from 'toformat';\nimport { getAddress } from '@ethersproject/address';\n\nvar SupportedChainId;\n\n(function (SupportedChainId) {\n  SupportedChainId[SupportedChainId[\"MAINNET\"] = 1] = \"MAINNET\";\n  SupportedChainId[SupportedChainId[\"GOERLI\"] = 5] = \"GOERLI\";\n  SupportedChainId[SupportedChainId[\"ARBITRUM_ONE\"] = 42161] = \"ARBITRUM_ONE\";\n  SupportedChainId[SupportedChainId[\"ARBITRUM_GOERLI\"] = 421613] = \"ARBITRUM_GOERLI\";\n  SupportedChainId[SupportedChainId[\"OPTIMISM\"] = 10] = \"OPTIMISM\";\n  SupportedChainId[SupportedChainId[\"OPTIMISM_GOERLI\"] = 420] = \"OPTIMISM_GOERLI\";\n  SupportedChainId[SupportedChainId[\"POLYGON\"] = 137] = \"POLYGON\";\n  SupportedChainId[SupportedChainId[\"POLYGON_MUMBAI\"] = 80001] = \"POLYGON_MUMBAI\";\n  SupportedChainId[SupportedChainId[\"CELO\"] = 42220] = \"CELO\";\n  SupportedChainId[SupportedChainId[\"CELO_ALFAJORES\"] = 44787] = \"CELO_ALFAJORES\";\n  SupportedChainId[SupportedChainId[\"BNB\"] = 56] = \"BNB\";\n})(SupportedChainId || (SupportedChainId = {}));\n\nvar TradeType;\n\n(function (TradeType) {\n  TradeType[TradeType[\"EXACT_INPUT\"] = 0] = \"EXACT_INPUT\";\n  TradeType[TradeType[\"EXACT_OUTPUT\"] = 1] = \"EXACT_OUTPUT\";\n})(TradeType || (TradeType = {}));\n\nvar Rounding;\n\n(function (Rounding) {\n  Rounding[Rounding[\"ROUND_DOWN\"] = 0] = \"ROUND_DOWN\";\n  Rounding[Rounding[\"ROUND_HALF_UP\"] = 1] = \"ROUND_HALF_UP\";\n  Rounding[Rounding[\"ROUND_UP\"] = 2] = \"ROUND_UP\";\n})(Rounding || (Rounding = {}));\n\nvar MaxUint256 = /*#__PURE__*/JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nvar _toSignificantRoundin, _toFixedRounding;\nvar Decimal = /*#__PURE__*/toFormat(_Decimal);\nvar Big = /*#__PURE__*/toFormat(_Big);\nvar toSignificantRounding = (_toSignificantRoundin = {}, _toSignificantRoundin[Rounding.ROUND_DOWN] = Decimal.ROUND_DOWN, _toSignificantRoundin[Rounding.ROUND_HALF_UP] = Decimal.ROUND_HALF_UP, _toSignificantRoundin[Rounding.ROUND_UP] = Decimal.ROUND_UP, _toSignificantRoundin);\nvar toFixedRounding = (_toFixedRounding = {}, _toFixedRounding[Rounding.ROUND_DOWN] = 0, _toFixedRounding[Rounding.ROUND_HALF_UP] = 1, _toFixedRounding[Rounding.ROUND_UP] = 3, _toFixedRounding);\nvar Fraction = /*#__PURE__*/function () {\n  function Fraction(numerator, denominator) {\n    if (denominator === void 0) {\n      denominator = JSBI.BigInt(1);\n    }\n\n    this.numerator = JSBI.BigInt(numerator);\n    this.denominator = JSBI.BigInt(denominator);\n  }\n\n  Fraction.tryParseFraction = function tryParseFraction(fractionish) {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string') return new Fraction(fractionish);\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish;\n    throw new Error('Could not parse fraction');\n  } // performs floor division\n  ;\n\n  var _proto = Fraction.prototype;\n\n  _proto.invert = function invert() {\n    return new Fraction(this.denominator, this.numerator);\n  };\n\n  _proto.add = function add(other) {\n    var otherParsed = Fraction.tryParseFraction(other);\n\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator);\n    }\n\n    return new Fraction(JSBI.add(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator)), JSBI.multiply(this.denominator, otherParsed.denominator));\n  };\n\n  _proto.subtract = function subtract(other) {\n    var otherParsed = Fraction.tryParseFraction(other);\n\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator);\n    }\n\n    return new Fraction(JSBI.subtract(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator)), JSBI.multiply(this.denominator, otherParsed.denominator));\n  };\n\n  _proto.lessThan = function lessThan(other) {\n    var otherParsed = Fraction.tryParseFraction(other);\n    return JSBI.lessThan(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));\n  };\n\n  _proto.equalTo = function equalTo(other) {\n    var otherParsed = Fraction.tryParseFraction(other);\n    return JSBI.equal(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));\n  };\n\n  _proto.greaterThan = function greaterThan(other) {\n    var otherParsed = Fraction.tryParseFraction(other);\n    return JSBI.greaterThan(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));\n  };\n\n  _proto.multiply = function multiply(other) {\n    var otherParsed = Fraction.tryParseFraction(other);\n    return new Fraction(JSBI.multiply(this.numerator, otherParsed.numerator), JSBI.multiply(this.denominator, otherParsed.denominator));\n  };\n\n  _proto.divide = function divide(other) {\n    var otherParsed = Fraction.tryParseFraction(other);\n    return new Fraction(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(this.denominator, otherParsed.numerator));\n  };\n\n  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {\n    if (format === void 0) {\n      format = {\n        groupSeparator: ''\n      };\n    }\n\n    if (rounding === void 0) {\n      rounding = Rounding.ROUND_HALF_UP;\n    }\n\n    !Number.isInteger(significantDigits) ? process.env.NODE_ENV !== \"production\" ? invariant(false, significantDigits + \" is not an integer.\") : invariant(false) : void 0;\n    !(significantDigits > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, significantDigits + \" is not positive.\") : invariant(false) : void 0;\n    Decimal.set({\n      precision: significantDigits + 1,\n      rounding: toSignificantRounding[rounding]\n    });\n    var quotient = new Decimal(this.numerator.toString()).div(this.denominator.toString()).toSignificantDigits(significantDigits);\n    return quotient.toFormat(quotient.decimalPlaces(), format);\n  };\n\n  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {\n    if (format === void 0) {\n      format = {\n        groupSeparator: ''\n      };\n    }\n\n    if (rounding === void 0) {\n      rounding = Rounding.ROUND_HALF_UP;\n    }\n\n    !Number.isInteger(decimalPlaces) ? process.env.NODE_ENV !== \"production\" ? invariant(false, decimalPlaces + \" is not an integer.\") : invariant(false) : void 0;\n    !(decimalPlaces >= 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, decimalPlaces + \" is negative.\") : invariant(false) : void 0;\n    Big.DP = decimalPlaces;\n    Big.RM = toFixedRounding[rounding];\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format);\n  }\n  /**\r\n   * Helper method for converting any super class back to a fraction\r\n   */\n  ;\n\n  _createClass(Fraction, [{\n    key: \"quotient\",\n    get: function get() {\n      return JSBI.divide(this.numerator, this.denominator);\n    } // remainder after floor division\n\n  }, {\n    key: \"remainder\",\n    get: function get() {\n      return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator);\n    }\n  }, {\n    key: \"asFraction\",\n    get: function get() {\n      return new Fraction(this.numerator, this.denominator);\n    }\n  }]);\n\n  return Fraction;\n}();\n\nvar Big$1 = /*#__PURE__*/toFormat(_Big);\nvar CurrencyAmount = /*#__PURE__*/function (_Fraction) {\n  _inheritsLoose(CurrencyAmount, _Fraction);\n\n  function CurrencyAmount(currency, numerator, denominator) {\n    var _this;\n\n    _this = _Fraction.call(this, numerator, denominator) || this;\n    !JSBI.lessThanOrEqual(_this.quotient, MaxUint256) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'AMOUNT') : invariant(false) : void 0;\n    _this.currency = currency;\n    _this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals));\n    return _this;\n  }\n  /**\r\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\r\n   * @param currency the currency in the amount\r\n   * @param rawAmount the raw token or ether amount\r\n   */\n\n\n  CurrencyAmount.fromRawAmount = function fromRawAmount(currency, rawAmount) {\n    return new CurrencyAmount(currency, rawAmount);\n  }\n  /**\r\n   * Construct a currency amount with a denominator that is not equal to 1\r\n   * @param currency the currency\r\n   * @param numerator the numerator of the fractional token amount\r\n   * @param denominator the denominator of the fractional token amount\r\n   */\n  ;\n\n  CurrencyAmount.fromFractionalAmount = function fromFractionalAmount(currency, numerator, denominator) {\n    return new CurrencyAmount(currency, numerator, denominator);\n  };\n\n  var _proto = CurrencyAmount.prototype;\n\n  _proto.add = function add(other) {\n    !this.currency.equals(other.currency) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'CURRENCY') : invariant(false) : void 0;\n\n    var added = _Fraction.prototype.add.call(this, other);\n\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator);\n  };\n\n  _proto.subtract = function subtract(other) {\n    !this.currency.equals(other.currency) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'CURRENCY') : invariant(false) : void 0;\n\n    var subtracted = _Fraction.prototype.subtract.call(this, other);\n\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator);\n  };\n\n  _proto.multiply = function multiply(other) {\n    var multiplied = _Fraction.prototype.multiply.call(this, other);\n\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator);\n  };\n\n  _proto.divide = function divide(other) {\n    var divided = _Fraction.prototype.divide.call(this, other);\n\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator);\n  };\n\n  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {\n    if (significantDigits === void 0) {\n      significantDigits = 6;\n    }\n\n    if (rounding === void 0) {\n      rounding = Rounding.ROUND_DOWN;\n    }\n\n    return _Fraction.prototype.divide.call(this, this.decimalScale).toSignificant(significantDigits, format, rounding);\n  };\n\n  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {\n    if (decimalPlaces === void 0) {\n      decimalPlaces = this.currency.decimals;\n    }\n\n    if (rounding === void 0) {\n      rounding = Rounding.ROUND_DOWN;\n    }\n\n    !(decimalPlaces <= this.currency.decimals) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'DECIMALS') : invariant(false) : void 0;\n    return _Fraction.prototype.divide.call(this, this.decimalScale).toFixed(decimalPlaces, format, rounding);\n  };\n\n  _proto.toExact = function toExact(format) {\n    if (format === void 0) {\n      format = {\n        groupSeparator: ''\n      };\n    }\n\n    Big$1.DP = this.currency.decimals;\n    return new Big$1(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format);\n  };\n\n  _createClass(CurrencyAmount, [{\n    key: \"wrapped\",\n    get: function get() {\n      if (this.currency.isToken) return this;\n      return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator);\n    }\n  }]);\n\n  return CurrencyAmount;\n}(Fraction);\n\nvar ONE_HUNDRED = /*#__PURE__*/new Fraction( /*#__PURE__*/JSBI.BigInt(100));\n/**\r\n * Converts a fraction to a percent\r\n * @param fraction the fraction to convert\r\n */\n\nfunction toPercent(fraction) {\n  return new Percent(fraction.numerator, fraction.denominator);\n}\n\nvar Percent = /*#__PURE__*/function (_Fraction) {\n  _inheritsLoose(Percent, _Fraction);\n\n  function Percent() {\n    var _this;\n\n    _this = _Fraction.apply(this, arguments) || this;\n    /**\r\n     * This boolean prevents a fraction from being interpreted as a Percent\r\n     */\n\n    _this.isPercent = true;\n    return _this;\n  }\n\n  var _proto = Percent.prototype;\n\n  _proto.add = function add(other) {\n    return toPercent(_Fraction.prototype.add.call(this, other));\n  };\n\n  _proto.subtract = function subtract(other) {\n    return toPercent(_Fraction.prototype.subtract.call(this, other));\n  };\n\n  _proto.multiply = function multiply(other) {\n    return toPercent(_Fraction.prototype.multiply.call(this, other));\n  };\n\n  _proto.divide = function divide(other) {\n    return toPercent(_Fraction.prototype.divide.call(this, other));\n  };\n\n  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {\n    if (significantDigits === void 0) {\n      significantDigits = 5;\n    }\n\n    return _Fraction.prototype.multiply.call(this, ONE_HUNDRED).toSignificant(significantDigits, format, rounding);\n  };\n\n  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {\n    if (decimalPlaces === void 0) {\n      decimalPlaces = 2;\n    }\n\n    return _Fraction.prototype.multiply.call(this, ONE_HUNDRED).toFixed(decimalPlaces, format, rounding);\n  };\n\n  return Percent;\n}(Fraction);\n\nvar Price = /*#__PURE__*/function (_Fraction) {\n  _inheritsLoose(Price, _Fraction);\n\n  /**\r\n   * Construct a price, either with the base and quote currency amount, or the\r\n   * @param args\r\n   */\n  function Price() {\n    var _this;\n\n    var baseCurrency, quoteCurrency, denominator, numerator;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (args.length === 4) {\n      baseCurrency = args[0];\n      quoteCurrency = args[1];\n      denominator = args[2];\n      numerator = args[3];\n    } else {\n      var result = args[0].quoteAmount.divide(args[0].baseAmount);\n      var _ref = [args[0].baseAmount.currency, args[0].quoteAmount.currency, result.denominator, result.numerator];\n      baseCurrency = _ref[0];\n      quoteCurrency = _ref[1];\n      denominator = _ref[2];\n      numerator = _ref[3];\n    }\n\n    _this = _Fraction.call(this, numerator, denominator) || this;\n    _this.baseCurrency = baseCurrency;\n    _this.quoteCurrency = quoteCurrency;\n    _this.scalar = new Fraction(JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)), JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals)));\n    return _this;\n  }\n  /**\r\n   * Flip the price, switching the base and quote currency\r\n   */\n\n\n  var _proto = Price.prototype;\n\n  _proto.invert = function invert() {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator);\n  }\n  /**\r\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\r\n   * @param other the other price\r\n   */\n  ;\n\n  _proto.multiply = function multiply(other) {\n    !this.quoteCurrency.equals(other.baseCurrency) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n\n    var fraction = _Fraction.prototype.multiply.call(this, other);\n\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator);\n  }\n  /**\r\n   * Return the amount of quote currency corresponding to a given amount of the base currency\r\n   * @param currencyAmount the amount of base currency to quote against the price\r\n   */\n  ;\n\n  _proto.quote = function quote(currencyAmount) {\n    !currencyAmount.currency.equals(this.baseCurrency) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n\n    var result = _Fraction.prototype.multiply.call(this, currencyAmount);\n\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator);\n  }\n  /**\r\n   * Get the value scaled by decimals for formatting\r\n   * @private\r\n   */\n  ;\n\n  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {\n    if (significantDigits === void 0) {\n      significantDigits = 6;\n    }\n\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding);\n  };\n\n  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {\n    if (decimalPlaces === void 0) {\n      decimalPlaces = 4;\n    }\n\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding);\n  };\n\n  _createClass(Price, [{\n    key: \"adjustedForDecimals\",\n    get: function get() {\n      return _Fraction.prototype.multiply.call(this, this.scalar);\n    }\n  }]);\n\n  return Price;\n}(Fraction);\n\n/**\r\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\r\n */\n\nvar BaseCurrency =\n/**\r\n * Constructs an instance of the base class `BaseCurrency`.\r\n * @param chainId the chain ID on which this currency resides\r\n * @param decimals decimals of the currency\r\n * @param symbol symbol of the currency\r\n * @param name of the currency\r\n */\nfunction BaseCurrency(chainId, decimals, symbol, name) {\n  !Number.isSafeInteger(chainId) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'CHAIN_ID') : invariant(false) : void 0;\n  !(decimals >= 0 && decimals < 255 && Number.isInteger(decimals)) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'DECIMALS') : invariant(false) : void 0;\n  this.chainId = chainId;\n  this.decimals = decimals;\n  this.symbol = symbol;\n  this.name = name;\n};\n\n/**\r\n * Represents the native currency of the chain on which it resides, e.g.\r\n */\n\nvar NativeCurrency = /*#__PURE__*/function (_BaseCurrency) {\n  _inheritsLoose(NativeCurrency, _BaseCurrency);\n\n  function NativeCurrency() {\n    var _this;\n\n    _this = _BaseCurrency.apply(this, arguments) || this;\n    _this.isNative = true;\n    _this.isToken = false;\n    return _this;\n  }\n\n  return NativeCurrency;\n}(BaseCurrency);\n\n/**\r\n * Validates an address and returns the parsed (checksummed) version of that address\r\n * @param address the unchecksummed hex address\r\n */\n\nfunction validateAndParseAddress(address) {\n  try {\n    return getAddress(address);\n  } catch (error) {\n    throw new Error(address + \" is not a valid address.\");\n  }\n} // Checks a string starts with 0x, is 42 characters long and contains only hex characters after 0x\n\nvar startsWith0xLen42HexRegex = /^0x[0-9a-fA-F]{40}$/;\n/**\r\n * Checks if an address is valid by checking 0x prefix, length === 42 and hex encoding.\r\n * @param address the unchecksummed hex address\r\n */\n\nfunction checkValidAddress(address) {\n  if (startsWith0xLen42HexRegex.test(address)) {\n    return address;\n  }\n\n  throw new Error(address + \" is not a valid address.\");\n}\n\n/**\r\n * Represents an ERC20 token with a unique address and some metadata.\r\n */\n\nvar Token = /*#__PURE__*/function (_BaseCurrency) {\n  _inheritsLoose(Token, _BaseCurrency);\n\n  /**\r\n   *\r\n   * @param chainId {@link BaseCurrency#chainId}\r\n   * @param address The contract address on the chain on which this token lives\r\n   * @param decimals {@link BaseCurrency#decimals}\r\n   * @param symbol {@link BaseCurrency#symbol}\r\n   * @param name {@link BaseCurrency#name}\r\n   * @param bypassChecksum If true it only checks for length === 42, startsWith 0x and contains only hex characters\r\n   */\n  function Token(chainId, address, decimals, symbol, name, bypassChecksum) {\n    var _this;\n\n    _this = _BaseCurrency.call(this, chainId, decimals, symbol, name) || this;\n    _this.isNative = false;\n    _this.isToken = true;\n\n    if (bypassChecksum) {\n      _this.address = checkValidAddress(address);\n    } else {\n      _this.address = validateAndParseAddress(address);\n    }\n\n    return _this;\n  }\n  /**\r\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\r\n   * @param other other token to compare\r\n   */\n\n\n  var _proto = Token.prototype;\n\n  _proto.equals = function equals(other) {\n    return other.isToken && this.chainId === other.chainId && this.address.toLowerCase() === other.address.toLowerCase();\n  }\n  /**\r\n   * Returns true if the address of this token sorts before the address of the other token\r\n   * @param other other token to compare\r\n   * @throws if the tokens have the same address\r\n   * @throws if the tokens are on different chains\r\n   */\n  ;\n\n  _proto.sortsBefore = function sortsBefore(other) {\n    !(this.chainId === other.chainId) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'CHAIN_IDS') : invariant(false) : void 0;\n    !(this.address.toLowerCase() !== other.address.toLowerCase()) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ADDRESSES') : invariant(false) : void 0;\n    return this.address.toLowerCase() < other.address.toLowerCase();\n  }\n  /**\r\n   * Return this token, which does not need to be wrapped\r\n   */\n  ;\n\n  _createClass(Token, [{\n    key: \"wrapped\",\n    get: function get() {\n      return this;\n    }\n  }]);\n\n  return Token;\n}(BaseCurrency);\n\nvar _WETH;\n/**\r\n * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped\r\n */\n\nvar WETH9 = (_WETH = {}, _WETH[1] = /*#__PURE__*/new Token(1, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'), _WETH[3] = /*#__PURE__*/new Token(3, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'), _WETH[4] = /*#__PURE__*/new Token(4, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'), _WETH[5] = /*#__PURE__*/new Token(5, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'), _WETH[42] = /*#__PURE__*/new Token(42, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'), _WETH[10] = /*#__PURE__*/new Token(10, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'), _WETH[69] = /*#__PURE__*/new Token(69, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'), _WETH[42161] = /*#__PURE__*/new Token(42161, '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1', 18, 'WETH', 'Wrapped Ether'), _WETH[421611] = /*#__PURE__*/new Token(421611, '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681', 18, 'WETH', 'Wrapped Ether'), _WETH);\n\n/**\r\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\r\n */\n\nvar Ether = /*#__PURE__*/function (_NativeCurrency) {\n  _inheritsLoose(Ether, _NativeCurrency);\n\n  function Ether(chainId) {\n    return _NativeCurrency.call(this, chainId, 18, 'ETH', 'Ether') || this;\n  }\n\n  Ether.onChain = function onChain(chainId) {\n    var _this$_etherCache$cha;\n\n    return (_this$_etherCache$cha = this._etherCache[chainId]) != null ? _this$_etherCache$cha : this._etherCache[chainId] = new Ether(chainId);\n  };\n\n  var _proto = Ether.prototype;\n\n  _proto.equals = function equals(other) {\n    return other.isNative && other.chainId === this.chainId;\n  };\n\n  _createClass(Ether, [{\n    key: \"wrapped\",\n    get: function get() {\n      var weth9 = WETH9[this.chainId];\n      !!!weth9 ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'WRAPPED') : invariant(false) : void 0;\n      return weth9;\n    }\n  }]);\n\n  return Ether;\n}(NativeCurrency);\nEther._etherCache = {};\n\n/**\r\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\r\n * @param midPrice mid price before the trade\r\n * @param inputAmount the input amount of the trade\r\n * @param outputAmount the output amount of the trade\r\n */\n\nfunction computePriceImpact(midPrice, inputAmount, outputAmount) {\n  var quotedOutputAmount = midPrice.quote(inputAmount); // calculate price impact := (exactQuote - outputAmount) / exactQuote\n\n  var priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount);\n  return new Percent(priceImpact.numerator, priceImpact.denominator);\n}\n\n// `maxSize` by removing the last item\n\nfunction sortedInsert(items, add, maxSize, comparator) {\n  !(maxSize > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'MAX_SIZE_ZERO') : invariant(false) : void 0; // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n\n  !(items.length <= maxSize) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ITEMS_SIZE') : invariant(false) : void 0; // short circuit first item add\n\n  if (items.length === 0) {\n    items.push(add);\n    return null;\n  } else {\n    var isFull = items.length === maxSize; // short circuit if full and the additional item does not come before the last item\n\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add;\n    }\n\n    var lo = 0,\n        hi = items.length;\n\n    while (lo < hi) {\n      var mid = lo + hi >>> 1;\n\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1;\n      } else {\n        hi = mid;\n      }\n    }\n\n    items.splice(lo, 0, add);\n    return isFull ? items.pop() : null;\n  }\n}\n\nvar MAX_SAFE_INTEGER = /*#__PURE__*/JSBI.BigInt(Number.MAX_SAFE_INTEGER);\nvar ZERO = /*#__PURE__*/JSBI.BigInt(0);\nvar ONE = /*#__PURE__*/JSBI.BigInt(1);\nvar TWO = /*#__PURE__*/JSBI.BigInt(2);\n/**\r\n * Computes floor(sqrt(value))\r\n * @param value the value for which to compute the square root, rounded down\r\n */\n\nfunction sqrt(value) {\n  !JSBI.greaterThanOrEqual(value, ZERO) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'NEGATIVE') : invariant(false) : void 0; // rely on built in sqrt if possible\n\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))));\n  }\n\n  var z;\n  var x;\n  z = value;\n  x = JSBI.add(JSBI.divide(value, TWO), ONE);\n\n  while (JSBI.lessThan(x, z)) {\n    z = x;\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO);\n  }\n\n  return z;\n}\n\nexport { CurrencyAmount, Ether, Fraction, MaxUint256, NativeCurrency, Percent, Price, Rounding, SupportedChainId, Token, TradeType, WETH9, computePriceImpact, sortedInsert, sqrt, validateAndParseAddress };\n//# sourceMappingURL=sdk-core.esm.js.map\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}