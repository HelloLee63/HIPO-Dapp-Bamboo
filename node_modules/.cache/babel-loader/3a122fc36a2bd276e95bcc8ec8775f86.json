{"ast":null,"code":"import { InjectedConnector } from \"@web3-react/injected-connector\";\nexport class MetamaskConnector extends InjectedConnector {\n  async addChain() {\n    for (var _len = arguments.length, infos = new Array(_len), _key = 0; _key < _len; _key++) {\n      infos[_key] = arguments[_key];\n    }\n    return this.getProvider().then(provider => {\n      return provider.request({\n        method: 'wallet_addEthereumChain',\n        params: infos\n      });\n    });\n  }\n  async switchChain(info) {\n    return this.getProvider().then(provider => {\n      return provider.request({\n        method: 'wallet_switchEthereumChain',\n        params: [info]\n      });\n    });\n  }\n  async addToken(info) {\n    return this.getProvider().then(provider => {\n      return provider.request({\n        method: 'wallet_watchAsset',\n        params: info\n      });\n    });\n  }\n  async getChianId() {\n    return this.getProvider().then(provider => {\n      return provider.request({\n        method: 'eth_chainId'\n      });\n    });\n  }\n}\nfunction handleErrors(error) {\n  switch (error === null || error === void 0 ? void 0 : error.code) {\n    case -32602:\n      // notification.error({\n      //   message: error?.message,\n      // })\n      alert(error === null || error === void 0 ? void 0 : error.message);\n      break;\n    default:\n      break;\n  }\n}\nconst MetamaskWalletConfig = {\n  id: 'metamask',\n  logo: [],\n  name: 'Metamask',\n  factory(chain) {\n    return new MetamaskConnector({\n      supportedChainIds: [chain.meta.chainId]\n    });\n  },\n  onConnect(connector) {\n    connector === null || connector === void 0 ? void 0 : connector.getProvider().then(provider => {\n      provider.addListener('send::error', handleErrors);\n    });\n  },\n  onDisconnect(connector) {\n    connector === null || connector === void 0 ? void 0 : connector.getProvider().then(provider => {\n      provider.removeListener('send::error', handleErrors);\n    });\n  },\n  onError(error) {\n    switch (error === null || error === void 0 ? void 0 : error.code) {\n      case -32002:\n        return new Error('MetaMask is already processing. Please verify MetaMask extension.');\n      default:\n        break;\n    }\n    return undefined;\n  }\n};\nexport default MetamaskWalletConfig;","map":{"version":3,"names":["InjectedConnector","MetamaskConnector","addChain","_len","arguments","length","infos","Array","_key","getProvider","then","provider","request","method","params","switchChain","info","addToken","getChianId","handleErrors","error","code","alert","message","MetamaskWalletConfig","id","logo","name","factory","chain","supportedChainIds","meta","chainId","onConnect","connector","addListener","onDisconnect","removeListener","onError","Error","undefined"],"sources":["/Users/lijinxing/Documents/hipo-dapp-bamboo/src/wallet/connectors/metamask/MetamaskConnector.js"],"sourcesContent":["import { InjectedConnector } from \"@web3-react/injected-connector\";\n\nexport class MetamaskConnector extends InjectedConnector {\n  async addChain(...infos) {\n    return this.getProvider().then((provider) => {\n      return provider.request({\n        method: 'wallet_addEthereumChain',\n        params: infos,\n      })\n    })\n  }\n\n  async switchChain(info) {\n    return this.getProvider().then((provider) => {\n      return provider.request({\n        method: 'wallet_switchEthereumChain',\n        params: [info],\n      });\n    });\n  }\n\n  async addToken(info) {\n    return this.getProvider().then((provider) => {\n      return provider.request({\n        method: 'wallet_watchAsset',\n        params: info,\n      });\n    });\n  }\n\n  async getChianId() {\n    return this.getProvider().then((provider) => {\n      return provider.request({\n        method: 'eth_chainId'\n      });\n    });\n  }\n}\n\nfunction handleErrors(error) {\n  switch (error?.code) {\n    case -32602:\n      // notification.error({\n      //   message: error?.message,\n      // })\n      alert(error?.message)\n      break\n    default:\n      break\n  }     \n}\n\nconst MetamaskWalletConfig = {\n  id: 'metamask',\n  logo: [],\n  name: 'Metamask',\n  factory (chain) {\n    return new MetamaskConnector({\n      supportedChainIds: [chain.meta.chainId],\n    })\n  },\n\n  onConnect(connector) {\n    connector?.getProvider().then(provider => {\n      provider.addListener('send::error', handleErrors)\n    })\n  },\n\n  onDisconnect(connector) {\n    connector?.getProvider().then(provider => {\n      provider.removeListener('send::error', handleErrors)\n    })\n  },\n\n  onError(error) {\n    switch (error?.code) {\n      case -32002:\n        return new Error('MetaMask is already processing. Please verify MetaMask extension.')\n      default:\n        break\n    }\n\n    return undefined\n  },\n}\n\nexport default MetamaskWalletConfig"],"mappings":"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"},"metadata":{},"sourceType":"module"}