{"ast":null,"code":"var _jsxFileName = \"/Users/lijinxing/Documents/hipo-dapp-bamboo/src/web3/components/TxBtn.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Web3 from 'web3';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { Contract } from 'web3-eth-contract';\nimport { ERC20_ABI, ERC20_ADDRESS } from './constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TxBtn = () => {\n  _s();\n  const [walletConnected, setWalletConnected] = useState(false);\n  const [account, setAccount] = useState(null);\n  const [web3, setWeb3] = useState(null);\n  const [balance, setBalance] = useState(0);\n  const [isApproved, setIsApproved] = useState(false);\n  useEffect(() => {\n    async function init() {\n      const provider = await detectEthereumProvider();\n      if (provider) {\n        const web3Instance = new Web3(provider);\n        setWeb3(web3Instance);\n        const accounts = await web3Instance.eth.getAccounts();\n        if (accounts.length) {\n          setWalletConnected(true);\n          setAccount(accounts[0]);\n          const balance = await web3Instance.eth.getBalance(accounts[0]);\n          setBalance(parseFloat(web3Instance.utils.fromWei(balance)));\n\n          // 检查用户是否已调用 approve 方法\n          const tokenContract = new web3Instance.eth.Contract(ERC20_ABI, ERC20_ADDRESS);\n          const allowance = await tokenContract.methods.allowance(accounts[0], YOUR_CONTRACT_ADDRESS).call();\n          setIsApproved(parseFloat(allowance) > 0);\n        }\n      }\n    }\n    init();\n  }, []);\n  const connectWallet = async () => {\n    if (!walletConnected) {\n      const provider = await detectEthereumProvider();\n      if (provider) {\n        try {\n          const accounts = await provider.request({\n            method: 'eth_requestAccounts'\n          });\n          setWalletConnected(true);\n          setAccount(accounts[0]);\n        } catch (error) {\n          console.error(error);\n        }\n      }\n    }\n  };\n  const approveToken = async () => {\n    const tokenContract = new web3.eth.Contract(ERC20_ABI, ERC20_ADDRESS);\n    const amountToApprove = web3.utils.toWei('100'); // 设置需要批准的金额\n\n    try {\n      await tokenContract.methods.approve(YOUR_CONTRACT_ADDRESS, amountToApprove).send({\n        from: account\n      });\n      setIsApproved(true);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const submitTransaction = async () => {\n    // 在这里添加提交交易的代码\n  };\n  const handleClick = () => {\n    if (!walletConnected) {\n      connectWallet();\n    } else if (!isApproved) {\n      approveToken();\n    } else if (balance <= 0) {\n      alert('余额不足');\n    } else {\n      submitTransaction();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: handleClick,\n    children: walletConnected ? isApproved ? '提交交易' : '批准代币' : '连接钱包'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n_s(TxBtn, \"MpEjp4njzKFlum3wgPqG4jQ5Yyg=\");\n_c = TxBtn;\nexport default TxBtn;\nvar _c;\n$RefreshReg$(_c, \"TxBtn\");","map":{"version":3,"names":["React","useState","useEffect","Web3","detectEthereumProvider","Contract","ERC20_ABI","ERC20_ADDRESS","jsxDEV","_jsxDEV","TxBtn","_s","walletConnected","setWalletConnected","account","setAccount","web3","setWeb3","balance","setBalance","isApproved","setIsApproved","init","provider","web3Instance","accounts","eth","getAccounts","length","getBalance","parseFloat","utils","fromWei","tokenContract","allowance","methods","YOUR_CONTRACT_ADDRESS","call","connectWallet","request","method","error","console","approveToken","amountToApprove","toWei","approve","send","from","submitTransaction","handleClick","alert","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/lijinxing/Documents/hipo-dapp-bamboo/src/web3/components/TxBtn.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Web3 from 'web3';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { Contract } from 'web3-eth-contract';\nimport { ERC20_ABI, ERC20_ADDRESS } from './constants';\n\nconst TxBtn = () => {\n  const [walletConnected, setWalletConnected] = useState(false);\n  const [account, setAccount] = useState(null);\n  const [web3, setWeb3] = useState(null);\n  const [balance, setBalance] = useState(0);\n  const [isApproved, setIsApproved] = useState(false);\n\n  useEffect(() => {\n    async function init() {\n      const provider = await detectEthereumProvider();\n\n      if (provider) {\n        const web3Instance = new Web3(provider);\n        setWeb3(web3Instance);\n\n        const accounts = await web3Instance.eth.getAccounts();\n        if (accounts.length) {\n          setWalletConnected(true);\n          setAccount(accounts[0]);\n\n          const balance = await web3Instance.eth.getBalance(accounts[0]);\n          setBalance(parseFloat(web3Instance.utils.fromWei(balance)));\n\n          // 检查用户是否已调用 approve 方法\n          const tokenContract = new web3Instance.eth.Contract(ERC20_ABI, ERC20_ADDRESS);\n          const allowance = await tokenContract.methods.allowance(accounts[0], YOUR_CONTRACT_ADDRESS).call();\n          setIsApproved(parseFloat(allowance) > 0);\n        }\n      }\n    }\n\n    init();\n  }, []);\n\n  const connectWallet = async () => {\n    if (!walletConnected) {\n      const provider = await detectEthereumProvider();\n\n      if (provider) {\n        try {\n          const accounts = await provider.request({ method: 'eth_requestAccounts' });\n          setWalletConnected(true);\n          setAccount(accounts[0]);\n        } catch (error) {\n          console.error(error);\n        }\n      }\n    }\n  };\n\n  const approveToken = async () => {\n    const tokenContract = new web3.eth.Contract(ERC20_ABI, ERC20_ADDRESS);\n    const amountToApprove = web3.utils.toWei('100'); // 设置需要批准的金额\n\n    try {\n      await tokenContract.methods.approve(YOUR_CONTRACT_ADDRESS, amountToApprove).send({ from: account });\n      setIsApproved(true);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const submitTransaction = async () => {\n    // 在这里添加提交交易的代码\n  };\n\n  const handleClick = () => {\n    if (!walletConnected) {\n      connectWallet();\n    } else if (!isApproved) {\n      approveToken();\n    } else if (balance <= 0) {\n      alert('余额不足');\n    } else {\n      submitTransaction();\n    }\n  };\n\n  return (\n    <button onClick={handleClick}>\n      {walletConnected ? (isApproved ? '提交交易' : '批准代币') : '连接钱包'}\n    </button>\n  );\n};\n\nexport default TxBtn;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}