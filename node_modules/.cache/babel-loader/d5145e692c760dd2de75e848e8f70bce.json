{"ast":null,"code":"var _jsxFileName = \"/Users/lijinxing/Documents/hipo-dapp-bamboo/src/web3/GlobalInfoProvider.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { useChain } from '../chain/ChainProvider';\nimport { useFinancingCenterContract } from './ContractManagerProvider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Context = /*#__PURE__*/createContext();\nexport function useGlobalInfo() {\n  _s();\n  return useContext(Context);\n}\n_s(useGlobalInfo, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst GlobalInfoProvider = _ref => {\n  _s2();\n  let {\n    children\n  } = _ref;\n  const {\n    activeChain\n  } = useChain();\n  const [globalInfo, setGlobalInfo] = useState();\n  const [isLoading, setIsLoading] = useState(false);\n  const financingCenterContract = useFinancingCenterContract('0x29Eaa93307896Ba122325F00415b3467379c7A4B');\n\n  // const getGlobalInfo = async function (financingCenter, signer) {\n  const getGlobalInfo = async function () {\n    console.log(\"context financingCenter\", activeChain.financingCenterContract);\n    let reserveMap = new Map();\n    let collateralNFTMap = new Map();\n    let slotMap = new Map();\n    let assetSet = new Set();\n    const totalSlots = await financingCenterContract.totalSlots();\n    for (let i = 0; i < totalSlots.toNumber(); i++) {\n      const slotId = await financingCenterContract.slotIdByIndex(i);\n      const slot = await financingCenterContract.slotById(slotId);\n      var slotObj = {\n        asset: slot.asset,\n        duration: slot.duration\n      };\n      slotMap.set(slotId, slotObj);\n      assetSet.add(slot.asset);\n    }\n    // for (var asset of assetSet) {\n    //   const reserve = await financingCenter.reserveByAsset(asset);\n    //   var assetToken = new Contract(asset, ERC20.abi, signer);\n    //   var reserveObj = {\n    //     name: await assetToken.name(),\n    //     symbol: await assetToken.symbol(),\n    //     reservePool: reserve.reservePool,\n    //     debtToken: reserve.debtToken,\n    //     creditToken: reserve.creditToken\n    //   };\n    //   reserveMap.set(asset, reserveObj);\n    // };\n\n    // const totalCollateralNFTAsset = await financingCenter.totalCollateralNFTAssets();\n    // console.log(\"totalCollateralNFTAsset:\", totalCollateralNFTAsset);\n    // for (let i = 0; i < totalCollateralNFTAsset.toNumber(); i++) {\n    //   const colAssetAddr = await financingCenter.collateralNFTAssetOfIndex(i);\n    //   console.log(\"colAssetAddr:\", colAssetAddr);\n    //   console.log(financingCenter.collateralNFTOf(colAssetAddr));\n    //   console.log(await financingCenter.collateralNFTOf(colAssetAddr));\n    //   const colNFTAddr = await financingCenter.collateralNFTOf(colAssetAddr);\n    //   console.log(\"colNFTAddr:\", colNFTAddr);\n    //   var colNFT = new Contract(colNFTAddr, ICollateralNFTArtifact.abi, signer);\n    //   var hipoNFT = new Contract(colNFTAddr, ERC721.abi, signer);\n    //   console.log(\"hipo nft name:\", await hipoNFT.name())\n    //   const colNFTName = await hipoNFT.name();\n    //   const totalSubTokens = await colNFT.totalSubTokens();\n    //   let subTokens = [];\n    //   for (let j = 0; j < totalSubTokens.toNumber(); j++) {\n    //     var subTokenAddr = await colNFT.subTokenByIndex(j);\n    //     var subTokenSymbol = await getSubTokenSymbol(colNFT, subTokenAddr, signer);\n    //     var subToken = {\n    //       name: colNFTName + \"-\" + subTokenSymbol,\n    //       symbol: subTokenSymbol,\n    //       address: subTokenAddr,\n    //       maxLtv: (await colNFT.getLtv(subTokenAddr)).div(BigNumber.from(100000)),\n    //       liquidationThreshold: await colNFT.getLiquidationThreshold(subTokenAddr)\n    //     };\n    //     subTokens.push(subToken);\n    //   }\n    //   var collateral = {\n    //     address: colNFT.address,\n    //     name: colNFTName,\n    //     symbol: await hipoNFT.symbol(),\n    //     subTokens: subTokens\n    //   };\n\n    //   collateralNFTMap.set(colAssetAddr, collateral);\n    // }\n    // console.log(\"collateralList\", collateralList);\n    var info = {\n      slots: slotMap\n      // reserves: reserveMap,\n      // collateralNFTs: collateralNFTMap\n    };\n\n    return info;\n  };\n  useEffect(() => {\n    const info = getGlobalInfo();\n    setGlobalInfo(info);\n  }, []);\n  const value = {\n    globalInfo,\n    isLoading\n  };\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n_s2(GlobalInfoProvider, \"WV9+HkguWQrX8TlRUsz6knyUV00=\", false, function () {\n  return [useChain, useFinancingCenterContract];\n});\n_c = GlobalInfoProvider;\nexport default GlobalInfoProvider;\nvar _c;\n$RefreshReg$(_c, \"GlobalInfoProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","useChain","useFinancingCenterContract","jsxDEV","_jsxDEV","Context","useGlobalInfo","_s","GlobalInfoProvider","_ref","_s2","children","activeChain","globalInfo","setGlobalInfo","isLoading","setIsLoading","financingCenterContract","getGlobalInfo","console","log","reserveMap","Map","collateralNFTMap","slotMap","assetSet","Set","totalSlots","i","toNumber","slotId","slotIdByIndex","slot","slotById","slotObj","asset","duration","set","add","info","slots","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/lijinxing/Documents/hipo-dapp-bamboo/src/web3/GlobalInfoProvider.jsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react'\nimport { useChain } from '../chain/ChainProvider'\nimport { useFinancingCenterContract } from './ContractManagerProvider'\n\nconst Context = createContext()\n\nexport function useGlobalInfo() {\n    return useContext(Context)\n}\n\nconst GlobalInfoProvider = ({children}) => {\n\n  const { activeChain } = useChain();\n  const [globalInfo, setGlobalInfo] = useState();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const financingCenterContract = useFinancingCenterContract('0x29Eaa93307896Ba122325F00415b3467379c7A4B');\n\n  // const getGlobalInfo = async function (financingCenter, signer) {\n  const getGlobalInfo = async function () {\n    console.log(\"context financingCenter\", activeChain.financingCenterContract);\n    let reserveMap = new Map();\n    let collateralNFTMap = new Map();\n    let slotMap = new Map();\n    let assetSet = new Set();\n    const totalSlots = await financingCenterContract.totalSlots();\n    for (let i = 0; i < totalSlots.toNumber(); i++) {\n      const slotId = await financingCenterContract.slotIdByIndex(i);\n      const slot = await financingCenterContract.slotById(slotId);\n      var slotObj = {\n        asset: slot.asset,\n        duration: slot.duration\n      };\n      slotMap.set(slotId, slotObj);\n      assetSet.add(slot.asset);\n    }\n    // for (var asset of assetSet) {\n    //   const reserve = await financingCenter.reserveByAsset(asset);\n    //   var assetToken = new Contract(asset, ERC20.abi, signer);\n    //   var reserveObj = {\n    //     name: await assetToken.name(),\n    //     symbol: await assetToken.symbol(),\n    //     reservePool: reserve.reservePool,\n    //     debtToken: reserve.debtToken,\n    //     creditToken: reserve.creditToken\n    //   };\n    //   reserveMap.set(asset, reserveObj);\n    // };\n  \n    // const totalCollateralNFTAsset = await financingCenter.totalCollateralNFTAssets();\n    // console.log(\"totalCollateralNFTAsset:\", totalCollateralNFTAsset);\n    // for (let i = 0; i < totalCollateralNFTAsset.toNumber(); i++) {\n    //   const colAssetAddr = await financingCenter.collateralNFTAssetOfIndex(i);\n    //   console.log(\"colAssetAddr:\", colAssetAddr);\n    //   console.log(financingCenter.collateralNFTOf(colAssetAddr));\n    //   console.log(await financingCenter.collateralNFTOf(colAssetAddr));\n    //   const colNFTAddr = await financingCenter.collateralNFTOf(colAssetAddr);\n    //   console.log(\"colNFTAddr:\", colNFTAddr);\n    //   var colNFT = new Contract(colNFTAddr, ICollateralNFTArtifact.abi, signer);\n    //   var hipoNFT = new Contract(colNFTAddr, ERC721.abi, signer);\n    //   console.log(\"hipo nft name:\", await hipoNFT.name())\n    //   const colNFTName = await hipoNFT.name();\n    //   const totalSubTokens = await colNFT.totalSubTokens();\n    //   let subTokens = [];\n    //   for (let j = 0; j < totalSubTokens.toNumber(); j++) {\n    //     var subTokenAddr = await colNFT.subTokenByIndex(j);\n    //     var subTokenSymbol = await getSubTokenSymbol(colNFT, subTokenAddr, signer);\n    //     var subToken = {\n    //       name: colNFTName + \"-\" + subTokenSymbol,\n    //       symbol: subTokenSymbol,\n    //       address: subTokenAddr,\n    //       maxLtv: (await colNFT.getLtv(subTokenAddr)).div(BigNumber.from(100000)),\n    //       liquidationThreshold: await colNFT.getLiquidationThreshold(subTokenAddr)\n    //     };\n    //     subTokens.push(subToken);\n    //   }\n    //   var collateral = {\n    //     address: colNFT.address,\n    //     name: colNFTName,\n    //     symbol: await hipoNFT.symbol(),\n    //     subTokens: subTokens\n    //   };\n      \n    //   collateralNFTMap.set(colAssetAddr, collateral);\n    // }\n    // console.log(\"collateralList\", collateralList);\n    var info = {\n        slots: slotMap,\n        // reserves: reserveMap,\n        // collateralNFTs: collateralNFTMap\n    };\n    return info;\n  }\n\n  useEffect(() => {\n    const info = getGlobalInfo();\n    setGlobalInfo(info);\n  }, [])\n\n  const value = {\n    globalInfo,\n    isLoading,\n  }\n\n  return (\n    <Context.Provider value={value}>{children}</Context.Provider>\n  )\n}\n\nexport default GlobalInfoProvider"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC7E,SAASC,QAAQ,QAAQ,wBAAwB;AACjD,SAASC,0BAA0B,QAAQ,2BAA2B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEtE,MAAMC,OAAO,gBAAGR,aAAa,EAAE;AAE/B,OAAO,SAASS,aAAaA,CAAA,EAAG;EAAAC,EAAA;EAC5B,OAAOT,UAAU,CAACO,OAAO,CAAC;AAC9B;AAACE,EAAA,CAFeD,aAAa;AAI7B,MAAME,kBAAkB,GAAGC,IAAA,IAAgB;EAAAC,GAAA;EAAA,IAAf;IAACC;EAAQ,CAAC,GAAAF,IAAA;EAEpC,MAAM;IAAEG;EAAY,CAAC,GAAGX,QAAQ,EAAE;EAClC,MAAM,CAACY,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,EAAE;EAC9C,MAAM,CAACe,SAAS,EAAEC,YAAY,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EAEjD,MAAMiB,uBAAuB,GAAGf,0BAA0B,CAAC,4CAA4C,CAAC;;EAExG;EACA,MAAMgB,aAAa,GAAG,eAAAA,CAAA,EAAkB;IACtCC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAER,WAAW,CAACK,uBAAuB,CAAC;IAC3E,IAAII,UAAU,GAAG,IAAIC,GAAG,EAAE;IAC1B,IAAIC,gBAAgB,GAAG,IAAID,GAAG,EAAE;IAChC,IAAIE,OAAO,GAAG,IAAIF,GAAG,EAAE;IACvB,IAAIG,QAAQ,GAAG,IAAIC,GAAG,EAAE;IACxB,MAAMC,UAAU,GAAG,MAAMV,uBAAuB,CAACU,UAAU,EAAE;IAC7D,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,UAAU,CAACE,QAAQ,EAAE,EAAED,CAAC,EAAE,EAAE;MAC9C,MAAME,MAAM,GAAG,MAAMb,uBAAuB,CAACc,aAAa,CAACH,CAAC,CAAC;MAC7D,MAAMI,IAAI,GAAG,MAAMf,uBAAuB,CAACgB,QAAQ,CAACH,MAAM,CAAC;MAC3D,IAAII,OAAO,GAAG;QACZC,KAAK,EAAEH,IAAI,CAACG,KAAK;QACjBC,QAAQ,EAAEJ,IAAI,CAACI;MACjB,CAAC;MACDZ,OAAO,CAACa,GAAG,CAACP,MAAM,EAAEI,OAAO,CAAC;MAC5BT,QAAQ,CAACa,GAAG,CAACN,IAAI,CAACG,KAAK,CAAC;IAC1B;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA,IAAII,IAAI,GAAG;MACPC,KAAK,EAAEhB;MACP;MACA;IACJ,CAAC;;IACD,OAAOe,IAAI;EACb,CAAC;EAEDxC,SAAS,CAAC,MAAM;IACd,MAAMwC,IAAI,GAAGrB,aAAa,EAAE;IAC5BJ,aAAa,CAACyB,IAAI,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,KAAK,GAAG;IACZ5B,UAAU;IACVE;EACF,CAAC;EAED,oBACEX,OAAA,CAACC,OAAO,CAACqC,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAA9B,QAAA,EAAEA;EAAQ;IAAAgC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAoB;AAEjE,CAAC;AAAApC,GAAA,CAjGKF,kBAAkB;EAAA,QAEEP,QAAQ,EAIAC,0BAA0B;AAAA;AAAA6C,EAAA,GANtDvC,kBAAkB;AAmGxB,eAAeA,kBAAkB;AAAA,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}