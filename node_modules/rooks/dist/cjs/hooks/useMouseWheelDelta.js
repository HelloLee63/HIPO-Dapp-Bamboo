'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('react');
var useFreshCallback = require('./useFreshCallback.js');

/**
 * useMouseWheelDelta
 * @description Tracks delta of mouse wheel
 * @see {@link https://rooks.vercel.app/docs/useMouseWheelDelta}
 */
const initialDelta = {
    delta: 0,
    velocity: 0,
    timeStamp: Date.now(),
};
function useMouseWheelDelta() {
    const [deltaState, setDeltaState] = react.useState(() => {
        return Object.assign(Object.assign({}, initialDelta), { timeStamp: Date.now() });
    });
    const lastDeltaRef = react.useRef(null);
    const handleWheel = react.useCallback((event) => {
        const currentTimestamp = event.timeStamp;
        const lastDelta = lastDeltaRef.current;
        if (lastDelta) {
            const delta = event.deltaY;
            const timeDelta = currentTimestamp - lastDelta.timeStamp;
            console.log(timeDelta);
            const velocity = timeDelta === 0 ? 0 : delta / timeDelta;
            console.log("delta", delta);
            console.log("timedelta", timeDelta);
            console.log("velocity", velocity);
            lastDeltaRef.current = deltaState;
            setDeltaState({
                delta,
                velocity,
                timeStamp: currentTimestamp,
            });
        }
        else {
            lastDeltaRef.current = {
                velocity: 0,
                delta: 0,
                timeStamp: event.timeStamp,
            };
            setDeltaState({
                delta: event.deltaY,
                velocity: 0,
                timeStamp: event.timeStamp,
            });
        }
    }, [deltaState]);
    const freshWheel = useFreshCallback.useFreshCallback(handleWheel);
    react.useEffect(() => {
        document.addEventListener("wheel", freshWheel);
        return () => {
            document.removeEventListener("wheel", freshWheel);
        };
    }, [freshWheel]);
    console.log(deltaState);
    return react.useMemo(() => {
        const { delta, velocity } = deltaState;
        return { delta, velocity };
    }, [deltaState]);
}

exports.useMouseWheelDelta = useMouseWheelDelta;
