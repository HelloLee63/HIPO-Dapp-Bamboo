'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('react');
var useFreshTick = require('./useFreshTick.js');
var useIsomorphicEffect = require('./useIsomorphicEffect.js');
var useRefElement = require('./useRefElement.js');
var noop = require('../utils/noop.js');

/**
 *  useEventListenerRef hook
 *
 *  A react hook to an event listener to an element
 *  Returns a ref
 *
 * @param {string} eventName The event to track`
 * @param {Function} callback The callback to be called on event
 * @param {object} listenerOptions The options to be passed to the event listener
 * @param {boolean} isLayoutEffect Should it use layout effect. Defaults to false
 * @returns {Function} A callback ref that can be used as ref prop
 * @see https://rooks.vercel.app/docs/useEventListenerRef
 */
function useEventListenerRef(eventName, callback, listenerOptions = {}, isLayoutEffect = false) {
    const [ref, element] = useRefElement.useRefElement();
    const freshCallback = useFreshTick.useFreshTick(callback);
    const useEffectToRun = isLayoutEffect ? useIsomorphicEffect.useIsomorphicEffect : react.useEffect;
    useEffectToRun(() => {
        if (!(element === null || element === void 0 ? void 0 : element.addEventListener)) {
            return noop.noop;
        }
        element.addEventListener(eventName, freshCallback, listenerOptions);
        return () => {
            element.removeEventListener(eventName, freshCallback, listenerOptions);
        };
    }, [element, eventName, listenerOptions]);
    return ref;
}

exports.useEventListenerRef = useEventListenerRef;
