'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('react');
var doesIdentifierMatchKeyboardEvent = require('../utils/doesIdentifierMatchKeyboardEvent.js');
var noop = require('../utils/noop.js');

const defaultOptions = {
    eventTypes: ["keydown"],
    when: true,
};
/**
 * useKey hook
 *
 * Fires a callback on keyboard events like keyDown, keyPress and keyUp
 *
 * @param {TrackedKeyEvents} keys List of keys to listen for. Eg: ["a", "b"]
 * @param {Callback} callback  Callback to fire on keyboard events
 * @param {Options} options Options
 * @see https://rooks.vercel.app/docs/useKey
 */
function useKey(keys, callback, options) {
    const keyList = react.useMemo(() => {
        if (Array.isArray(keys)) {
            return keys;
        }
        else {
            return [keys];
        }
    }, [keys]);
    const internalOptions = react.useMemo(() => {
        return Object.assign(Object.assign({}, defaultOptions), options);
    }, [options]);
    const { when, eventTypes } = internalOptions;
    const callbackRef = react.useRef(callback);
    const { target } = internalOptions;
    react.useEffect(() => {
        callbackRef.current = callback;
    });
    const handle = react.useCallback((event) => {
        if (keyList.some((identifier) => doesIdentifierMatchKeyboardEvent.doesIdentifierMatchKeyboardEvent(event, identifier))) {
            callbackRef.current(event);
        }
    }, [keyList]);
    react.useEffect(() => {
        if (when && typeof window !== "undefined") {
            // If target is defined by the user
            if (target) {
                const targetNode = target.current;
                if (targetNode) {
                    for (const eventType of eventTypes) {
                        targetNode.addEventListener(eventType, handle);
                    }
                    return () => {
                        for (const eventType of eventTypes) {
                            targetNode.removeEventListener(eventType, handle);
                        }
                    };
                }
            }
            else {
                for (const eventType of eventTypes) {
                    window.addEventListener(eventType, handle);
                }
                return () => {
                    for (const eventType of eventTypes) {
                        window.removeEventListener(eventType, handle);
                    }
                };
            }
        }
        return noop.noop;
    }, [when, eventTypes, keyList, target, callback, handle]);
}

exports.useKey = useKey;
