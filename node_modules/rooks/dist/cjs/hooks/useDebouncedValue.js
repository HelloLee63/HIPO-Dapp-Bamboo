'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('react');
var useDebounce = require('./useDebounce.js');
var useDidMount = require('./useDidMount.js');
var useDidUpdate = require('./useDidUpdate.js');

const defaultUseDebounceValueOptions = {
    initializeWithNull: false,
};
/**
 * useDebouncedValue
 * @param value The value to debounce
 * @param timeout The duration to debounce
 * @param options The options object.
 * @see https://rooks.vercel.app/docs/useDebouncedValue
 */
const useDebouncedValue = (value, timeout, options = {}) => {
    // eslint-disable-next-line prefer-object-spread
    const { initializeWithNull } = Object.assign({}, defaultUseDebounceValueOptions, options);
    const [updatedValue, setUpdatedValue] = react.useState(initializeWithNull ? null : value);
    const debouncedSetUpdatedValue = useDebounce.useDebounce(setUpdatedValue, timeout);
    useDidMount.useDidMount(() => {
        if (initializeWithNull) {
            debouncedSetUpdatedValue(value);
        }
    });
    useDidUpdate.useDidUpdate(() => {
        debouncedSetUpdatedValue(value);
    }, [value]);
    // No need to add `debouncedSetUpdatedValue ` to dependencies as it is a ref.current.
    // returning both updatedValue and setUpdatedValue (not the debounced version) to instantly update this if  needed.
    return [updatedValue, setUpdatedValue];
};

exports.useDebouncedValue = useDebouncedValue;
