'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('react');

/**
 * useNativeMapState
 * @description Manage Map() object state in React
 * @see {@link https://rooks.vercel.app/docs/useNativeMapState}
 */
function useNativeMapState(initialMapState) {
    const [map, setMap] = react.useState(initialMapState || new Map());
    const set = react.useCallback((key, value) => {
        setMap((prevMap) => new Map(prevMap.set(key, value)));
    }, []);
    const setMultiple = react.useCallback((entries) => {
        setMap((prevMap) => {
            const newMap = new Map(prevMap);
            entries.forEach(([key, value]) => {
                newMap.set(key, value);
            });
            return newMap;
        });
    }, []);
    const remove = react.useCallback((key) => {
        setMap((prevMap) => {
            const newMap = new Map(prevMap);
            newMap.delete(key);
            return newMap;
        });
    }, []);
    const removeMultiple = react.useCallback((keys) => {
        setMap((prevMap) => {
            const newMap = new Map(prevMap);
            keys.forEach((key) => {
                newMap.delete(key);
            });
            return newMap;
        });
    }, []);
    const clear = react.useCallback(() => {
        setMap(new Map());
    }, []);
    const has = react.useCallback((key) => {
        return map.has(key);
    }, [map]);
    const hasSome = react.useCallback((keys) => {
        return keys.some((key) => map.has(key));
    }, [map]);
    const hasEvery = react.useCallback((keys) => {
        return keys.every((key) => map.has(key));
    }, [map]);
    const get = react.useCallback((key) => {
        return map.get(key);
    }, [map]);
    const size = react.useCallback(() => {
        return map.size;
    }, [map]);
    const controls = {
        set,
        remove,
        clear,
        has,
        get,
        size,
        setMultiple,
        removeMultiple,
        hasSome,
        hasEvery,
    };
    return [map, controls];
}

exports.useNativeMapState = useNativeMapState;
