'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('react');

/**
 * useSetState
 * @description Manage the state of a Set in React.
 * @param {Set<T>} initialSetValue The initial value of the set to manage.
 * @returns {UseSetStateReturnValue<T>} The state of the Set and the controls.
 * @see {@link https://rooks.vercel.app/docs/useSetState}
 * @example
 * import { useSetState } from "@/hooks/useSetState";
 * const [set, setControls] = useSetState(new Set());
 * setControls.add(1); // {1}
 * setControls.add(2); // {1, 2}
 * setControls.delete(1); // {2}
 * setControls.clear(); // {}
 *
 */
function useSetState(initialSetValue) {
    const [setValue, setSetValue] = react.useState(new Set(initialSetValue));
    const add = react.useCallback((...args) => {
        setSetValue(new Set(setValue.add(...args)));
    }, [setValue, setSetValue]);
    const deleteValue = react.useCallback((...args) => {
        const newSetValue = new Set(setValue);
        newSetValue.delete(...args);
        setSetValue(newSetValue);
    }, [setValue, setSetValue]);
    const clear = react.useCallback(() => {
        setSetValue(new Set());
    }, [setSetValue]);
    const controls = react.useMemo(() => {
        return { add, delete: deleteValue, clear };
    }, [add, deleteValue, clear]);
    const returnValue = react.useMemo(() => {
        return [setValue, controls];
    }, [setValue, controls]);
    return returnValue;
}

exports.useSetState = useSetState;
