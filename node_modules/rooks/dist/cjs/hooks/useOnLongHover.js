'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('react');
var useFreshCallback = require('./useFreshCallback.js');
var useTimeoutWhen = require('./useTimeoutWhen.js');

const useOnLongHover = (callback, { duration = 300 } = {}) => {
    const [targetNode, setTargetNode] = react.useState(null);
    const ref = react.useCallback((node) => {
        setTargetNode(node);
    }, []);
    const [isHovering, setIsHovering] = react.useState(false);
    const freshCallback = useFreshCallback.useFreshCallback(callback);
    useTimeoutWhen.useTimeoutWhen(() => {
        freshCallback();
    }, duration, isHovering);
    const start = react.useCallback(() => {
        setIsHovering(true);
    }, []);
    const handleOnMouseLeave = react.useCallback((_) => {
        setIsHovering(false);
    }, []);
    react.useEffect(() => {
        if (targetNode) {
            targetNode.addEventListener("mouseenter", start);
            targetNode.addEventListener("mouseleave", handleOnMouseLeave);
        }
        return () => {
            if (targetNode) {
                targetNode.removeEventListener("mouseenter", start);
                targetNode.removeEventListener("mouseleave", handleOnMouseLeave);
            }
        };
    }, [start, handleOnMouseLeave, targetNode]);
    return ref;
};

exports.useOnLongHover = useOnLongHover;
