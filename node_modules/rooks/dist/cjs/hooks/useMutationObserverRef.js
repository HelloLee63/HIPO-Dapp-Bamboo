'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('react');
var noop = require('../utils/noop.js');

const config = {
    attributes: true,
    characterData: true,
    childList: true,
    subtree: true,
};
/**
 *
 * useMutationObserverRef hook
 *
 * Returns a mutation observer for a React Ref and fires a callback
 *
 * @param {MutationCallback} callback Function that needs to be fired on mutation
 * @param {MutationObserverInit} options
 * @see https://rooks.vercel.app/docs/useMutationObserverRef
 */
function useMutationObserverRef(callback, options = config) {
    const [node, setNode] = react.useState(null);
    react.useEffect(() => {
        // Create an observer instance linked to the callback function
        if (node) {
            const observer = new MutationObserver(callback);
            // Start observing the target node for configured mutations
            observer.observe(node, options);
            return () => {
                observer.disconnect();
            };
        }
        return noop.noop;
    }, [node, callback, options]);
    const ref = react.useCallback((nodeElement) => {
        setNode(nodeElement);
    }, []);
    return [ref];
}

exports.useMutationObserverRef = useMutationObserverRef;
