'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('react');

/**
 * useArrayState
 * @description Array state manager hook for React
 * @param {Array<T>} initialState Initial state of the array
 * @returns {UseArrayStateReturnValue<T>} Array state manager hook for React
 * @see {@link https://rooks.vercel.app/docs/useArrayState}
 *
 * @example
 *
 * const [array, controls] = useArrayState([1, 2, 3]);
 *
 * controls.push(4); // [1, 2, 3, 4]
 * controls.pop(); // [1, 2, 3]
 * controls.unshift(0); // [0, 1, 2, 3]
 * controls.shift(); // [1, 2, 3]
 * controls.reverse(); // [3, 2, 1]
 * controls.concat([4, 5, 6]); // [3, 2, 1, 4, 5, 6]
 * controls.fill(0); // [0, 0, 0, 0, 0, 0]
 * controls.updateItemAtIndex(0, 1); // [1, 0, 0, 0, 0, 0]
 * controls.clear(); // []
 * controls.setArray([1, 2, 3]); // [1, 2, 3]
 * controls.splice(1, 1); // [1, 3]
 * controls.removeItemAtIndex(1); // [1]
 * controls.replaceItemAtIndex(0, 2); // [2]
 * controls.insertItemAtIndex(0, 1); // [1, 2]
 * controls.sort((a, b) => a - b); // [1, 2]
 *
 */
function useArrayState(initial) {
    const [array, setArray] = react.useState(initial !== null && initial !== void 0 ? initial : []);
    const push = react.useCallback((value) => {
        setArray([...array, value]);
    }, [array]);
    const pop = react.useCallback(() => {
        setArray(array.slice(0, array.length - 1));
    }, [array]);
    const clear = react.useCallback(() => {
        setArray([]);
    }, []);
    const unshift = react.useCallback((value) => {
        setArray([value, ...array]);
    }, [array]);
    const shift = react.useCallback(() => {
        setArray(array.slice(1));
    }, [array]);
    const reverse = react.useCallback(() => {
        setArray([...array].reverse());
    }, [array]);
    const concat = react.useCallback((value) => {
        setArray([...array, ...value]);
    }, [array]);
    const fill = react.useCallback((value, start, end) => {
        setArray([...array].fill(value, start, end));
    }, [array]);
    const updateItemAtIndex = react.useCallback((index, value) => {
        setArray((prevArray) => {
            const newArray = [...prevArray];
            newArray[index] = value;
            return newArray;
        });
    }, [setArray]);
    const splice = react.useCallback((...args) => {
        setArray((prevArray) => {
            const newArray = [...prevArray];
            newArray.splice(...args);
            return newArray;
        });
    }, [setArray]);
    const removeItemAtIndex = react.useCallback((index) => {
        setArray((prevArray) => {
            const newArray = [...prevArray];
            newArray.splice(index, 1);
            return newArray;
        });
    }, [setArray]);
    const replaceItemAtIndex = react.useCallback((index, value) => {
        setArray((prevArray) => {
            const newArray = [...prevArray];
            newArray.splice(index, 1, value);
            return newArray;
        });
    }, [setArray]);
    const insertItemAtIndex = react.useCallback((index, value) => {
        setArray((prevArray) => {
            const newArray = [...prevArray];
            newArray.splice(index, 0, value);
            return newArray;
        });
    }, [setArray]);
    const sort = react.useCallback((compareFn) => {
        setArray([...array].sort(compareFn));
    }, [array]);
    const controls = react.useMemo(() => {
        return {
            push,
            pop,
            clear,
            unshift,
            shift,
            reverse,
            concat,
            fill,
            updateItemAtIndex,
            setArray,
            splice,
            removeItemAtIndex,
            replaceItemAtIndex,
            insertItemAtIndex,
            sort,
        };
    }, [
        push,
        pop,
        clear,
        unshift,
        shift,
        reverse,
        concat,
        fill,
        updateItemAtIndex,
        setArray,
        splice,
        removeItemAtIndex,
        replaceItemAtIndex,
        insertItemAtIndex,
        sort,
    ]);
    const returnValue = react.useMemo(() => {
        return [array, controls];
    }, [array, controls]);
    return returnValue;
}

exports.useArrayState = useArrayState;
