'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('react');
var noop = require('../utils/noop.js');

/**
 * A setTimeout hook that calls a callback after a timeout duration
 * when a condition is true
 *
 * @param callback The callback to be invoked after timeout
 * @param timeoutDelayMs Amount of time in ms after which to invoke
 * @param when The condition which when true, sets the timeout
 * @see https://rooks.vercel.app/docs/useTimeoutWhen
 */
function useTimeoutWhen(callback, timeoutDelayMs = 0, when = true) {
    const savedRefCallback = react.useRef();
    react.useEffect(() => {
        savedRefCallback.current = callback;
    });
    function internalCallback() {
        var _a;
        (_a = savedRefCallback.current) === null || _a === void 0 ? void 0 : _a.call(savedRefCallback);
    }
    react.useEffect(() => {
        if (when) {
            // eslint-disable-next-line no-negated-condition
            if (typeof window !== "undefined") {
                const timeout = window.setTimeout(internalCallback, timeoutDelayMs);
                return () => {
                    window.clearTimeout(timeout);
                };
            }
            else {
                console.warn("useTimeoutWhen: window is undefined.");
            }
        }
        return noop.noop;
    }, [timeoutDelayMs, when]);
}

exports.useTimeoutWhen = useTimeoutWhen;
