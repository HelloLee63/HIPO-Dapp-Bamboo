'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('react');
var isEqual = require('fast-deep-equal');
var warning = require('./warning.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var isEqual__default = /*#__PURE__*/_interopDefaultLegacy(isEqual);

/**
 * useDeepCompareEffect
 * @description Deep compare dependencies instead of shallow for useEffect
 * @see {@link https://rooks.vercel.app/docs/useDeepCompareEffect}
 */
function isPrimitive(value) {
    const valueType = typeof value;
    return (valueType === "string" ||
        valueType === "number" ||
        valueType === "bigint" ||
        valueType === "boolean" ||
        valueType === "undefined" ||
        valueType === "symbol");
}
function useDeepCompareEffect(callback, dependencies) {
    const previousDeps = react.useRef(dependencies);
    if (!Array.isArray(dependencies)) {
        throw new Error("useDeepCompareEffect should be used with an array of dependencies");
    }
    const hasPrimitives = dependencies.every(isPrimitive);
    warning.warning(!hasPrimitives, "useDeepCompareEffect should not be used with primitive values as dependencies");
    if (!isEqual__default["default"](previousDeps.current, dependencies)) {
        previousDeps.current = dependencies;
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
    react.useEffect(callback, previousDeps.current);
}

exports.useDeepCompareEffect = useDeepCompareEffect;
