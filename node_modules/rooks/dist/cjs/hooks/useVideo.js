'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('react');

/**
 * useVideo
 * @description Video hook for react
 * @see {@link https://rooks.vercel.app/docs/useVideo}
 */
const useVideo = () => {
    const videoRef = react.useRef(null);
    const [state, setState] = react.useState({
        currentTime: 0,
        duration: 0,
        isPaused: true,
        isMuted: false,
        volume: 1,
    });
    const controls = {
        play: () => {
            if (videoRef.current) {
                videoRef.current.play();
                setState(Object.assign(Object.assign({}, state), { isPaused: false }));
            }
        },
        pause: () => {
            if (videoRef.current) {
                videoRef.current.pause();
                setState(Object.assign(Object.assign({}, state), { isPaused: true }));
            }
        },
        toggleMute: () => {
            if (videoRef.current) {
                videoRef.current.muted = !videoRef.current.muted;
                setState(Object.assign(Object.assign({}, state), { isMuted: videoRef.current.muted }));
            }
        },
        setVolume: (volume) => {
            if (videoRef.current) {
                videoRef.current.volume = volume;
                setState(Object.assign(Object.assign({}, state), { volume }));
            }
        },
        setCurrentTime: (time) => {
            if (videoRef.current) {
                videoRef.current.currentTime = time;
                setState(Object.assign(Object.assign({}, state), { currentTime: time }));
            }
        },
        fastForward: (seconds) => {
            if (videoRef.current) {
                videoRef.current.currentTime += seconds;
                setState(Object.assign(Object.assign({}, state), { currentTime: videoRef.current.currentTime }));
            }
        },
        rewind: (seconds) => {
            if (videoRef.current) {
                videoRef.current.currentTime -= seconds;
                setState(Object.assign(Object.assign({}, state), { currentTime: videoRef.current.currentTime }));
            }
        },
        toggleFullScreen: () => {
            if (videoRef.current) {
                if (document.fullscreenElement) {
                    document.exitFullscreen();
                }
                else {
                    videoRef.current.requestFullscreen();
                }
            }
        },
    };
    react.useEffect(() => {
        const video = videoRef.current;
        const handleTimeUpdate = () => {
            setState((prevState) => (Object.assign(Object.assign({}, prevState), { currentTime: video.currentTime })));
        };
        const handleDurationChange = () => {
            setState((prevState) => (Object.assign(Object.assign({}, prevState), { duration: video.duration })));
        };
        const handlePause = () => {
            setState((prevState) => (Object.assign(Object.assign({}, prevState), { isPaused: true })));
        };
        const handlePlay = () => {
            setState((prevState) => (Object.assign(Object.assign({}, prevState), { isPaused: false })));
        };
        if (video) {
            video.addEventListener("timeupdate", handleTimeUpdate);
            video.addEventListener("durationchange", handleDurationChange);
            video.addEventListener("pause", handlePause);
            video.addEventListener("play", handlePlay);
        }
        return () => {
            if (video) {
                video.removeEventListener("timeupdate", handleTimeUpdate);
                video.removeEventListener("durationchange", handleDurationChange);
                video.removeEventListener("pause", handlePause);
                video.removeEventListener("play", handlePlay);
            }
        };
    }, [videoRef]);
    return [videoRef, state, controls];
};

exports.useVideo = useVideo;
