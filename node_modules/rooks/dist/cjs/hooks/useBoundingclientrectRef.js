'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('react');
var useForkRef = require('./useForkRef.js');
var useMutationObserverRef = require('./useMutationObserverRef.js');

/**
 * @param element HTML element whose boundingclientrect is needed
 * @returns DOMRect
 */
function getBoundingClientRect(element) {
    return element.getBoundingClientRect();
}
/**
 * useBoundingclientrectRef hook
 * Tracks the boundingclientrect of a React Ref and fires a callback when the element's size changes.
 *
 * @returns [CallbackRef | null, DOMRect | null, () => void]
 * @see https://rooks.vercel.app/docs/useBoundingclientRectRef
 */
function useBoundingclientrectRef() {
    const [domRect, setDomRect] = react.useState(null);
    const [node, setNode] = react.useState(null);
    const update = react.useCallback(() => {
        setDomRect(node ? getBoundingClientRect(node) : null);
    }, [node]);
    react.useEffect(() => {
        update();
    }, [update]);
    const ref = react.useCallback((nodeElement) => {
        setNode(nodeElement);
    }, []);
    const [mutationObserverRef] = useMutationObserverRef.useMutationObserverRef(update);
    const forkedRef = useForkRef.useForkRef(ref, mutationObserverRef);
    return [forkedRef, domRect, update];
}

exports.useBoundingclientrectRef = useBoundingclientrectRef;
