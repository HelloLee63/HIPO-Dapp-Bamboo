'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('react');
var noop = require('../utils/noop.js');

/**
 * useThrottle
 * Throttles a function with a timeout and ensures
 * that the callback function runs at most once in that duration
 *
 * @param callback The callback to throttle
 * @param timeout Throttle timeout
 * @returns [Callback, isReady] The throttled callback and if it is currently throttled
 * @see https://rooks.vercel.app/docs/useThrottle
 */
function useThrottle(callback, timeout = 300) {
    const [ready, setReady] = react.useState(true);
    const timerRef = react.useRef(undefined);
    const throttledFunction = react.useCallback((...args) => {
        if (!ready) {
            return;
        }
        setReady(false);
        callback(...args);
    }, [ready, callback]);
    react.useEffect(() => {
        if (!ready) {
            timerRef.current = window.setTimeout(() => {
                setReady(true);
            }, timeout);
            return () => window.clearTimeout(timerRef.current);
        }
        return noop.noop;
    }, [ready, timeout]);
    return [throttledFunction, ready];
}

exports.useThrottle = useThrottle;
