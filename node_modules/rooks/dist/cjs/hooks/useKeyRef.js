'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('react');
var doesIdentifierMatchKeyboardEvent = require('../utils/doesIdentifierMatchKeyboardEvent.js');
var noop = require('../utils/noop.js');

const defaultOptions = {
    eventTypes: ["keydown"],
    when: true,
};
/**
 * useKeyRef hook
 *
 * Fires a callback on keyboard events like keyDown, keyPress and keyUp
 *
 * @param {[string|number]} keys List of keys to listen for. Eg: ["a", "b"]
 * @param {Function} callback Callback to fire on keyboard events
 * @param {Options} options Options
 * @returns {CallbackRef} CallbackRef
 * @see https://rooks.vercel.app/docs/useKeyRef
 */
function useKeyRef(keys, callback, options) {
    const [targetNode, setTargetNode] = react.useState(null);
    const ref = react.useCallback((node) => {
        setTargetNode(node);
    }, []);
    const keyList = react.useMemo(() => {
        if (Array.isArray(keys)) {
            return keys;
        }
        else {
            return [keys];
        }
    }, [keys]);
    const internalOptions = react.useMemo(() => {
        return Object.assign(Object.assign({}, defaultOptions), options);
    }, [options]);
    const { when, eventTypes } = internalOptions;
    const callbackRef = react.useRef(callback);
    react.useEffect(() => {
        callbackRef.current = callback;
    });
    const handle = react.useCallback((event) => {
        if (keyList.some((identifier) => doesIdentifierMatchKeyboardEvent.doesIdentifierMatchKeyboardEvent(event, identifier))) {
            callbackRef.current(event);
        }
    }, [keyList]);
    react.useEffect(() => {
        if (when && targetNode) {
            for (const eventType of eventTypes) {
                // eslint-disable-next-line prefer-arrow-callback
                targetNode.addEventListener(eventType, handle);
            }
            return () => {
                for (const eventType of eventTypes) {
                    targetNode.removeEventListener(eventType, handle);
                }
            };
        }
        return noop.noop;
    }, [targetNode, when, eventTypes, keyList, handle]);
    return ref;
}

exports.useKeyRef = useKeyRef;
