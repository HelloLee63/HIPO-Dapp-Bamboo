'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('react');
var noop = require('../utils/noop.js');

const config = {
    root: null,
    rootMargin: "0px 0px 0px 0px",
    threshold: [0, 1],
};
/**
 *
 * useInViewRef hook
 *
 * Returns a mutation observer for a React Ref and true/false when element enters/leaves the viewport. Also fires a callback.
 *
 * @param {IntersectionObserverCallback} callback Function that needs to be fired on mutation
 * @param {IntersectionObserverInit} options
 * @see https://rooks.vercel.app/docs/useInViewRef
 */
function useInViewRef(callback = () => { }, options = config) {
    const { root = null, rootMargin, threshold } = options;
    const [node, setNode] = react.useState(null);
    const [inView, setInView] = react.useState(false);
    react.useEffect(() => {
        // Create an observer instance linked to the callback function
        if (node) {
            const observer = new IntersectionObserver((entries, observerRef) => {
                for (const { isIntersecting } of entries)
                    setInView(isIntersecting);
                callback(entries, observerRef);
            }, options);
            // Start observing the target node for configured mutations
            observer.observe(node);
            return () => {
                observer.disconnect();
            };
        }
        return noop.noop;
    }, [node, callback, root, rootMargin, threshold, options]);
    const ref = react.useCallback((nodeElement) => {
        setNode(nodeElement);
    }, []);
    return [ref, inView];
}

exports.useInViewRef = useInViewRef;
