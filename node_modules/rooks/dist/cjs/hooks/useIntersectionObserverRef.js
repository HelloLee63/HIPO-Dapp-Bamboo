'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('react');
var noop = require('../utils/noop.js');

const config = {
    root: null,
    rootMargin: "0px 0px 0px 0px",
    threshold: [0, 1],
};
/**
 *
 * useIntersectionObserverRef hook
 *
 * Returns a mutation observer for a React Ref and fires a callback
 *
 * @param {IntersectionObserverCallback} callback Function that needs to be fired on mutation
 * @param {IntersectionObserverInit} options
 * @see https://rooks.vercel.app/docs/useIntersectionObserverRef
 */
function useIntersectionObserverRef(callback, options = config) {
    const { root = null, rootMargin, threshold } = options;
    const [node, setNode] = react.useState(null);
    const callbackRef = react.useRef(callback);
    react.useEffect(() => {
        callbackRef.current = callback;
    });
    const handleIntersectionObserver = react.useCallback((...args) => {
        var _a;
        return (_a = callbackRef.current) === null || _a === void 0 ? void 0 : _a.call(callbackRef, ...args);
    }, []);
    react.useEffect(() => {
        // Create an observer instance linked to the callback function
        if (node) {
            const observer = new IntersectionObserver(handleIntersectionObserver, {
                root,
                rootMargin,
                threshold,
            });
            // Start observing the target node for configured mutations
            observer.observe(node);
            return () => {
                observer.disconnect();
            };
        }
        return noop.noop;
    }, [node, handleIntersectionObserver, root, rootMargin, threshold]);
    const ref = react.useCallback((nodeElement) => {
        setNode(nodeElement);
    }, []);
    return [ref];
}

exports.useIntersectionObserverRef = useIntersectionObserverRef;
