import { useState, useEffect } from 'react';
import { useGetIsMounted } from './useGetIsMounted.js';

function getGeoLocation(options) {
    return new Promise((resolve, reject) => {
        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition((position) => {
                const { coords } = position;
                const { latitude, longitude } = coords;
                resolve({
                    isError: false,
                    lat: latitude,
                    lng: longitude,
                    message: "",
                });
            }, (error) => {
                // eslint-disable-next-line prefer-promise-reject-errors
                reject({ isError: true, message: error.message });
            }, options);
        }
        else {
            // eslint-disable-next-line prefer-promise-reject-errors
            reject({
                isError: true,
                message: "Geolocation is not supported for this Browser/OS.",
            });
        }
    });
}
const defaultGeoLocationOptions = {
    enableHighAccuracy: false,
    maximumAge: 0,
    timeout: Number.POSITIVE_INFINITY,
    when: true,
};
/**
 * useGeolocation
 * Gets the geolocation data as a hook
 *
 * @param {UseGeoLocationOptions} geoLocationOptions Geolocation options
 * @see {@link https://rooks.vercel.app/docs/useGeolocation}
 */
const useGeolocation = (geoLocationOptions = defaultGeoLocationOptions) => {
    const [geoObject, setGeoObject] = useState(null);
    const { when, enableHighAccuracy, timeout, maximumAge } = geoLocationOptions;
    const getIsMounted = useGetIsMounted();
    useEffect(() => {
        async function getGeoCode() {
            try {
                const value = await getGeoLocation({
                    enableHighAccuracy,
                    maximumAge,
                    timeout,
                    when,
                });
                if (getIsMounted()) {
                    setGeoObject(value);
                }
            }
            catch (error) {
                if (getIsMounted()) {
                    setGeoObject(error);
                }
            }
        }
        if (when) {
            void getGeoCode();
        }
    }, [when, enableHighAccuracy, timeout, maximumAge, getIsMounted]);
    return geoObject;
};

export { useGeolocation };
