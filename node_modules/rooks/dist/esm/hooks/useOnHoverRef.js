import { noop } from '../utils/noop.js';
import { useState, useCallback, useEffect } from 'react';
import { useFreshCallback } from './useFreshCallback.js';

function useOnHoverRef(onMouseEnter, onMouseLeave) {
    const [node, setNode] = useState(null);
    const handleMouseEnter = useCallback((e) => {
        onMouseEnter === null || onMouseEnter === void 0 ? void 0 : onMouseEnter(e);
    }, [onMouseEnter]);
    const handleMouseLeave = useCallback((e) => {
        onMouseLeave === null || onMouseLeave === void 0 ? void 0 : onMouseLeave(e);
    }, [onMouseLeave]);
    const mouseEnterCallback = useFreshCallback(handleMouseEnter);
    const mouseLeaveCallback = useFreshCallback(handleMouseLeave);
    useEffect(() => {
        if (node) {
            node.addEventListener("mouseenter", mouseEnterCallback);
            node.addEventListener("mouseleave", mouseLeaveCallback);
            return () => {
                node.removeEventListener("mouseenter", mouseEnterCallback);
                node.removeEventListener("mouseleave", mouseLeaveCallback);
            };
        }
        else {
            return noop;
        }
    }, [mouseEnterCallback, mouseLeaveCallback, node]);
    const ref = (el) => {
        setNode(el);
    };
    return ref;
}

export { useOnHoverRef };
