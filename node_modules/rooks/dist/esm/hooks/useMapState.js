import { useState, useCallback } from 'react';

/**
 * useMapState hook
 * A hook to manage state in the form of a map or object.
 *
 * @param initialValue Initial value of the map
 * @see https://rooks.vercel.app/docs/useMapState
 */
function useMapState(initialValue) {
    const [map, setMap] = useState(initialValue);
    const set = useCallback((key, value) => {
        setMap((currentMap) => (Object.assign(Object.assign({}, currentMap), { [key]: value })));
    }, []);
    const has = useCallback((key) => {
        return typeof map[key] !== "undefined";
    }, [map]);
    const setMultiple = useCallback((nextMap) => {
        setMap((currentMap) => (Object.assign(Object.assign({}, currentMap), nextMap)));
    }, []);
    const removeMultiple = useCallback((...keys) => {
        setMap((currentMap) => {
            const nextMap = Object.assign({}, currentMap);
            for (const key of keys) {
                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
                delete nextMap[key];
            }
            return nextMap;
        });
    }, [setMap]);
    const remove = useCallback((key) => {
        setMap((currentMap) => {
            const nextMap = Object.assign({}, currentMap);
            // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
            delete nextMap[key];
            return nextMap;
        });
    }, [setMap]);
    const removeAll = useCallback(() => {
        setMap((currentMap) => {
            const nextMap = Object.assign({}, currentMap);
            for (const key in nextMap) {
                // eslint-disable-next-line no-prototype-builtins
                if (nextMap.hasOwnProperty(key)) {
                    // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
                    delete nextMap[key];
                }
            }
            return nextMap;
        });
    }, [setMap]);
    return [
        map,
        {
            has,
            remove,
            removeAll,
            removeMultiple,
            set,
            setMultiple,
        },
    ];
}

export { useMapState };
