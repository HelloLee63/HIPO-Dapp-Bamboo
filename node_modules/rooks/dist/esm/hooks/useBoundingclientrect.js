import { useState, useCallback } from 'react';
import { useDidMount } from './useDidMount.js';
import { useMutationObserver } from './useMutationObserver.js';

/**
 * @param element HTML element whose boundingclientrect is needed
 * @returns DOMRect
 */
function getBoundingClientRect(element) {
    return element.getBoundingClientRect();
}
/**
 * useBoundingclientRect hook
 *
 * @param ref The React ref whose ClientRect is needed
 * @returns DOMRect | null
 * @see https://rooks.vercel.app/docs/useBoundingclientRect
 */
function useBoundingclientrect(ref) {
    const [domRect, setDomRect] = useState(null);
    const update = useCallback(() => {
        setDomRect(ref.current ? getBoundingClientRect(ref.current) : null);
    }, [ref]);
    useDidMount(() => {
        update();
    });
    useMutationObserver(ref, update);
    return domRect;
}

export { useBoundingclientrect };
