import { useState, useCallback } from 'react';

/* eslint-disable no-negated-condition */
function warnIfBothValueAndIndexAreProvided(functionName, object) {
    if (Object.values(object).every((value) => typeof value !== "undefined")) {
        console.warn(`${functionName}. Expected either ${Object.keys(object).join(" or ")} to be provided. However all were provided`);
    }
    else if (Object.values(object).every((value) => typeof value === "undefined")) {
        console.warn(`${functionName}. ${Object.keys(object).join(" , ")} are all undefined.`);
    }
}
/**
 * useSelectableList
 * Easily select a single value from a list of values. very useful for radio buttons, select inputs  etc.
 *
 * @param list - The list of values to select from
 * @param initialIndex  - The index of the initial selection
 * @param allowUnselected
 * @see https://rooks.vercel.app/docs/useSelectableList
 */
function useSelectableList(list = [], initialIndex = 0, allowUnselected = false) {
    const [currentIndex, setCurrentIndex] = useState(initialIndex);
    const currentValue = list[currentIndex];
    const selection = [currentIndex, currentValue];
    const updateSelection = useCallback(({ index, value }) => {
        return () => {
            warnIfBothValueAndIndexAreProvided("updateSelection", { index, value });
            if (typeof index !== "undefined") {
                setCurrentIndex(index);
            }
            else if (typeof value !== "undefined") {
                const valueIndex = list.indexOf(value);
                if (valueIndex > -1) {
                    setCurrentIndex(valueIndex);
                }
                else {
                    console.warn(`updateSelection failed. Does the value ${value} exist in the list?`);
                }
            }
        };
    }, [list]);
    const toggleSelection = useCallback(({ index, value }) => {
        return () => {
            warnIfBothValueAndIndexAreProvided("toggleSelection", { index, value });
            if (typeof index !== "undefined") {
                if (currentIndex === index) {
                    if (allowUnselected) {
                        setCurrentIndex(-1);
                    }
                    else {
                        console.warn("allowUnselected is false. Cannot unselect item");
                    }
                }
                else {
                    setCurrentIndex(index);
                }
            }
            else if (typeof value !== "undefined") {
                const valueIndex = list.indexOf(value);
                if (valueIndex > -1) {
                    if (currentIndex === valueIndex) {
                        if (allowUnselected) {
                            setCurrentIndex(-1);
                        }
                        else {
                            console.warn("allowUnselected is false. Cannot unselect item");
                        }
                    }
                    else {
                        setCurrentIndex(valueIndex);
                    }
                }
                else {
                    console.log("as");
                    console.warn(`toggleSelection failed. Does the value ${value} exist in the list?`);
                }
            }
        };
    }, [allowUnselected, currentIndex, list]);
    const matchSelection = useCallback(({ index, value }) => {
        warnIfBothValueAndIndexAreProvided("matchSelection", { index, value });
        if (typeof index !== "undefined") {
            return index === currentIndex;
        }
        else {
            return value === currentValue;
        }
    }, [currentIndex, currentValue]);
    const controls = {
        matchSelection,
        toggleSelection,
        updateSelection,
    };
    return [selection, controls];
}

export { useSelectableList };
