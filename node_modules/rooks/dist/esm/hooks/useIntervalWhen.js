import { useRef, useEffect } from 'react';
import { noop } from '../utils/noop.js';

/**
 * A setInterval hook that calls a callback after a interval duration
 * when a condition is true
 *
 * @param callback The callback to be invoked after interval
 * @param intervalDurationMs Amount of time in ms after which to invoke
 * @param when The condition which when true, sets the interval
 * @param startImmediate If the callback should be invoked immediately
 * @see https://rooks.vercel.app/docs/useIntervalWhen
 */
function useIntervalWhen(callback, intervalDurationMs = 0, when = true, startImmediate = false) {
    const savedRefCallback = useRef();
    useEffect(() => {
        savedRefCallback.current = callback;
    });
    function internalCallback() {
        var _a;
        (_a = savedRefCallback.current) === null || _a === void 0 ? void 0 : _a.call(savedRefCallback);
    }
    useEffect(() => {
        if (when) {
            if (startImmediate) {
                internalCallback();
            }
            const interval = window.setInterval(internalCallback, intervalDurationMs);
            return () => {
                window.clearInterval(interval);
            };
        }
        return noop;
    }, [when, intervalDurationMs, startImmediate]);
}

export { useIntervalWhen };
