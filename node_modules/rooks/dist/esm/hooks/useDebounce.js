import debounce from 'lodash.debounce';
import { useCallback, useRef } from 'react';
import { useFreshRef } from './useFreshRef.js';
import { useWillUnmount } from './useWillUnmount.js';

/**
 * Debounce hook
 * Debounces a function
 *
 * @param callback The callback to debounce
 * @param wait The duration to debounce
 * @param options The options object.
 * @param options.leading Specify invoking on the leading edge of the timeout.
 * @param options.maxWait The maximum time func is allowed to be delayed before itâ€™s invoked.
 * @param options.trailing Specify invoking on the trailing edge of the timeout.
 * @returns Returns the new debounced function.
 * @see https://rooks.vercel.app/docs/useDebounce
 */
function useDebounce(callback, wait, options) {
    const createDebouncedCallback = useCallback((function_) => {
        return debounce(function_, wait, options);
    }, [wait, options]);
    const freshCallback = useFreshRef(callback);
    function tick(...args) {
        var _a;
        (_a = freshCallback.current) === null || _a === void 0 ? void 0 : _a.call(freshCallback, ...args);
    }
    const debouncedCallbackRef = useRef(createDebouncedCallback(tick));
    useWillUnmount(() => {
        var _a;
        return (_a = debouncedCallbackRef.current) === null || _a === void 0 ? void 0 : _a.cancel();
    });
    return debouncedCallbackRef.current;
}

export { useDebounce };
