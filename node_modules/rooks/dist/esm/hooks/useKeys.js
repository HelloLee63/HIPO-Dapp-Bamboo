import { useRef, useEffect, useCallback } from 'react';
import { doesIdentifierMatchKeyboardEvent } from '../utils/doesIdentifierMatchKeyboardEvent.js';
import { noop } from '../utils/noop.js';

/**
 * defaultOptions which will be merged with passed in options
 */
const defaultOptions = {
    continuous: false,
    when: true,
};
/**
 * useKeys hook
 *
 * @param keysList - list of keys to listen to
 * @param callback  - callback to be called when a key is pressed
 * @param options - options to be passed to the event listener
 * @see https://rooks.vercel.app/docs/useKeys
 */
function useKeys(keysList, callback, options) {
    const internalOptions = Object.assign(Object.assign({}, defaultOptions), options);
    const { target, when, continuous, preventLostKeyup } = internalOptions;
    const savedCallback = useRef(callback);
    /**
     * PressedKeyMapping will do the bookkeeping the pressed keys
     */
    const pressedKeyMappingRef = useRef({});
    const PressedKeyMapping = pressedKeyMappingRef.current;
    /**
     *  First useEffect is to remember the latest callback
     */
    useEffect(() => {
        savedCallback.current = callback;
    });
    /**
     * handleKeyDown
     *
     * @param   {KeyboardEvent}  event
     * KeyDown event handler which will wrap the passed in callback
     */
    const handleKeyDown = useCallback((event) => {
        let pressedKeyIdentifier = null;
        let areAllKeysFromListPressed = false;
        // First detect the key that was pressed;
        for (const identifier of keysList) {
            if (doesIdentifierMatchKeyboardEvent(event, identifier)) {
                PressedKeyMapping[identifier] = true;
                pressedKeyIdentifier = identifier;
            }
        }
        if (keysList.every((identifier) => Boolean(PressedKeyMapping[identifier]))) {
            areAllKeysFromListPressed = true;
        }
        if (areAllKeysFromListPressed) {
            savedCallback.current(event);
            /**
             * If not continuous
             * disable identifier immediately
             */
            if (!continuous && pressedKeyIdentifier !== null) {
                PressedKeyMapping[pressedKeyIdentifier] = false;
            }
        }
    }, [keysList, PressedKeyMapping, continuous]);
    /**
     * [handleKeyUp]
     *
     * @param   {KeyboardEvent}  event
     *
     * KeyUp event handler which will update the keys pressed state in PressedKeyMapping
     */
    const handleKeyUp = useCallback((event) => {
        for (const identifier of keysList) {
            if (doesIdentifierMatchKeyboardEvent(event, identifier)) {
                PressedKeyMapping[identifier] = undefined;
            }
        }
    }, [PressedKeyMapping, keysList]);
    /**
     * Responsible for setting up the event listener and removing event listeners
     */
    useEffect(() => {
        if (when && typeof window !== "undefined") {
            const targetNode = (target === null || target === void 0 ? void 0 : target.current) ? target.current : document;
            targetNode.addEventListener("keydown", handleKeyDown);
            targetNode.addEventListener("keyup", handleKeyUp);
            return () => {
                targetNode.removeEventListener("keydown", handleKeyDown);
                targetNode.removeEventListener("keyup", handleKeyUp);
            };
        }
        return noop;
    }, [when, target, keysList, handleKeyDown, handleKeyUp]);
    useEffect(() => {
        if (preventLostKeyup !== true)
            return noop;
        if (typeof window !== "undefined") {
            const originalAlert = window.alert;
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            window.alert = (message) => {
                for (const identifier of keysList) {
                    PressedKeyMapping[identifier] = undefined;
                }
                return originalAlert(message);
            };
            const originalConfirm = window.confirm;
            window.confirm = (message) => {
                for (const identifier of keysList) {
                    PressedKeyMapping[identifier] = undefined;
                }
                return originalConfirm(message);
            };
            const originalPrompt = window.prompt;
            window.prompt = (message, _default) => {
                for (const identifier of keysList) {
                    PressedKeyMapping[identifier] = undefined;
                }
                return originalPrompt(message, _default);
            };
            return () => {
                window.alert = originalAlert;
                window.confirm = originalConfirm;
                window.prompt = originalPrompt;
            };
        }
        return noop;
    }, [PressedKeyMapping, keysList, preventLostKeyup]);
}

export { useKeys };
