import { useState, useCallback, useEffect } from 'react';
import { useFreshCallback } from './useFreshCallback.js';

function useIsDroppingFiles(isTargetWindow = false) {
    const [targetNode, setTargetNode] = useState(null);
    const ref = useCallback((node) => {
        setTargetNode(node);
    }, []);
    const [isDroppingFiles, setIsDroppingFiles] = useState(false);
    const handleDragEnter = useCallback((e) => {
        var _a;
        e.preventDefault();
        if ((_a = e.dataTransfer) === null || _a === void 0 ? void 0 : _a.types.includes("Files")) {
            if (!isDroppingFiles) {
                setIsDroppingFiles(true);
            }
        }
        else {
            setIsDroppingFiles(false);
        }
    }, [isDroppingFiles]);
    const handleDragOver = useCallback((e) => {
        var _a;
        e.preventDefault();
        if ((_a = e.dataTransfer) === null || _a === void 0 ? void 0 : _a.types.includes("Files")) {
            if (!isDroppingFiles) {
                setIsDroppingFiles(true);
            }
        }
        else {
            setIsDroppingFiles(false);
        }
    }, [isDroppingFiles]);
    const handleDragLeave = useCallback((e) => {
        e.preventDefault();
        setIsDroppingFiles(false);
    }, []);
    const handleDrop = useCallback((e) => {
        e.preventDefault();
        setIsDroppingFiles(false);
    }, []);
    const freshHandleDragEnter = useFreshCallback(handleDragEnter);
    const freshHandleDragOver = useFreshCallback(handleDragOver);
    const freshHandleDragLeave = useFreshCallback(handleDragLeave);
    const freshHandleDrop = useFreshCallback(handleDrop);
    useEffect(() => {
        const target = isTargetWindow ? window : targetNode;
        if (target) {
            target.addEventListener("dragenter", freshHandleDragEnter);
            target.addEventListener("dragover", freshHandleDragOver);
            target.addEventListener("dragleave", freshHandleDragLeave);
            target.addEventListener("drop", freshHandleDrop);
        }
        return () => {
            if (target) {
                target.removeEventListener("dragenter", freshHandleDragEnter);
                target.removeEventListener("dragover", freshHandleDragOver);
                target.removeEventListener("dragleave", freshHandleDragLeave);
                target.removeEventListener("drop", freshHandleDrop);
            }
        };
    }, [
        freshHandleDragEnter,
        freshHandleDragLeave,
        freshHandleDragOver,
        freshHandleDrop,
        isDroppingFiles,
        isTargetWindow,
        targetNode,
    ]);
    if (isTargetWindow) {
        return isDroppingFiles;
    }
    return [ref, isDroppingFiles];
}

export { useIsDroppingFiles };
