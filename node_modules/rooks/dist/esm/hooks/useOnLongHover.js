import { useState, useCallback, useEffect } from 'react';
import { useFreshCallback } from './useFreshCallback.js';
import { useTimeoutWhen } from './useTimeoutWhen.js';

const useOnLongHover = (callback, { duration = 300 } = {}) => {
    const [targetNode, setTargetNode] = useState(null);
    const ref = useCallback((node) => {
        setTargetNode(node);
    }, []);
    const [isHovering, setIsHovering] = useState(false);
    const freshCallback = useFreshCallback(callback);
    useTimeoutWhen(() => {
        freshCallback();
    }, duration, isHovering);
    const start = useCallback(() => {
        setIsHovering(true);
    }, []);
    const handleOnMouseLeave = useCallback((_) => {
        setIsHovering(false);
    }, []);
    useEffect(() => {
        if (targetNode) {
            targetNode.addEventListener("mouseenter", start);
            targetNode.addEventListener("mouseleave", handleOnMouseLeave);
        }
        return () => {
            if (targetNode) {
                targetNode.removeEventListener("mouseenter", start);
                targetNode.removeEventListener("mouseleave", handleOnMouseLeave);
            }
        };
    }, [start, handleOnMouseLeave, targetNode]);
    return ref;
};

export { useOnLongHover };
