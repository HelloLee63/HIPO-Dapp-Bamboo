import { useRef, useState, useCallback, useEffect } from 'react';
import { noop } from '../utils/noop.js';

/**
 * useOutsideClickRef hook
 * Checks if a click happened outside a Ref. Handy for dropdowns, modals and popups etc.
 *
 * @param handler Callback to fire on outside click
 * @param when A boolean which which activates the hook only when it is true. Useful for conditionally enable the outside click
 * @returns An array with first item being ref
 * @see https://rooks.vercel.app/docs/useOutsideClick
 */
function useOutsideClickRef(handler, when = true) {
    const savedHandler = useRef(handler);
    const [node, setNode] = useState(null);
    const memoizedCallback = useCallback((event) => {
        if (node && !node.contains(event.target)) {
            savedHandler.current(event);
        }
    }, [node]);
    useEffect(() => {
        savedHandler.current = handler;
    });
    const ref = useCallback((nodeElement) => {
        setNode(nodeElement);
    }, []);
    useEffect(() => {
        if (when) {
            document.addEventListener("click", memoizedCallback, true);
            document.addEventListener("ontouchstart", memoizedCallback, true);
            return () => {
                document.removeEventListener("click", memoizedCallback, true);
                document.removeEventListener("ontouchstart", memoizedCallback, true);
            };
        }
        return noop;
    }, [when, memoizedCallback]);
    return [ref];
}

export { useOutsideClickRef };
