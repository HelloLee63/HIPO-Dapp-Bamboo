import { noop } from '../utils/noop.js';
import { useState, useRef, useEffect, useCallback } from 'react';

const config = {
    box: "content-box",
};
/**
 *
 * useResizeObserverRef hook
 *
 * Returns a resize observer for a React Ref and fires a callback
 * https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver
 *
 * @param {ResizeObserverCallback} callback Function that needs to be fired on resize
 * @param {ResizeObserverOptions} options An options object allowing you to set options for the observation
 * @returns {[CallbackRef]} callbackref
 * @see https://rooks.vercel.app/docs/useResizeObserverRef
 */
function useResizeObserverRef(callback, options = config) {
    const { box } = options;
    const [node, setNode] = useState(null);
    const callbackRef = useRef(callback);
    useEffect(() => {
        callbackRef.current = callback;
    });
    const handleResizeObserver = useCallback((...args) => {
        var _a;
        (_a = callbackRef.current) === null || _a === void 0 ? void 0 : _a.call(callbackRef, ...args);
    }, []);
    useEffect(() => {
        if (node) {
            // Create an observer instance linked to the callback function
            const observer = new ResizeObserver(handleResizeObserver);
            // Start observing the target node for resizes
            observer.observe(node, { box });
            return () => {
                observer.disconnect();
            };
        }
        return noop;
    }, [node, handleResizeObserver, box]);
    const ref = useCallback((node) => {
        setNode(node);
    }, []);
    return [ref];
}

export { useResizeObserverRef };
