import { useState, useCallback, useEffect } from 'react';
import { useFreshCallback } from './useFreshCallback.js';
import { useTimeoutWhen } from './useTimeoutWhen.js';

const defaultOnClick = () => { };
const useOnLongPress = (callback, { onClick, duration = 300 } = {}) => {
    const [targetNode, setTargetNode] = useState(null);
    const ref = useCallback((node) => {
        setTargetNode(node);
    }, []);
    const [isPressing, setIsPressing] = useState(false);
    const freshCallback = useFreshCallback(callback);
    const freshClick = useFreshCallback(onClick !== null && onClick !== void 0 ? onClick : defaultOnClick);
    useTimeoutWhen(freshCallback, duration, isPressing);
    const start = useCallback((_) => {
        setIsPressing(true);
    }, []);
    const handleOnClick = useCallback((event) => {
        setIsPressing(false);
        freshClick(event);
    }, [freshClick]);
    useEffect(() => {
        if (targetNode) {
            targetNode.addEventListener("mousedown", start);
            targetNode.addEventListener("mouseup", handleOnClick);
            targetNode.addEventListener("mouseleave", handleOnClick);
            targetNode.addEventListener("touchstart", start);
            targetNode.addEventListener("touchend", handleOnClick);
            targetNode.addEventListener("touchcancel", handleOnClick);
        }
        return () => {
            if (targetNode) {
                targetNode.removeEventListener("mousedown", start);
                targetNode.removeEventListener("mouseup", handleOnClick);
                targetNode.removeEventListener("mouseleave", handleOnClick);
                targetNode.removeEventListener("touchstart", start);
                targetNode.removeEventListener("touchend", handleOnClick);
                targetNode.removeEventListener("touchcancel", handleOnClick);
            }
        };
    }, [start, handleOnClick, targetNode]);
    // clone ref
    return ref;
};

export { useOnLongPress };
