import { useState, useCallback, useEffect } from 'react';
import { useForkRef } from './useForkRef.js';
import { useMutationObserverRef } from './useMutationObserverRef.js';

/**
 * @param element HTML element whose boundingclientrect is needed
 * @returns DOMRect
 */
function getBoundingClientRect(element) {
    return element.getBoundingClientRect();
}
/**
 * useBoundingclientrectRef hook
 * Tracks the boundingclientrect of a React Ref and fires a callback when the element's size changes.
 *
 * @returns [CallbackRef | null, DOMRect | null, () => void]
 * @see https://rooks.vercel.app/docs/useBoundingclientRectRef
 */
function useBoundingclientrectRef() {
    const [domRect, setDomRect] = useState(null);
    const [node, setNode] = useState(null);
    const update = useCallback(() => {
        setDomRect(node ? getBoundingClientRect(node) : null);
    }, [node]);
    useEffect(() => {
        update();
    }, [update]);
    const ref = useCallback((nodeElement) => {
        setNode(nodeElement);
    }, []);
    const [mutationObserverRef] = useMutationObserverRef(update);
    const forkedRef = useForkRef(ref, mutationObserverRef);
    return [forkedRef, domRect, update];
}

export { useBoundingclientrectRef };
