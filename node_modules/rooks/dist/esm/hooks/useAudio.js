import { useState, useEffect } from 'react';
import { useFreshCallback } from './useFreshCallback.js';

/**
 * useAudio
 * @description Audio hook
 * @see {@link https://rooks.vercel.app/docs/useAudio}
 */
const noop = () => { };
function useAudio(options = {}, callbacks = {}) {
    var _a, _b, _c, _d, _e;
    const { autoPlay = false, isMuted: initialIsMuted = false } = options;
    const [isPlaying, setIsPlaying] = useState(autoPlay);
    const [isMuted, setIsMuted] = useState(initialIsMuted);
    const [audioNode, setAudioNode] = useState(null);
    const onPlay = useFreshCallback((_a = callbacks.onPlay) !== null && _a !== void 0 ? _a : noop);
    const onPause = useFreshCallback((_b = callbacks.onPause) !== null && _b !== void 0 ? _b : noop);
    const onMute = useFreshCallback((_c = callbacks.onMute) !== null && _c !== void 0 ? _c : noop);
    const onUnmute = useFreshCallback((_d = callbacks.onUnmute) !== null && _d !== void 0 ? _d : noop);
    const onLoadedMetadata = useFreshCallback((_e = callbacks.onLoadedMetadata) !== null && _e !== void 0 ? _e : noop);
    const audioCallbackRef = (node) => {
        if (node !== null) {
            setAudioNode(node);
        }
    };
    useEffect(() => {
        if (!audioNode)
            return;
        if (isPlaying) {
            audioNode.play();
        }
        else {
            audioNode.pause();
        }
    }, [audioNode, isPlaying]);
    useEffect(() => {
        if (!audioNode)
            return;
        audioNode.muted = isMuted;
    }, [audioNode, isMuted]);
    useEffect(() => {
        if (!audioNode)
            return;
        const handleLoadedMetadata = () => {
            if (autoPlay) {
                audioNode === null || audioNode === void 0 ? void 0 : audioNode.play();
            }
            onLoadedMetadata();
        };
        const handlePlay = () => {
            onPlay();
        };
        const handlePause = () => {
            onPause();
        };
        const handleEnded = () => {
            setIsPlaying(false);
        };
        audioNode === null || audioNode === void 0 ? void 0 : audioNode.addEventListener("loadedmetadata", handleLoadedMetadata);
        audioNode === null || audioNode === void 0 ? void 0 : audioNode.addEventListener("play", handlePlay);
        audioNode === null || audioNode === void 0 ? void 0 : audioNode.addEventListener("pause", handlePause);
        audioNode === null || audioNode === void 0 ? void 0 : audioNode.addEventListener("ended", handleEnded);
        return () => {
            audioNode === null || audioNode === void 0 ? void 0 : audioNode.removeEventListener("loadedmetadata", handleLoadedMetadata);
            audioNode === null || audioNode === void 0 ? void 0 : audioNode.removeEventListener("play", handlePlay);
            audioNode === null || audioNode === void 0 ? void 0 : audioNode.removeEventListener("pause", handlePause);
            audioNode === null || audioNode === void 0 ? void 0 : audioNode.removeEventListener("ended", handleEnded);
        };
    }, [autoPlay, onLoadedMetadata, onPlay, onPause, audioNode]);
    const play = () => {
        setIsPlaying(true);
    };
    const pause = () => {
        setIsPlaying(false);
    };
    const togglePlay = () => {
        setIsPlaying(!isPlaying);
    };
    const mute = () => {
        setIsMuted(true);
        onMute();
    };
    const unmute = () => {
        setIsMuted(false);
        onUnmute();
    };
    const toggleMute = () => {
        if (isMuted) {
            unmute();
        }
        else {
            mute();
        }
    };
    const controls = {
        play,
        pause,
        togglePlay,
        mute,
        unmute,
        toggleMute,
    };
    const state = {
        isPlaying,
        isMuted,
    };
    return [audioCallbackRef, state, controls];
}

export { useAudio };
